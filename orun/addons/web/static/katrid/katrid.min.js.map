{"version":3,"sources":["katrid.js"],"names":["Katrid","Actions","registry","Action","[object Object]","config","$container","this","info","scope","location","app","actionManager","addAction","$element","$parent","breadcrumb","getBreadcrumb","remove","$destroy","empty","id","context","_","isString","_context","JSON","parse","searchParams","window","href","split","urlParams","URLSearchParams","k","v","startsWith","act","type","action_type","dispatchAction","evt","preventDefault","stopPropagation","ctrlKey","open","target","console","log","hash","index","b","back","action","url","$","trigger","display_name","isDialog","search","apply","arguments","params","templ","getTemplate","Core","$compile","find","html","ViewAction","param","svc","Services","Model","content","post","args","view","actionType","UrlAction","super","ActionManager","$cachedActions","actions","currentAction","mainAction","push","length","$attach","refreshBreadcrumb","angular","loadPage","$location","splice","indexOf","i","path","reset","oldAction","actionId","clear","actionInfo","createScope","model","rpc","load","onHashChange","$scope","$new","bc","isLeaf","ClientAction","tag","obj","parent","prototype","Forms","Views","ActionView","renderTo","btn","attr","execute","dataSource","refresh","templateUrl","ClientView","el","render","modal","append","constructor","template","ReportAction","userReport","format","localStorage","katridReportViewer","sel","selection","join","data","name","value","res","kwargs","report","user_report","result","Reports","renderDialog","WindowAction","_cachedViews","viewMode","view_mode","viewModes","Data","DataSource","$on","onDataStateChange","afterCancel","state","DataSourceState","inserting","record","field","control","form","$setDirty","invalidate","allowedParams","view_type","Object","assign","keys","includes","oldParams","history","replaceState","viewType","recordId","get","method","event","isArray","isObject","ctx","getContext","active_id","active_ids","getCurrentTitle","$$search","switchView","backToSearch","confirm","i18n","gettext","delete","backTo","next","rec","findById","records","$apply","copy","configId","views","getViewInfo","Dialogs","Window","createNew","defaultValues","menu_id","searchModes","filter","makeUrl","lastViewType","text","record_name","h","detach","appendTo","loadViews","toolbar","fields","fieldList","firstTime","viewInfo","ready","lastUrl","setTimeout","insert","_viewType","destroyChildren","q","r","p","Array","from","domain","parseJSON","entries","arg","groups","groupBy","$expanded","expandGroup","collapseGroup","group","count","$params","viewAction","confirmation","prompt","_doViewAction","promptValue","doViewAction","action_name","then","status","meth","self","download","a","document","createElement","click","currentTarget","dispatchBindingAction","row","$hasChildren","groupHeaderClick","recordIndex","changing","focus","autoReport","ok","_selection","closest","selectionLength","map","attachments","att","Attachments","destroy","_isMobile","check","navigator","userAgent","vendor","test","substr","settings","additionalModules","server","ui","isMobile","dateInputMask","defaultView","goToDefaultViewAfterCancelInsert","goToDefaultViewAfterCancelEdit","horizontalForms","services","choicesPageLimit","speech","enabled","Loader","templateCache","$cache","src","noCache","Templates","templates","env","nunjucks","Environment","$templateCache","autoescape","oldGet","prepare","call","loadTemplates","PRE_LOADED_TEMPLATES","put","isUndefined","Error","tagName","innerHTML","base","child","$child","op","templateLst","readTemplates","children","preProcess","getAttribute","root","DOMParser","parseFromString","firstChild","childNodes","registerTemplate","tmpl","Menu","on","actionClick","style","display","querySelectorAll","forEach","removeAttribute","WebApplication","opts","entry","customElementsRegistry","customElements","define","menu","title","plugins","loadingTimeout","overlayTimeout","loadingMsg","hide","overlay","show","clearTimeout","ajaxStart","ajaxStop","item","each","idx","$el","addEventListener","fetch","ngApp","module","run","$locationProvider","$interpolateProvider","hashPrefix","startSymbol","endSymbol","controller","init","element","bootstrap","Event","isPropagationStopped","currentMenu","_hash","tpl","endsWith","login","async","username","password","multidb","db","redirect","error","messages","message","emptyText","LocalSettings","localSettings","searchMenuVisible","parseInt","callbacks","cb","callback","setContent","connections","connection","defaultConnection","DEFAULT_REQUEST_INTERVAL","$modifiedRecords","refreshInterval","readonly","_model","_recordIndex","recordCount","loading","loadingRecord","_masterSource","masterSource","master","_pageIndex","pageLimit","offset","offsetLimit","requestInterval","pendingOperation","pendingRequest","fieldName","modifiedData","uploading","_state","fieldWatchers","_pendingChanges","$fieldLog","_records","pageIndex","page","_params","_fields","loadingAction","_loadingAction","editing","browsing","$emit","setValues","_page","elForm","errorMsgs","elfield","errorType","$error","$name","_validateForm","addClass","caption","raiseError","$invalid","errors","s","formElement","UI","uiKatrid","setFocus","Alerts","timeout","_clearTimeout","where","limit","Promise","resolve","reject","req","catch","rawData","createRecord","finally","groupings","_loadGroup","rows","concat","groupName","paramValue","__str__","$group","$level","newIndex","_canceled","getModifiedData","_id","ds","ret","deleted","$deleted","undefined","$modified","$modifiedData","_getModified","jQuery","extend","getNestedData","values","autoRefresh","flush","$form","validate","$record","serialize","beforeSubmit","$eval","write","$setPristine","$setUntouched","fld","msgs","sfld","subField","msg","warn","recs","vals","$created","SubRecords","_getNested","_get","getById","defaultValue","loadDefaults","oldRecs","getDefaults","defaults","ngDefaultValues","default_values","isFunction","fromJSON","Date","_modifiedFields","dispatchEvent","CustomEvent","detail","childrenNotification","moveBy","Math","floor","$children","_chain","collapse","_applyResponse","setDirty","parentNotification","parentRecord","discard","Fields","toCamelCase","replace","trim","toLowerCase","c","toUpperCase","Field","visible","cssClass","helpText","help_text","required","onChange","onchange","nolabel","displayChoices","object","choices","create","loadInfo","cols","list","card","newField","fieldEl","_fieldEl","newInfo","attributes","nodeValue","widget","bind","attrs","camelCase","ngReadonly","ngShow","ngIf","ngClass","validAttributes","ngFieldChange","hasChoices","maxLength","max_length","paramTemplate","toString","val","Widgets","StringField","defaultCondition","condition","PasswordField","BooleanField","DateField","moment","getAttributes","DateTimeField","TimeField","NumericField","parseFloat","IntegerField","FloatField","DecimalField","decimalPlaces","decimal_places","ForeignKey","OneToManyField","childByName","addRecord","ManyToManyField","TextField","XmlField","JsonField","PythonCodeField","ImageField","noImageUrl","ngSrc","ngEmptyImage","emptyImage","fromInfo","fromArray","radio","RecordState","Record","newRecord","pristine","pending","modified","unmodified","submitted","pk","created","destroyed","setModified","oldValue","newValue","addChild","propKey","fieldByName","toJSON","compare","$encode","_info","Proxy","receiver","set","Reflect","toastr","keyCode","BACKSPACE","COMMA","DELETE","DOWN","END","ENTER","ESCAPE","HOME","LEFT","PAGE_DOWN","PAGE_UP","PERIOD","RIGHT","SPACE","TAB","UP","toggleFullScreen","fullscreenElement","exitFullscreen","documentElement","requestFullscreen","Widget","Component","ID","genId","FieldWidget","HTMLElement","_field","actionView","InputField","compileButtons","container","sendFileCounter","$btn","sendFile","idSendFile","BaseView","sprintf","getTemplateContext","View","btns","buttons","WindowView","cloneNode","headerEl","querySelector","header","statusField","setAttribute","directive","restrict","$observe","Dialog","options","first","parentAction","dialogTitle","elScope","FormView","dialog","targetScope","getFieldChoices","ids","items","select2","creationName","creation_name","Card","renderField","replaceWith","outerHTML","tabset","classList","add","createHeader","hasAttribute","parentElement","insertBefore","FormDialog","List","languageCode","formats","catalog","initialize","plural","pluralidx","n","Boolean","mixin","initialized","merge","key","gettext_noop","singular","ngettext","interpolate","fmt","named","match","String","slice","shift","formatType","KATRID_I18N","conditionsLabels","=","!=",">","<","conditionSuffix","like","not like",">=","<=","in","not in","SearchQuery","searchView","facet","addValue","renderFacets","SearchGroup","change","getParamValues","FacetView","separator","searchString","getDisplayValue","templateValue","SearchObject","onRemoveItem","query","loadItem","getParamValue","OR","FacetGroup","grouping","oldValues","_ref","_selected","SearchItem","update","SearchFilter","selected","removeValue","_doChange","SearchFilters","_facet","fromItem","_refresh","facets","SearchGroups","facetGrouping","groupLength","newItem","SearchResult","indent","selectItem","SearchField","_expanded","expandable","expanded","_loadChildren","$items","_value","addFacet","close","$filter","tempFilter","customFilter","fieldChange","conditionChange","controlVisible","isControlVisible","valueChange","searchValue","addCondition","applyFilter","selectAll","customSearchExpanded","SearchView","_viewMoreButtons","getItem","filterGroups","_groupLength","input","prop","fromGroup","fromField","which","move","select","customGroups","viewMoreButtons","setItem","getByName","subitem","removeClass","distance","fw","abs","prev","applyGroups","getParams","setSearchParams","shouldApply","default_search","ViewInfo","WIDGET_COUNT","DEFAULT_COLS","SmallIntegerField","CharField","templAttrs","wAttrs","spanPrefix","depends","addFieldWatcher","col","classes","$watch","templTag","inplaceEditor","cls","ngModel","$attr","attrName","widgetAttrs","placeholder","label","readOnlyClass","_getWidgetAttrs","inner","innerHtml","span","spanTemplate","labelTemplate","widgetTemplate","inline","dep","fieldChangeWatchers","onFieldChange","done","lbl","_gridEditor","InputWidget","prependIcon","icon","SelectionField","allowOpen","inList","maxDigits","FileField","imgSrc","SortableField","string","integer","decimal","float","file","boolean","image","sortable","OneToManyWidget","_viewMode","_scope","_action","OneToManyAction","_dataSource","preLoadedViews","_viewInfo","relField","elView","tb","renderToolbar","appendChild","innerText","addItem","formInfo","dlg","editItem","showDialog","edit","css","txt","Service","URL","response","$fetch","credentials","body","stringify","headers","content-type","json","methName","rpcName","Accept","Content-Type","success","FormData","f","files","ajax","processData","contentType","_prepareFields","term","responseText","alert","Query","details","with_desc","as_dict","sql","level","levels","fm","service","dirs","getPath","expand","currentItem","currentPath","uploadFile","Upload","uploadTo","register","queryChange","me","is_default","is_shared","ordering","reverse","getSearchView","renderSearch","renderTable","read","getFilter","_toObject","queries","all","_counter","Params","Operations","exact","contains","startswith","endswith","gt","lt","between","isnull","Labels","DefaultOperations","ModelChoices","TypeOperations","secondField","operation","serviceName","multiple","modelChoices","Param","static","defaultOperation","operations","getOperations","exclude","createControls","operationTemplate","compile","xmlReport","Report","loadFromXml","loadParams","setOperation","ReportEngine","currentReport","currentUserReport","filters","groupables","sortables","totals","value1","value2","sorting","xml","dataTypeDict","date","datetime","customizableReport","advancedOptions","groupable","total","autoCreate","getUserParams","dataType","addParam","paramName","export","flds","aggs","result1","tags","result2","result3","elParams","loaded","userParams","containment","start","renderFields","renderSorting","renderGrouping","renderParams","require","link","elm","editor","paths","vs","language","monaco","minimap","automaticLayout","getModel","onDidChangeContent","$setViewValue","getValue","$render","setValue","$viewValue","formCount","priority","ctrl","fieldAttributes","sectionAttrs","fcontrol","$ngModelController","$addControl","RegExp","nm","ngSum","$modelValue","ngEnter","$event","ngEsc","fn","Constructor","_enforceFocus","ajaxChoices","_timeout","cfg","allowClear","name_fields","nameFields","searchName","more","results","escapeMarkup","m","e","inputmask","inputDecimal","alias","groupSeparator","unmaskAsNumber","radixPoint","autoGroup","digitsOptional","digits","$parsers","$formatters","isNumber","toFixed","fromNow","accept","reader","FileReader","onload","readAsDataURL","setNow","toISOString","_focus","keypress","keydown","isDate","utc","regex","insertMode","connectWith","cardDraggable","cursor","cardItem","cardGroup","modelName","reorder","disableSelection","tooltip","delay","ngClick","dataGroup","x","grps","g","z","dashboardId","chart","observe","executeSql","source","bindto","color","pattern","Dashboard","colorPatterns","hasData","columns","c3","generate","headerClick","className","footer","controls","$counter","$loading","dataParams","DashboardWidget","$sourceScope","sourceScope","_groupBy","grid","_lastData","member","to","_renderGroup","unit","duration","Chart","backButton","prepend","firstRow","alasql","y","axis","legend","onclick","labels","pie","$data","$columns","size","width","$chart","mask","datePicker","calendar","datetimepicker","useCurrent","icons","time","isValid","$controller","autocomplete","minLength","_shown","foreignkey","newEditItem","allowCreate","formatSelection","str","allowCreateEdit","noCreateEdit","added","createName","err","parentModal","$timeout","helper","tr","$originals","$helper","clone","eq","stop","itemClick","Intl","NumberFormat","maximumSignificantDigits","newViews","$loaded","totalDisplayed","_changeCount","dataSet","isList","inlineEditor","hasOwnProperty","gridDialog","charAt","substring","_incChanges","cancelChanges","setState","openItem","save","removeItem","$delete","$set","pasteData","cache","_queryForeignKeyField","clipboard","readText","newObj","masterChanged","pendingMasterId","unhook","cancel","gridEl","_destroyChildren","rowClick","ngRowClick","listOptions","formView","thead","tfoot","ngTrClass","td","th","hasTotal","deleteRow","delRow","expr","setSelectionRange","rangeStart","rangeEnd","createTextRange","range","moveStart","moveEnd","getSelection","part","pos","stored_range","selectionStart","selectionEnd","createRange","duplicate","setEndPoint","_keydown","codes","188","110","108","109","190","191","192","220","222","221","219","173","187","186","189","shifts","96","49","50","51","52","53","54","55","56","57","48","45","61","91","93","92","59","39","44","46","47","number","decimals","dec_point","thousands_sep","u_dec","charCodeAt","regex_dec_num","regex_dec","is","keydown.format","$this","code","chara","end","setPos","negative","shiftKey","fromCharCode","metaKey","max","isFinite","altKey","keyup.format","paste.format","original","originalEvent","clipboardData","getData","num","origHookGet","origHookSet","isPlainObject","valHooks","u_sep","pow","round","toFixedFix","comments","_pendingOperation","content_subtype","hideEditor","upload","_sendMesage","showEditor","attachFile","deleteFile","MailComments","initClass","nav","div","tabContent","navItem","heading","tab","Telegram","partners","contacts","DEFAULT_EXPAND_CLASS","DEFAULT_COLLAPSE_CLASS","_el","setElement","katrid","TreeNode","treeView","_level","_children","_ul","_a","_canExpand","_exp","_iconElement","createTextNode","_parent","nodes","previousSibling","nextSibling","previous","last","node","calcLevel","parentNode","removeChild","delta","TreeView","dom","addNodes","tabIndex","currentNode","firstNode","lastNode","curNode","addNode","BaseTemplate","cssListClass","parentDataSource","showSelector","ths","colHtml","fieldInfo","_widget","createWidget","t","gridClass","tbl","renderList","utils","Web","_recordLoadedHook","object_id","removeEventListener","renderItem","download_url","onDeleteAttachment","$hashId","iterable","Number","isNaN","sum"],"mappings":"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","file":"katrid.min.js","sourcesContent":["var Katrid;\n(function (Katrid) {\n    var Actions;\n    (function (Actions) {\n        Actions.registry = {};\n        class Action {\n            constructor(config) {\n                this.info = config.info;\n                this.scope = config.scope;\n                this.location = config.location;\n                this.app = Katrid.app;\n                Katrid.app.actionManager.addAction(this);\n                let $container;\n                if (!config.$container)\n                    $container = Katrid.app.$element;\n                this.$parent = $container;\n            }\n            getContext() {\n                return {};\n            }\n            getBreadcrumb() {\n            }\n            get breadcrumb() {\n                return this.getBreadcrumb();\n            }\n            $destroy() {\n                Katrid.app.actionManager.remove(this);\n                this.scope.$destroy();\n                if (this.$element)\n                    this.$element.remove();\n                else\n                    this.$parent.empty();\n            }\n            get id() {\n                return this.info.id;\n            }\n            get context() {\n                if (_.isString(this.info.context))\n                    this._context = JSON.parse(this.info.context);\n                else\n                    this._context = {};\n                let searchParams = window.location.href.split('#', 2)[1];\n                if (searchParams) {\n                    const urlParams = new URLSearchParams(searchParams);\n                    for (let [k, v] of urlParams)\n                        if (k.startsWith('default_'))\n                            this._context[k] = v;\n                }\n                return this._context;\n            }\n            doAction(act) {\n                let type = act.type || act.action_type;\n                return Actions.registry[type].dispatchAction(this, act);\n            }\n            openObject(evt) {\n                evt.preventDefault();\n                evt.stopPropagation();\n                if (evt.ctrlKey) {\n                    window.open(evt.target.href);\n                    return false;\n                }\n                else {\n                    console.log(evt.target.href);\n                    location.hash = evt.target.href;\n                }\n                return false;\n            }\n            restore() { }\n            apply() { }\n            backTo(index) {\n                let b = Katrid.app.actionManager.breadcrumb[index];\n                if (b)\n                    Katrid.app.actionManager.back(b.action, b.url);\n                return;\n            }\n            execute() {\n                $(this.app).trigger('action.execute', this);\n            }\n            getCurrentTitle() {\n                return this.info.display_name;\n            }\n            search() {\n                if (!this.isDialog) {\n                    return this.location.search.apply(null, arguments);\n                }\n            }\n            onHashChange(params) {\n                $(this.app).trigger('action', [this]);\n            }\n            $attach() {\n            }\n            refreshBreadcrumb() {\n                let templ = Katrid.app.getTemplate('view.breadcrumb.jinja2', {\n                    breadcrumb: Katrid.app.actionManager.breadcrumb,\n                    action: this\n                });\n                templ = Katrid.Core.$compile(templ)(this.scope);\n                this.$element.find('.breadcrumb-nav').html(templ);\n            }\n        }\n        Actions.Action = Action;\n        class ViewAction extends Action {\n            async onHashChange(params) {\n                location.hash = '#/app/?' + $.param(params);\n                let svc = new Katrid.Services.Model('ir.action.view');\n                let res = await svc.post('get_view', { args: [this.info.view[0]] });\n                let content = res.content;\n                $(Katrid.app.$element).html(Katrid.Core.$compile(content)(this.scope));\n            }\n        }\n        ViewAction.actionType = 'ir.action.view';\n        class UrlAction extends Action {\n            constructor(info) {\n                super(info);\n                window.location.href = info.url;\n            }\n        }\n        UrlAction.actionType = 'ir.action.url';\n        class ActionManager {\n            constructor() {\n                this.$cachedActions = {};\n                this.actions = [];\n                this.currentAction = null;\n                this.mainAction = null;\n            }\n            addAction(action) {\n                if (!this.mainAction)\n                    this.mainAction = action;\n                this.actions.push(action);\n                this.currentAction = action;\n            }\n            back(action, url) {\n                if (action)\n                    this.action = action;\n                else if (this.length > 1) {\n                    this.action = this.actions[this.length - 2];\n                    this.action.$attach();\n                }\n                this.action.refreshBreadcrumb();\n                if (angular.isString(url))\n                    Katrid.app.loadPage(url);\n                else if (url)\n                    Katrid.app.$location.search(url);\n            }\n            remove(action) {\n                this.actions.splice(this.actions.indexOf(action), this.length);\n                if (this.length === 0)\n                    this.mainAction = null;\n            }\n            get length() {\n                return this.actions.length;\n            }\n            get action() {\n                return this.currentAction;\n            }\n            get context() {\n                if (this.currentAction)\n                    return this.currentAction.context;\n            }\n            set action(action) {\n                let i = this.actions.indexOf(action);\n                if (i > -1) {\n                    i++;\n                    while (this.length > i)\n                        this.actions[i].$destroy();\n                    this.currentAction = action;\n                }\n            }\n            clear() {\n                for (let action of this.actions)\n                    action.$destroy();\n                this.actions.length = 0;\n                this.mainAction = null;\n                this.currentAction = null;\n            }\n            get path() {\n                return this.action.path;\n            }\n            doAction(action) {\n            }\n            async onHashChange(params, reset) {\n                let actionId = params.action;\n                if (reset)\n                    this.clear();\n                let oldAction, action;\n                action = oldAction = this.currentAction;\n                if (actionId in this.$cachedActions) {\n                    let actionInfo = this.$cachedActions[actionId];\n                    let scope = this.createScope();\n                    action = scope.action = new Katrid.Actions.registry[actionInfo.action_type]({ info: actionInfo, scope, location: params });\n                }\n                else if (!actionId && params.model && (!action || (action.params && (action.params.model !== params.model)))) {\n                    let svc = new Katrid.Services.Model(params.model);\n                    let actionInfo = await svc.rpc('get_formview_action', [params.id]);\n                    let scope = this.createScope();\n                    action = scope.action = new Katrid.Actions.registry[actionInfo.action_type]({ info: actionInfo, scope, location: params });\n                }\n                else if (!(this.currentAction && (this.currentAction.info.id == actionId))) {\n                    if (this.currentAction && reset)\n                        this.currentAction.$destroy();\n                    let actionInfo = await Katrid.Services.Actions.load(actionId);\n                    let scope = this.createScope();\n                    action = scope.action = new Katrid.Actions.registry[actionInfo.action_type]({ info: actionInfo, scope, location: params });\n                }\n                await action.onHashChange(params);\n            }\n            createScope() {\n                let scope = Katrid.app.$scope.$new(true);\n                scope._ = _;\n                return scope;\n            }\n            get breadcrumb() {\n                let breadcrumb = [];\n                for (let action of this.actions) {\n                    let bc = action.breadcrumb;\n                    if (bc && bc.length) {\n                        for (let b of bc)\n                            b.isLeaf = false;\n                        breadcrumb.push(...bc);\n                    }\n                }\n                breadcrumb[breadcrumb.length - 1].isLeaf = true;\n                return breadcrumb;\n            }\n        }\n        Actions.ActionManager = ActionManager;\n        Actions.registry[ViewAction.actionType] = ViewAction;\n        Actions.registry[UrlAction.actionType] = UrlAction;\n    })(Actions = Katrid.Actions || (Katrid.Actions = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Actions;\n    (function (Actions) {\n        class ClientAction extends Katrid.Actions.Action {\n            static register(tag, obj) {\n                this.registry[tag] = obj;\n            }\n            static executeTag(parent, act) {\n                let action = this.registry[act.tag];\n                if (action.prototype instanceof Katrid.Forms.Views.ActionView) {\n                    action = new action(parent.scope);\n                    action.renderTo(parent);\n                }\n                else\n                    console.log('is a function');\n            }\n            static tagButtonClick(btn) {\n                let action = {\n                    type: 'ir.action.client',\n                    tag: btn.attr('name'),\n                    target: btn.attr('target') || 'new',\n                };\n                action = new ClientAction({\n                    action, app: Katrid.app.actionManager.action.scope, location: Katrid.app.actionManager.action.location\n                });\n                action.execute();\n            }\n            tag_refresh() {\n                this.dataSource.refresh();\n            }\n            get templateUrl() {\n                console.log(this.tag);\n                return this.tag.templateUrl;\n            }\n            async execute() {\n                let tag = ClientAction.registry[this.info.tag];\n                this.tag = tag;\n                if (tag.prototype instanceof Katrid.Forms.Views.ClientView) {\n                    this.tag = new tag(this);\n                    let el = await this.tag.render();\n                    if (this.info.target === 'new') {\n                        el = el.modal();\n                    }\n                    else {\n                        $('#katrid-action-view').empty().append(el);\n                    }\n                }\n                else if (_.isString(tag))\n                    this.constructor.registry[tag].apply(this);\n            }\n            async routeUpdate(location) {\n            }\n            get template() {\n                return this.tag.template;\n            }\n        }\n        ClientAction.actionType = 'ir.action.client';\n        ClientAction.registry = {};\n        Actions.ClientAction = ClientAction;\n    })(Actions = Katrid.Actions || (Katrid.Actions = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Actions;\n    (function (Actions) {\n        class ReportAction extends Katrid.Actions.Action {\n            constructor(info, scope, location) {\n                super(info);\n                this.templateUrl = 'view.report.jinja2';\n                this.userReport = {};\n            }\n            static async dispatchBindingAction(parent, action) {\n                let format = localStorage.katridReportViewer || 'pdf';\n                let sel = parent.selection;\n                if (sel)\n                    sel = sel.join(',');\n                let params = { data: [{ name: 'id', value: sel }] };\n                let svc = new Katrid.Services.Model('ir.action.report');\n                let res = await svc.post('export_report', { args: [action.id], kwargs: { format, params } });\n                if (res.open)\n                    return window.open(res.open);\n            }\n            get name() {\n                return this.info.name;\n            }\n            userReportChanged(report) {\n                return this.location.search({\n                    user_report: report\n                });\n            }\n            async onHashChange(params) {\n                console.log('report hash change', params);\n                this.userReport.id = params.user_report;\n                if (this.userReport.id) {\n                    let svc = new Katrid.Services.Model('ir.action.report');\n                    let res = await svc.post('load_user_report', { kwargs: { user_report: this.userReport.id } });\n                    this.userReport.params = res.result;\n                }\n                else {\n                }\n                location.hash = '#/app/?' + $.param(params);\n                let templ = Katrid.Reports.renderDialog(this);\n                templ = Katrid.Core.$compile(templ)(this.scope);\n                $('#katrid-action-view').empty().append(templ);\n            }\n        }\n        ReportAction.actionType = 'ir.action.report';\n        Actions.ReportAction = ReportAction;\n        Katrid.Actions.registry[ReportAction.actionType] = ReportAction;\n    })(Actions = Katrid.Actions || (Katrid.Actions = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Actions;\n    (function (Actions) {\n        class WindowAction extends Katrid.Actions.Action {\n            constructor(config) {\n                super(config);\n                this._cachedViews = {};\n                this.model = config.scope.model;\n                this.viewMode = config.info.view_mode;\n                this.viewModes = this.viewMode.split(',');\n                if (config.info.model)\n                    config.scope.model = this.model = new Katrid.Services.Model(config.info.model);\n                this.dataSource = new Katrid.Data.DataSource({\n                    model: this.model,\n                    scope: config.scope,\n                    action: this,\n                });\n                config.scope.$on('dataStateChange', this.onDataStateChange);\n                config.scope.$on('afterCancel', (evt, dataSource) => {\n                    if (dataSource === this.dataSource)\n                        this.afterCancel(evt, dataSource);\n                });\n            }\n            afterCancel(evt, dataSource) {\n                if (dataSource.state === Katrid.Data.DataSourceState.inserting) {\n                    this.dataSource.record = {};\n                    this.back();\n                }\n            }\n            back() {\n            }\n            setDirty(field) {\n                const control = this.form[field];\n                if (control) {\n                    control.$setDirty();\n                }\n            }\n            async onHashChange(params) {\n                let invalidate = false;\n                let allowedParams = ['action', 'view_type', 'menu_id', 'model'];\n                let loadRecord = (this.params && (this.params.id !== params.id));\n                this.params = {};\n                if (!params.view_type) {\n                    this.params.view_type = this.viewModes[0];\n                    invalidate = true;\n                }\n                if (!params.model) {\n                    this.params.model = this.info.model;\n                    invalidate = true;\n                }\n                Object.assign(this.params, params);\n                if (this.params.view_type === 'form')\n                    allowedParams.splice(0, 0, 'id');\n                for (let k of Object.keys(this.params))\n                    if (!allowedParams.includes(k) && !k.startsWith('default_')) {\n                        invalidate = true;\n                    }\n                if (invalidate) {\n                    let oldParams = this.params;\n                    this.params = {};\n                    for (let k of allowedParams)\n                        this.params[k] = oldParams[k];\n                    if (!this.params.action)\n                        delete this.params.action;\n                    history.replaceState(null, null, '#/app/?' + $.param(this.params));\n                }\n                let viewType = this.params.view_type;\n                if (viewType !== this.viewType) {\n                    this.viewType = viewType;\n                    await this.execute();\n                }\n                if (this.params.id && (this.dataSource.recordId != this.params.id))\n                    await this.dataSource.get(this.params.id);\n            }\n            rpc(method, data, event) {\n                if (event)\n                    event.stopPropagation();\n                if (!data)\n                    data = {};\n                else if (_.isArray(data))\n                    data = { args: data };\n                else if (!_.isObject(data))\n                    data = { args: [data] };\n                this.model.rpc(method, data.args, data.kwargs);\n            }\n            getContext() {\n                let ctx = super.getContext();\n                let sel = this.selection;\n                if (sel && sel.length) {\n                    ctx.active_id = sel[0];\n                    ctx.active_ids = sel;\n                }\n                return ctx;\n            }\n            getCurrentTitle() {\n                if (this.viewType === 'form') {\n                    return this.scope.record.display_name;\n                }\n                return super.getCurrentTitle();\n            }\n            switchView(viewType, params) {\n                if (viewType !== this.viewType) {\n                    let search = {};\n                    Object.assign(search, Katrid.app.$location.$$search);\n                    if (params)\n                        Object.assign(search, params);\n                    search.view_type = viewType;\n                    Katrid.app.$location.search(search);\n                }\n            }\n            createNew() {\n                this.switchView('form', { id: null });\n            }\n            async deleteSelection(backToSearch) {\n                let sel = this.selection;\n                if (!sel)\n                    return false;\n                if (((sel.length === 1) && confirm(Katrid.i18n.gettext('Confirm delete record?'))) ||\n                    ((sel.length > 1) && confirm(Katrid.i18n.gettext('Confirm delete records?')))) {\n                    await this.dataSource.delete(sel);\n                    if (backToSearch) {\n                        this.app.actionManager.backTo(-1);\n                        this.dataSource.refresh();\n                    }\n                    else\n                        this.dataSource.next();\n                    for (let rec of sel) {\n                        let i = this.dataSource.findById(rec);\n                        console.log(this.dataSource.records.indexOf(i));\n                        this.dataSource.records.splice(this.dataSource.records.indexOf(i), 1);\n                    }\n                    this.scope.$apply();\n                }\n            }\n            async copy() {\n                this.viewType = 'form';\n                await this.dataSource.copy(this.scope.record.id);\n                return false;\n            }\n            async copyTo(configId) {\n                if (this.scope.recordId) {\n                    let svc = new Katrid.Services.Model('ir.copy.to');\n                    let res = await svc.rpc('copy_to', [configId, this.scope.recordId]);\n                    let model = new Katrid.Services.Model(res.model);\n                    let views = await model.getViewInfo({ view_type: 'form' });\n                    let wnd = new Katrid.Forms.Dialogs.Window({ scope: this.scope, view: views, model });\n                    wnd.createNew({ defaultValues: res.value });\n                }\n            }\n            makeUrl(viewType) {\n                if (!viewType)\n                    viewType = this.viewModes[0];\n                let search = {\n                    action: this.info.id,\n                    view_type: viewType,\n                    menu_id: Katrid.app.$location.$$search.menu_id,\n                };\n                if ((viewType === 'form') && this.record)\n                    search.id = this.record.id;\n                return search;\n            }\n            get record() {\n                return this.scope.record;\n            }\n            get searchModes() {\n                return this.viewModes.filter(v => v !== 'form');\n            }\n            getBreadcrumb() {\n                let breadcrumb = [];\n                if (this.searchModes.length) {\n                    breadcrumb.push({ action: this, url: this.makeUrl(this.lastViewType), text: this.info.record_name });\n                }\n                if (this.viewType === 'form') {\n                    let h = { action: this, url: this.makeUrl('form') };\n                    if (this === Katrid.app.actionManager.currentAction)\n                        h.text = '${ record.record_name }';\n                    else\n                        h.text = this.record && this.record.record_name;\n                    breadcrumb.push(h);\n                }\n                return breadcrumb;\n            }\n            $detach() {\n                this.$element.detach();\n            }\n            $attach() {\n                this.$element.appendTo(this.$parent);\n            }\n            async execute() {\n                super.execute();\n                if (!this.views) {\n                    let res = await this.model.loadViews({\n                        views: this.info.views,\n                        action: this.info.id,\n                        toolbar: true\n                    });\n                    this.fields = res.fields;\n                    this.fieldList = res.fieldList;\n                    this.views = res.views;\n                    let templ = Katrid.app.getTemplate('ir.action.window.jinja2', { action: this });\n                    templ = Katrid.Core.$compile(templ)(this.scope);\n                    templ[0].action = this;\n                    this.$parent.html(templ);\n                    this.$element = templ;\n                    this.$container = this.$element.find('.action-view-content:first');\n                }\n                let firstTime = false;\n                if (this.view) {\n                    console.log('cached', this.view.el);\n                    this._cachedViews[this.view.viewType] = this.view;\n                    this.view.el.detach();\n                }\n                else\n                    firstTime = true;\n                this.$container.empty();\n                this.refreshBreadcrumb();\n                this.scope.view = this.views[this.viewType];\n                let view;\n                if (this.viewType in this._cachedViews) {\n                    view = this._cachedViews[this.viewType];\n                    this.$container.append(view.el);\n                }\n                else {\n                    view = new Katrid.Forms.Views.registry[this.viewType]({ action: this, viewInfo: this.scope.view });\n                    view.renderTo(this.$container);\n                    view.ready();\n                }\n                if (this.viewType !== 'form') {\n                    this.lastViewType = this.viewType;\n                    this.lastUrl = location.hash;\n                    this.dataSource.refresh(true);\n                }\n                setTimeout(() => {\n                    if ((this.viewType === 'form') && !Katrid.app.$location.$$search.id)\n                        this.dataSource.insert();\n                });\n            }\n            get viewType() {\n                return this._viewType;\n            }\n            set viewType(value) {\n                if (value !== this._viewType) {\n                    if (value !== 'form')\n                        this.dataSource.recordId = null;\n                    this.dataSource.destroyChildren();\n                    this._viewType = value;\n                }\n                return;\n            }\n            searchText(q) {\n                return this.location.search('q', q);\n            }\n            _prepareParams(params) {\n                let r = {};\n                for (let p of Array.from(params)) {\n                    if (p.field && (p.field.type === 'ForeignKey')) {\n                        r[p.field.name] = p.id;\n                    }\n                    else {\n                        r[p.id.name + '__icontains'] = p.text;\n                    }\n                }\n                return r;\n            }\n            setSearchParams(params) {\n                let p = {};\n                if (this.info.domain)\n                    p = $.parseJSON(this.info.domain);\n                for (let [k, v] of Object.entries(p)) {\n                    let arg = {};\n                    arg[k] = v;\n                    params.push(arg);\n                }\n                console.log('search params', params);\n                return this.dataSource.search(params);\n            }\n            applyGroups(groups, params) {\n                return this.dataSource.groupBy(groups, params);\n            }\n            groupHeaderClick(record, index) {\n                console.log('group header click', record);\n                record.$expanded = !record.$expanded;\n                if (record.$expanded) {\n                    this.dataSource.expandGroup(index, record);\n                }\n                else {\n                    this.dataSource.collapseGroup(index, record);\n                }\n            }\n            async loadGroupRecords(group) {\n                if (group.count > 0) {\n                    let res = await this.dataSource.model.search({ params: group.$params });\n                    group.records = res.data;\n                    console.log(group);\n                    this.scope.$apply();\n                }\n            }\n            doViewAction(viewAction, target, confirmation, prompt) {\n                return this._doViewAction(this.scope, viewAction, target, confirmation, prompt);\n            }\n            _doViewAction(scope, viewAction, target, confirmation, prompt) {\n                let promptValue = null;\n                if (prompt) {\n                    promptValue = window.prompt(prompt);\n                }\n                if (!confirmation || (confirmation && confirm(confirmation))) {\n                    return this.model.doViewAction({ action_name: viewAction, target, prompt: promptValue })\n                        .then(function (res) {\n                        let msg, result;\n                        if (res.status === 'open') {\n                            return window.open(res.open);\n                        }\n                    });\n                }\n            }\n            async formButtonClick(id, meth, self) {\n                const res = await this.scope.model.rpc(meth, [id]);\n                if (res.open)\n                    return window.open(res.open);\n                if (res.download) {\n                    let a = document.createElement('a');\n                    a.href = res.download;\n                    a.click();\n                    return;\n                }\n                if (res.tag === 'refresh')\n                    this.dataSource.refresh();\n                if (res.type) {\n                    const act = new (Katrid.Actions.registry[res.type])(res, this.scope, this.scope.location);\n                    act.execute();\n                }\n            }\n            ;\n            doBindingAction(evt) {\n                this.selection;\n                Katrid.Services.Actions.load($(evt.currentTarget).data('id'))\n                    .then((action) => {\n                    if (action.action_type === 'ir.action.report')\n                        Katrid.Actions.ReportAction.dispatchBindingAction(this, action);\n                });\n            }\n            listRowClick(index, row, evt) {\n                if (row.$hasChildren) {\n                    this.groupHeaderClick(row, index);\n                }\n                else {\n                    let search = {\n                        id: row.id,\n                        action: this.info.id,\n                        view_type: 'form',\n                        menu_id: Katrid.app.$location.$$search.menu_id,\n                    };\n                    if (evt.ctrlKey) {\n                        return;\n                    }\n                    else\n                        Katrid.app.$location.search(search);\n                    this.dataSource.recordIndex = index;\n                }\n            }\n            onDataStateChange(event, dataSource) {\n                let self = dataSource.scope.action;\n                if (dataSource.changing)\n                    setTimeout(() => {\n                        if (self.$element)\n                            for (let el of Array.from(self.$element.find(\"input[type!=hidden].form-field:visible\"))) {\n                                el = $(el);\n                                if (!el.attr('readonly')) {\n                                    $(el).focus();\n                                    return;\n                                }\n                            }\n                    });\n            }\n            autoReport() {\n                return this.model.autoReport()\n                    .then(function (res) {\n                    if (res.ok && res.result.open) {\n                        return window.open(res.result.open);\n                    }\n                });\n            }\n            showDefaultValueDialog() {\n            }\n            selectToggle(el) {\n                this._selection = $(el).closest('table').find('td.list-record-selector :checkbox').filter(':checked');\n                this.selectionLength = this._selection.length;\n            }\n            get selection() {\n                if (this.viewType === 'form') {\n                    if (this.scope.recordId)\n                        return [this.scope.recordId];\n                    else\n                        return;\n                }\n                if (this._selection)\n                    return Array.from(this._selection).map((el) => ($(el).data('id')));\n            }\n            set attachments(value) {\n                this.scope.$apply(() => this.scope.attachments = value);\n            }\n            deleteAttachment(attachments, index) {\n                let att = attachments[index];\n                if (confirm(Katrid.i18n.gettext('Confirm delete attachment?'))) {\n                    attachments.splice(index, 1);\n                    Katrid.Services.Attachments.destroy(att.id);\n                }\n            }\n        }\n        WindowAction.actionType = 'ir.action.window';\n        Actions.WindowAction = WindowAction;\n        Katrid.Actions.registry[WindowAction.actionType] = WindowAction;\n    })(Actions = Katrid.Actions || (Katrid.Actions = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    const _isMobile = function isMobile() {\n        var check = false;\n        (function (a) {\n            if (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0, 4)))\n                check = true;\n        })(navigator.userAgent || navigator.vendor);\n        return check;\n    }();\n    Katrid.settings = {\n        additionalModules: [],\n        server: '',\n        ui: {\n            isMobile: _isMobile,\n            dateInputMask: true,\n            defaultView: 'list',\n            goToDefaultViewAfterCancelInsert: true,\n            goToDefaultViewAfterCancelEdit: false,\n            horizontalForms: true\n        },\n        services: {\n            choicesPageLimit: 10\n        },\n        speech: {\n            enabled: false\n        }\n    };\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        class Loader {\n            constructor(templateCache) {\n                this.$cache = templateCache;\n            }\n            getSource(name) {\n                return {\n                    src: this.$cache.get(name),\n                    path: name,\n                    noCache: false,\n                };\n            }\n        }\n        Forms.Loader = Loader;\n        class Templates {\n            constructor(app, templates) {\n                this.app = app;\n                Templates.env = new nunjucks.Environment(new Loader(app.$templateCache), { autoescape: false });\n                let oldGet = app.$templateCache.get;\n                app.$templateCache.get = (name) => {\n                    return this.prepare(name, oldGet.call(this, name));\n                };\n                this.loadTemplates(app.$templateCache, templates);\n                for (let [k, v] of Object.entries(Templates.PRE_LOADED_TEMPLATES))\n                    app.$templateCache.put(k, v);\n            }\n            prepare(name, templ) {\n                if (_.isUndefined(templ))\n                    throw Error('Template not found: ' + name);\n                if (templ.tagName === 'SCRIPT')\n                    return templ.innerHTML;\n                return templ;\n            }\n            compileTemplate(base, templ) {\n                let el = $(base);\n                templ = $(templ.innerHTML);\n                for (let child of Array.from(templ))\n                    if (child.tagName === 'JQUERY') {\n                        let $child = $(child);\n                        let sel = $child.attr('selector');\n                        let op = $child.attr('operation');\n                        if (sel)\n                            sel = el.find(sel);\n                        else\n                            sel = el;\n                        sel[op]($child[0].innerHTML);\n                    }\n                return el[0].innerHTML;\n            }\n            loadTemplates(templateCache, res) {\n                let templateLst = {};\n                let readTemplates = (el) => {\n                    if (el.tagName === 'TEMPLATES')\n                        Array.from(el.children).map(readTemplates);\n                    else if (el.tagName === 'SCRIPT') {\n                        templateLst[el.id] = el.innerHTML;\n                    }\n                };\n                let preProcess = (el) => {\n                    if (el.tagName === 'TEMPLATES')\n                        Array.from(el.children).map(preProcess);\n                    else if (el.tagName === 'SCRIPT') {\n                        let base = el.getAttribute('extends');\n                        let id = el.getAttribute('id') || base;\n                        if (base) {\n                            el = templateLst[base] + el;\n                        }\n                        else\n                            id = el.id;\n                        templateCache.put(id, el);\n                    }\n                };\n                let parser = new DOMParser();\n                let doc = parser.parseFromString(res, 'text/html');\n                let root = doc.firstChild.childNodes[1].firstChild;\n                readTemplates(root);\n                preProcess(root);\n            }\n        }\n        Templates.PRE_LOADED_TEMPLATES = {};\n        Forms.Templates = Templates;\n        function registerTemplate(name, tmpl) {\n            Templates.PRE_LOADED_TEMPLATES[name] = tmpl;\n        }\n        Forms.registerTemplate = registerTemplate;\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Core;\n    (function (Core) {\n        class Menu {\n            constructor(app) {\n                this.app = app;\n                $('.menu-item-action')\n                    .on('click', (event) => {\n                    event.preventDefault();\n                    let target = event.target;\n                    this.actionClick(target.getAttribute('href'));\n                    target.closest('.dropdown-menu').style.display = 'none';\n                });\n                $('li.nav-item.dropdown').on('mouseenter', function () {\n                    this.querySelectorAll('.dropdown-menu').forEach((el) => el.removeAttribute('style'));\n                });\n            }\n            actionClick(hash) {\n                this.app.loadPage(hash, true);\n            }\n        }\n        Core.Menu = Menu;\n        class WebApplication {\n            constructor(opts) {\n                Katrid.app = this;\n                for (let entry of Object.entries(Katrid.customElementsRegistry))\n                    customElements.define(entry[0], entry[1]);\n                this.menu = new Menu(this);\n                this.actionManager = new Katrid.Actions.ActionManager();\n                this.title = opts.title;\n                this.plugins = [\n                    'ui.katrid',\n                    'ngSanitize',\n                ];\n                let self = this;\n                $(Katrid).on('app.ready', () => {\n                    let loadingTimeout, overlayTimeout;\n                    let loadingMsg = $('#loading-msg').hide();\n                    let overlay = $('#overlay').hide();\n                    $(Katrid).on('fetch.before', () => {\n                        loadingTimeout = setTimeout(() => loadingMsg.show(), 400);\n                        overlayTimeout = setTimeout(() => {\n                            loadingMsg.hide();\n                            overlay.show();\n                        }, 2500);\n                    })\n                        .on('fetch.always', () => {\n                        clearTimeout(loadingTimeout);\n                        clearTimeout(overlayTimeout);\n                        loadingMsg.hide();\n                        overlay.hide();\n                    });\n                    $(document).ajaxStart(function () {\n                        loadingTimeout = setTimeout(() => loadingMsg.show(), 400);\n                        overlayTimeout = setTimeout(() => {\n                            loadingMsg.hide();\n                            overlay.show();\n                        }, 2500);\n                    })\n                        .ajaxStop(function () {\n                        clearTimeout(loadingTimeout);\n                        clearTimeout(overlayTimeout);\n                        loadingMsg.hide();\n                        overlay.hide();\n                    });\n                    $('a.module-selector')\n                        .on('click', function (event) {\n                        event.preventDefault();\n                        let item = $(this);\n                        let params = {};\n                        params.menu_id = item.data('menu-id');\n                        Katrid.app.actionManager.clear();\n                        self.loadPage(item.attr('href'));\n                    })\n                        .each(function (idx, el) {\n                        let $el = $(el);\n                        let params = {};\n                        params.menu_id = $el.data('menu-id');\n                        params.action = $(`.menu-item-action[data-parent-id=\"${params.menu_id}\"]:first`).data('action-id');\n                        $el.attr('href', '#/app/?' + $.param(params));\n                    });\n                    if (location.hash === '')\n                        $('a.module-selector:first').trigger('click');\n                    else\n                        this.loadPage(location.hash);\n                });\n                window.addEventListener('hashchange', (event) => {\n                    this.loadPage(location.hash);\n                });\n                fetch(opts.templates || '/web/js/templates/')\n                    .then((res) => res.text())\n                    .then((templates) => {\n                    if (templates)\n                        templates = '<templates>' + templates + '</templates>';\n                    this.ngApp = angular.module('katridApp', this.plugins)\n                        .run(['$templateCache', ($templateCache) => {\n                            this.$templateCache = $templateCache;\n                            Katrid.Forms.templates = new Katrid.Forms.Templates(this, templates);\n                        }])\n                        .config(['$locationProvider', '$interpolateProvider', function ($locationProvider, $interpolateProvider) {\n                            $locationProvider.hashPrefix('');\n                            $interpolateProvider.startSymbol('${');\n                            $interpolateProvider.endSymbol('}');\n                        }]);\n                    this.ngApp.controller('AppController', ['$scope', '$compile', '$location', function ($scope, $compile, $location) {\n                            Katrid.Core.$compile = $compile;\n                            Katrid.app.$scope = $scope;\n                            Katrid.app.$location = $location;\n                            $scope._ = _;\n                            Katrid.app.$element = $('#katrid-action-view');\n                            $(Katrid).trigger('app.ready', [Katrid.app]);\n                        }]);\n                    this.ngApp.controller('ActionController', ['$scope', function ($scope) {\n                        }]);\n                    Katrid.Core.plugins.init(this);\n                    $(this).trigger('loaded', [Katrid.app]);\n                });\n            }\n            static bootstrap(opts) {\n                let app = new WebApplication(opts);\n                $(app).on('loaded', function () {\n                    angular.element(function () {\n                        angular.bootstrap(document, ['katridApp']);\n                    });\n                });\n                return app;\n            }\n            async loadPage(hash, reset) {\n                let evt = $.Event('hashchange');\n                $(this).trigger(evt, [hash, reset]);\n                if (!evt.isPropagationStopped()) {\n                    this.$scope.currentMenu = '';\n                    if (hash.startsWith('#/app/?'))\n                        hash = hash.split('#/app/?')[1];\n                    let _hash = new URLSearchParams(hash);\n                    let params = {};\n                    for (let [k, v] of _hash.entries())\n                        params[k] = v;\n                    if (params.menu_id)\n                        $('a.module-selector');\n                    if (!this.$scope.$parent.currentMenu || (params.menu_id && (this.$scope.$parent.currentMenu.id != params.menu_id))) {\n                        this.$scope.$parent.currentMenu = {\n                            id: params.menu_id,\n                            name: $(`.module-selector[data-menu-id=\"${params.menu_id}\"]`).text()\n                        };\n                    }\n                    if (('action' in params) || ('model' in params))\n                        await this.actionManager.onHashChange(params, reset);\n                }\n            }\n            setContent(html, scope) {\n                this.$element.empty();\n                html = Katrid.Core.$compile(html)(scope || this.$scope);\n                this.$element.append(html);\n            }\n            getTemplate(tpl, context) {\n                let text = this.$templateCache.get(tpl);\n                if (tpl.endsWith('jinja2')) {\n                    let ctx = {\n                        _,\n                        window,\n                    };\n                    if (context)\n                        Object.assign(ctx, context);\n                    return Katrid.Forms.Templates.env.render(tpl, ctx);\n                }\n                else if (tpl.endsWith('pug')) {\n                    text = text(context);\n                }\n                return text;\n            }\n            get context() {\n                return this.actionManager.context;\n            }\n        }\n        Core.WebApplication = WebApplication;\n        angular.module('basicApp', [])\n            .controller('LoginController', ['$scope', function ($scope) {\n                $scope.login = async (username, password, multidb, db) => {\n                    let next = new URLSearchParams(window.location.search).get('next');\n                    let res;\n                    if (multidb)\n                        res = await Katrid.Services.post('/web/db/', { db });\n                    if ((multidb && res.redirect) || !multidb) {\n                        res = await Katrid.Services.post('/web/login/', { username, password, next });\n                        if (res.error) {\n                            $scope.messages = [{ type: 'danger', message: res.message }];\n                            $scope.$apply();\n                        }\n                        else {\n                            $scope.messages = [{ type: 'success', message: res.message }];\n                            $scope.$apply();\n                            setTimeout(() => window.location.href = res.redirect);\n                        }\n                    }\n                };\n            }]);\n    })(Core = Katrid.Core || (Katrid.Core = {}));\n})(Katrid || (Katrid = {}));\n(function (Katrid) {\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Core;\n    (function (Core) {\n        _.emptyText = '--';\n        class LocalSettings {\n            constructor() {\n            }\n            static init() {\n                Katrid.localSettings = new LocalSettings();\n            }\n            get searchMenuVisible() {\n                return parseInt(localStorage.searchMenuVisible) === 1;\n            }\n            set searchMenuVisible(value) {\n                localStorage.searchMenuVisible = value ? 1 : 0;\n            }\n        }\n        Core.LocalSettings = LocalSettings;\n        Core.plugins = {\n            callbacks: [],\n            init(app) {\n                for (let cb of this.callbacks)\n                    cb(app);\n            },\n            register(callback) {\n                this.callbacks.push(callback);\n            }\n        };\n        function setContent(content, scope) {\n        }\n        Core.setContent = setContent;\n    })(Core = Katrid.Core || (Katrid.Core = {}));\n})(Katrid || (Katrid = {}));\n(function (Katrid) {\n    Katrid.customElementsRegistry = {};\n    function define(name, constructor) {\n        Katrid.customElementsRegistry[name] = constructor;\n    }\n    Katrid.define = define;\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Data;\n    (function (Data) {\n        class Connection {\n            constructor(name) {\n                Katrid.Data.connections[name] = this;\n                if (!Katrid.Data.connection)\n                    Katrid.Data.connection = this;\n            }\n        }\n        class Adapter {\n        }\n        class MemoryAdaper extends Adapter {\n        }\n        Data.connections = {};\n        Data.connection = null;\n        Data.defaultConnection = 'default';\n    })(Data = Katrid.Data || (Katrid.Data = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Data;\n    (function (Data) {\n        let DataSourceState;\n        (function (DataSourceState) {\n            DataSourceState[DataSourceState[\"inserting\"] = 0] = \"inserting\";\n            DataSourceState[DataSourceState[\"browsing\"] = 1] = \"browsing\";\n            DataSourceState[DataSourceState[\"editing\"] = 2] = \"editing\";\n            DataSourceState[DataSourceState[\"loading\"] = 3] = \"loading\";\n            DataSourceState[DataSourceState[\"inactive\"] = 4] = \"inactive\";\n        })(DataSourceState = Data.DataSourceState || (Data.DataSourceState = {}));\n        let DEFAULT_REQUEST_INTERVAL = 300;\n        class DataSource {\n            constructor(config) {\n                this.$modifiedRecords = [];\n                this.refreshInterval = 1000;\n                this.readonly = false;\n                this.$modifiedRecords = [];\n                this.scope = config.scope;\n                this.action = config.action;\n                this._model = config.model;\n                this.field = config.field;\n                this._recordIndex = 0;\n                this.recordCount = null;\n                this.loading = false;\n                this.loadingRecord = false;\n                this._masterSource = null;\n                this.masterSource = config.master;\n                this._pageIndex = 0;\n                this.pageLimit = 100;\n                this.offset = 0;\n                this.offsetLimit = 0;\n                this.requestInterval = DEFAULT_REQUEST_INTERVAL;\n                this.pendingOperation = null;\n                this.pendingRequest = false;\n                this.fieldName = null;\n                this.children = [];\n                this.modifiedData = null;\n                this.uploading = 0;\n                this._state = null;\n                this.fieldWatchers = [];\n                this._pendingChanges = false;\n                this.recordId = null;\n                this.scope.$fieldLog = {};\n                this._records = [];\n            }\n            get pageIndex() {\n                return this._pageIndex;\n            }\n            set pageIndex(page) {\n                this._pageIndex = page;\n                console.log('goto page', page);\n                this.search(this._params, page, this._fields, DEFAULT_REQUEST_INTERVAL);\n            }\n            get fields() {\n                return this.scope.view.fields;\n            }\n            get loadingAction() {\n                return this._loadingAction;\n            }\n            set loadingAction(v) {\n                if (v)\n                    this.requestInterval = 0;\n                else\n                    this.requestInterval = DEFAULT_REQUEST_INTERVAL;\n                this._loadingAction = v;\n            }\n            async cancel() {\n                if (!this.changing)\n                    return;\n                this._recordIndex = null;\n                this._pendingChanges = false;\n                if (this.state === DataSourceState.editing)\n                    await this.refresh();\n                else if (this.action)\n                    this.action.switchView('list');\n                this.state = DataSourceState.browsing;\n                this.scope.$emit('afterCancel', this);\n            }\n            async copy(id) {\n                let res = await this.model.copy(id);\n                this.record = {};\n                await this.insert();\n                this.setValues(res);\n                return res;\n            }\n            findById(id) {\n                for (let rec of this._records)\n                    if (rec.id === id)\n                        return rec;\n                return null;\n            }\n            $removeById(id) {\n                let i = 0;\n                for (let rec of this._records) {\n                    if (rec.id === id) {\n                        this._records.splice(i, 1);\n                        return rec;\n                    }\n                    i++;\n                }\n                return null;\n            }\n            hasKey(id) {\n                return this.findById(id) !== null;\n            }\n            refresh(data) {\n                let r;\n                if (data === true)\n                    r = this.search(this._params, this._page);\n                else if (data) {\n                    r = this.get(data[0]);\n                }\n                else if (this.record && this.record.id) {\n                    r = this.get(this.record.id);\n                }\n                r.then(() => {\n                });\n                return r;\n            }\n            _validateForm(elForm, form, errorMsgs) {\n                let elfield;\n                for (let errorType in form.$error)\n                    if (errorType === 'required')\n                        for (let child of Array.from(form.$error[errorType])) {\n                            if (child.$name.startsWith('grid-row-form'))\n                                elfield = this._validateForm(elForm.find('#' + child.$name), child, errorMsgs);\n                            else {\n                                elfield = elForm.find(`.form-field[name=\"${child.$name}\"]`);\n                                elfield.addClass('ng-touched');\n                                let scope = angular.element(elForm).scope();\n                                const field = scope.view.fields[child.$name];\n                                errorMsgs.push(`<span>${field.caption}</span><ul><li>${Katrid.i18n.gettext('This field cannot be empty.')}</li></ul>`);\n                            }\n                        }\n                    else\n                        console.log(form.$error[errorType]);\n                return elfield;\n            }\n            validate(raiseError = true) {\n                if (this.action.form.$invalid) {\n                    let elfield;\n                    let errors = [];\n                    let s = `<span>${Katrid.i18n.gettext('The following fields are invalid:')}</span><hr>`;\n                    const el = this.scope.formElement;\n                    elfield = this._validateForm(el, this.scope.form, errors);\n                    Katrid.UI.uiKatrid.setFocus(elfield);\n                    s += errors.join('');\n                    Katrid.Forms.Dialogs.Alerts.error(s);\n                    if (raiseError)\n                        throw Error('Error validating form: ' + s);\n                    return false;\n                }\n                return true;\n            }\n            indexOf(obj) {\n                if (this._records)\n                    return this._records.indexOf(this.findById(obj.id));\n            }\n            search(params, page, fields, timeout) {\n                let master = this.masterSource;\n                this._params = params;\n                this._page = page;\n                this._fields = fields;\n                this._clearTimeout();\n                this.pendingRequest = true;\n                this.loading = true;\n                page = page || 1;\n                this._pageIndex = page;\n                let domain;\n                if (this.action && this.action.info)\n                    domain = this.action.info.domain;\n                if (domain) {\n                    domain = JSON.parse(domain);\n                }\n                if (_.isObject(fields))\n                    fields = Object.keys(fields);\n                params = {\n                    count: true,\n                    page,\n                    where: params,\n                    fields,\n                    domain,\n                    limit: this.pageLimit,\n                };\n                return new Promise((resolve, reject) => {\n                    let req = () => {\n                        this.model.search(params)\n                            .catch((res) => {\n                            return reject(res);\n                        })\n                            .then((res) => {\n                            if (this.pageIndex > 1) {\n                                this.offset = ((this.pageIndex - 1) * this.pageLimit) + 1;\n                            }\n                            else {\n                                this.offset = 1;\n                            }\n                            this.scope.$apply(() => {\n                                if (res.count != null)\n                                    this.recordCount = res.count;\n                                let data = res.data;\n                                this.rawData = data;\n                                if (this.readonly)\n                                    this._records = data;\n                                else\n                                    this._records = data.map((obj) => Katrid.Data.createRecord(obj, this));\n                                this.scope.records = this._records;\n                                if (this.pageIndex === 1) {\n                                    return this.offsetLimit = this._records.length;\n                                }\n                                else {\n                                    return this.offsetLimit = (this.offset + this._records.length) - 1;\n                                }\n                            });\n                            return resolve(res);\n                        })\n                            .finally(() => {\n                            this.pendingRequest = false;\n                            this.scope.$apply(() => {\n                                this.loading = false;\n                            });\n                        });\n                    };\n                    timeout = 0;\n                    if (((this.requestInterval > 0) || timeout) && (timeout !== false))\n                        this.pendingOperation = setTimeout(req, this.requestInterval);\n                    else\n                        req();\n                });\n            }\n            async groupBy(group, params) {\n                this._params = [];\n                console.log('group by', group, params);\n                if (!group || !group.length) {\n                    this.groups = [];\n                    this.action.groups = null;\n                    this.scope.groups = null;\n                    this.search(params);\n                    return;\n                }\n                this.scope.action.groups = group;\n                this.scope.groupings = [];\n                this.groups = group;\n                this.scope.groups = await this._loadGroup(group, 0, params);\n                return this.scope.$apply();\n            }\n            async _loadGroup(group, index, params, parent) {\n                let rows = [];\n                if (!params)\n                    params = [];\n                if (parent && parent.$params)\n                    params = params.concat(parent.$params);\n                let res = await this.model.groupBy([group[index]], params);\n                const groupName = group[index];\n                for (let r of res) {\n                    let s = r[groupName];\n                    let paramValue;\n                    if ($.isArray(s)) {\n                        paramValue = s[0];\n                        s = s[1];\n                    }\n                    else {\n                        paramValue = s;\n                    }\n                    r.__str__ = s;\n                    r.$expanded = false;\n                    r.$group = groupName;\n                    r.$params = [];\n                    if (parent)\n                        r.$params = r.$params.concat(parent.$params);\n                    let params = {};\n                    params[groupName] = paramValue;\n                    r.$params.push(params);\n                    r.$level = index;\n                    r.$hasChildren = true;\n                    rows.push(r);\n                }\n                return rows;\n            }\n            goto(index) {\n                return this.recordIndex = index;\n            }\n            moveBy(index) {\n                const newIndex = (this._recordIndex + index);\n                if ((newIndex > -1) && (newIndex < this._records.length))\n                    this.recordIndex = newIndex;\n            }\n            _clearTimeout() {\n                this.loading = false;\n                this.loadingRecord = false;\n                this._canceled = true;\n                this.pendingRequest = false;\n                clearTimeout(this.pendingOperation);\n            }\n            set masterSource(master) {\n                this._masterSource = master;\n                if (master)\n                    master.children.push(this);\n            }\n            get masterSource() {\n                return this._masterSource;\n            }\n            applyModifiedData(form, element, record) {\n                const data = this.getModifiedData(form, element, record);\n                const _id = _.hash(record);\n                if (data) {\n                    let ds = this.modifiedData;\n                    if ((ds == null)) {\n                        ds = {};\n                    }\n                    let obj = ds[_id];\n                    if (!obj) {\n                        obj = {};\n                        ds[_id] = obj;\n                    }\n                    for (let attr in data) {\n                        let v = data[attr];\n                        obj[attr] = v;\n                    }\n                    this.modifiedData = ds;\n                    this.masterSource.scope.form.$setDirty();\n                }\n                return data;\n            }\n            getNestedData() {\n                let ret = {};\n                for (let child of this.children)\n                    if (child.$modifiedRecords.length) {\n                        let res = [];\n                        let deleted = [];\n                        for (let rec of child.$modifiedRecords) {\n                            if (rec.$deleted) {\n                                deleted.push(rec);\n                                if ((rec.id !== null) && (rec.id !== undefined))\n                                    res.push({ id: rec.id, action: 'DESTROY' });\n                            }\n                        }\n                        for (let rec of child.$modifiedRecords) {\n                            console.log(rec.$modified, rec.$modifiedData);\n                            if (rec.$modifiedData && !rec.$deleted && rec.$modified && (deleted.indexOf(rec) === -1)) {\n                                let data = this._getModified(rec.$modifiedData);\n                                if (rec.id)\n                                    data['id'] = rec.id;\n                                jQuery.extend(data, child.getNestedData());\n                                if ((rec.id === null) || (rec.id === undefined))\n                                    res.push({\n                                        action: 'CREATE',\n                                        values: data,\n                                    });\n                                else if ((rec.id !== null) && (rec.id !== undefined))\n                                    res.push({\n                                        action: 'UPDATE',\n                                        values: data,\n                                    });\n                            }\n                        }\n                        if (Object.keys(res).length > 0)\n                            ret[child.fieldName] = res;\n                    }\n                return ret;\n            }\n            save(autoRefresh = true) {\n                for (let child of this.children)\n                    if (child.changing)\n                        child.flush();\n                const el = this.action.$form;\n                if (this.validate()) {\n                    const data = this.record.$record.serialize();\n                    console.log(data);\n                    let beforeSubmit = el.attr('before-submit');\n                    if (beforeSubmit)\n                        beforeSubmit = this.scope.$eval(beforeSubmit);\n                    if (data) {\n                        this.uploading++;\n                        return this.model.write([data])\n                            .then((res) => {\n                            if (this.action && this.action.viewType && (this.action.viewType === 'form'))\n                                Katrid.app.$location.search('id', res[0]);\n                            this.action.form.$setPristine();\n                            this.action.form.$setUntouched();\n                            this._pendingChanges = false;\n                            this.state = DataSourceState.browsing;\n                            if (autoRefresh)\n                                return this.refresh(res);\n                            else\n                                return res;\n                        })\n                            .catch((error) => {\n                            let s = `<span>${Katrid.i18n.gettext('The following fields are invalid:')}<hr></span>`;\n                            if (error.message)\n                                s = error.message;\n                            else if (error.messages) {\n                                let elfield;\n                                for (let fld of Object.keys(error.messages)) {\n                                    const msgs = error.messages[fld];\n                                    let field;\n                                    if (fld.indexOf('.') > -1) {\n                                        let sfld = fld.split('.');\n                                        let subField = sfld[1];\n                                        for (let child of this.children)\n                                            if (child.scope.fieldName === sfld[0]) {\n                                                field = child.scope.view.fields[subField];\n                                            }\n                                    }\n                                    else\n                                        field = this.scope.view.fields[fld];\n                                    console.log('field invalid', field);\n                                    if (!field || !field.name)\n                                        continue;\n                                    elfield = el.find(`.form-field[name=\"${field.name}\"]`);\n                                    elfield.addClass('ng-invalid ng-touched');\n                                    s += `<strong>${field.caption}</strong><ul>`;\n                                    for (let msg of msgs) {\n                                        s += `<li>${msg}</li>`;\n                                    }\n                                    s += '</ul>';\n                                }\n                                if (elfield)\n                                    elfield.focus();\n                            }\n                            Katrid.Forms.Dialogs.Alerts.error(s);\n                            throw new Error(s);\n                        })\n                            .finally(() => this.scope.$apply(() => this.uploading--));\n                    }\n                    else\n                        Katrid.Forms.Dialogs.Alerts.warn(Katrid.i18n.gettext('No pending changes'));\n                }\n            }\n            async delete(sel) {\n                await this.model.destroy(sel);\n            }\n            _getNested(recs) {\n                let res = [];\n                if (recs.$deleted && recs.$deleted.recs.length)\n                    for (let rec of recs.$deleted.recs)\n                        res.push({ id: rec.id, action: 'DESTROY' });\n                let vals;\n                if (recs.recs.length)\n                    for (let rec of recs.recs)\n                        if (rec) {\n                            vals = {};\n                            if (rec.$created)\n                                vals = {\n                                    action: 'CREATE',\n                                    values: this._getModified(rec.$modifiedData)\n                                };\n                            else if (rec.$modified) {\n                                vals = {\n                                    action: 'UPDATE',\n                                    values: this._getModified(rec.$modifiedData)\n                                };\n                                vals.values.id = rec.id;\n                            }\n                            else\n                                continue;\n                            res.push(vals);\n                        }\n                return res;\n            }\n            _getModified(data) {\n                let res = {};\n                if (data)\n                    for (let [k, v] of Object.entries(data))\n                        if (v instanceof Katrid.Data.SubRecords) {\n                            res[k] = this._getNested(v);\n                        }\n                        else\n                            res[k] = v;\n                return res;\n            }\n            getModifiedData(form, element, record) {\n                let data = {};\n                if (record.$modified)\n                    jQuery.extend(data, this._getModified(record.$modifiedData));\n                if (this.record.id)\n                    data['id'] = record.id;\n                return data;\n            }\n            get(id, timeout, apply = true, index = false) {\n                this._clearTimeout();\n                this.state = DataSourceState.loading;\n                this.loadingRecord = true;\n                this._canceled = false;\n                return new Promise((resolve, reject) => {\n                    const _get = () => {\n                        return this.model.getById(id)\n                            .catch((res) => {\n                            return reject(res);\n                        })\n                            .then((res) => {\n                            if (this._canceled || !res)\n                                return;\n                            if (this.state === DataSourceState.loading)\n                                this.state = DataSourceState.browsing;\n                            else if (this.state === DataSourceState.inserting)\n                                return;\n                            this.record = res.data[0];\n                            if (index !== false)\n                                this._records[index] = this.record;\n                            return resolve(this.record);\n                        })\n                            .finally(() => {\n                            this.loadingRecord = false;\n                            if (apply)\n                                return this.scope.$apply();\n                        });\n                    };\n                    if (!timeout && !this.requestInterval)\n                        return _get();\n                    else\n                        this.pendingOperation = setTimeout(_get, timeout || this.requestInterval);\n                });\n            }\n            get defaultValues() {\n                return;\n            }\n            set defaultValues(values) {\n                for (let [k, v] of Object.entries(values)) {\n                    if (_.isObject(v) && (k in this.fields)) {\n                        this.fields[k].defaultValue = v;\n                    }\n                }\n            }\n            async insert(loadDefaults = true, defaultValues, kwargs) {\n                this._clearTimeout();\n                for (let child of this.children)\n                    child._clearTimeout();\n                let rec = Data.createRecord(null, this);\n                let oldRecs = this._records;\n                this.record = rec;\n                this._records = oldRecs;\n                let res;\n                for (let child of this.children)\n                    child._records = [];\n                if (loadDefaults)\n                    res = await this.model.getDefaults(kwargs);\n                const urlParams = new URLSearchParams();\n                console.log(urlParams);\n                this.state = DataSourceState.inserting;\n                this.scope.record.record_name = Katrid.i18n.gettext('(New)');\n                let defaults = {};\n                if (this.masterSource && this.field && this.field.defaultValue)\n                    Object.assign(defaults, this.field.defaultValue);\n                for (let v of Object.values(this.fields))\n                    if (v.defaultValue)\n                        defaults[v.name] = v.defaultValue;\n                if (this.scope.ngDefaultValues)\n                    Object.assign(defaults, this.scope.$eval(this.scope.ngDefaultValues));\n                if (this.action.context && this.action.context.default_values)\n                    Object.assign(defaults, this.action.context.default_values);\n                if (defaultValues)\n                    Object.assign(defaults, defaultValues);\n                if (res)\n                    Object.assign(defaults, res);\n                for (let [k, v] of Object.entries(defaults))\n                    if (_.isFunction(v)) {\n                        v = v(defaults, this);\n                        if (!_.isUndefined(v))\n                            defaults[k] = v;\n                    }\n                this.setValues(defaults);\n                return this.record;\n            }\n            _new() {\n                return Katrid.Data.createRecord({}, this);\n            }\n            setValues(values) {\n                Object.entries(values).forEach(([k, v]) => {\n                    let fld = this.fields[k];\n                    if (fld)\n                        fld.fromJSON(v, this);\n                    else\n                        this.scope.record[k] = v;\n                });\n                this.scope.$apply();\n            }\n            edit() {\n                this.state = DataSourceState.editing;\n            }\n            toClientValue(attr, value) {\n                const field = this.scope.view.fields[attr];\n                if (field) {\n                    if (field.type === 'DateTimeField') {\n                        value = new Date(value);\n                    }\n                }\n                return value;\n            }\n            fieldByName(fieldName) {\n                if (this.scope.views)\n                    return this.scope.views.form.fields[fieldName];\n                else\n                    return this.scope.view.fields[fieldName];\n            }\n            set state(state) {\n                this._modifiedFields = [];\n                this._state = state;\n                this.inserting = state === DataSourceState.inserting;\n                this.editing = state === DataSourceState.editing;\n                this.loading = state === DataSourceState.loading;\n                this.changing = [DataSourceState.editing, DataSourceState.inserting].includes(this.state);\n            }\n            get browsing() {\n                return this._state === DataSourceState.browsing;\n            }\n            childByName(fieldName) {\n                for (let child of this.children) {\n                    if (child.fieldName === fieldName)\n                        return child;\n                }\n            }\n            get state() {\n                return this._state;\n            }\n            get record() {\n                return this.scope.record;\n            }\n            set recordId(value) {\n                this.scope.recordId = value;\n            }\n            get recordId() {\n                return this.scope.recordId;\n            }\n            set record(rec) {\n                if (!rec.$record)\n                    rec = Katrid.Data.createRecord(rec, this);\n                this.scope.record = rec;\n                this.recordId = rec.id;\n                this._pendingChanges = false;\n                if (this.scope.form)\n                    this.scope.form.$setPristine();\n                if (this.action && this.action.$element)\n                    this.action.$element[0].dispatchEvent(new CustomEvent('recordLoaded', { 'detail': { rec } }));\n                this.childrenNotification(rec);\n            }\n            set records(recs) {\n                this._records = recs;\n            }\n            get records() {\n                return this._records;\n            }\n            next() {\n                return this.moveBy(1);\n            }\n            prior() {\n                return this.moveBy(-1);\n            }\n            nextPage() {\n                let p = this.recordCount / this.pageLimit;\n                if (Math.floor(p)) {\n                    p++;\n                }\n                if (p > (this.pageIndex + 1)) {\n                    this.pageIndex++;\n                }\n            }\n            prevPage() {\n                if (this.pageIndex > 1) {\n                    this.pageIndex--;\n                }\n            }\n            set recordIndex(index) {\n                this._recordIndex = index;\n                this.scope.record = this._records[index];\n                if (!this.parent)\n                    Katrid.app.$location.search('id', this.scope.record.id);\n                this.scope.recordId = null;\n            }\n            get recordIndex() {\n                return this._recordIndex;\n            }\n            async expandGroup(index, row) {\n                let params = [];\n                if (this._params)\n                    params = params.concat(this._params);\n                if (row.$params)\n                    params = params.concat(row.$params);\n                if (row.$level === (this.groups.length - 1)) {\n                    let res = await this.model.search({ params });\n                    if (res.data) {\n                        row.$children = res.data;\n                        this.scope.$apply(() => {\n                            this.scope.groups.splice.apply(this.scope.groups, [index + 1, 0].concat(res.data));\n                        });\n                    }\n                    this._records = this._chain();\n                }\n                else {\n                    let rows = await this._loadGroup(this.groups, row.$level + 1, this._params, row);\n                    row.$children = rows;\n                    this.scope.groups.splice.apply(this.scope.groups, [index + 1, 0].concat(rows));\n                    this.scope.$apply();\n                }\n            }\n            collapseGroup(index, row) {\n                let collapse = (index, row) => {\n                    console.log('collapse', index, row);\n                    if (row.$children && row.$children.length && row.$level !== (this.groups.length - 1))\n                        row.$children.map((obj) => collapse(this.scope.groups.indexOf(obj), obj));\n                    if (row.$children && row.$children.length)\n                        this.scope.groups.splice(index + 1, row.$children.length);\n                    row.$children = [];\n                };\n                collapse(index, row);\n                this._records = this._chain();\n            }\n            _chain() {\n                let records = [];\n                for (let obj of this.scope.groups)\n                    if (obj.$hasChildren && obj.$expanded && obj.$children.length)\n                        records = records.concat(obj.$children);\n                return records;\n            }\n            _applyResponse(res) {\n                if (res) {\n                    if (res.value)\n                        this.setValues(res.value);\n                    this.scope.$apply();\n                }\n            }\n            async dispatchEvent(name, ...args) {\n                let res = await this.model.rpc(name, ...args);\n                this._applyResponse(res);\n            }\n            get model() {\n                return this._model;\n            }\n            open() {\n                console.log('data source open');\n                return this.search({}, 1, this.action.view.fields);\n            }\n            get parent() {\n                return this.masterSource;\n            }\n            set parent(value) {\n                this._masterSource = value;\n            }\n            $setDirty(field) {\n                let form = this.scope.form;\n                if (form) {\n                    let control = form[field];\n                    if (control)\n                        control.$setDirty();\n                }\n                else if (this.action)\n                    this.action.setDirty(field);\n            }\n            destroyChildren() {\n                for (let child of this.children)\n                    child.scope.$destroy();\n                this.children = [];\n            }\n            childrenNotification(record) {\n                for (let child of this.children)\n                    child.parentNotification(record);\n            }\n            async parentNotification(parentRecord) {\n                this.records = [];\n                this._clearTimeout();\n                this.pendingOperation = setTimeout(async () => {\n                    if (parentRecord.id != null) {\n                        let data = {};\n                        data[this.field.info.field] = parentRecord.id;\n                        let res = await this.search(data);\n                        parentRecord[this.field.name] = res.data;\n                        this.state = Katrid.Data.DataSourceState.browsing;\n                    }\n                    else\n                        parentRecord[this.field.name] = [];\n                }, this.refreshInterval);\n            }\n            destroy() {\n                if (this._masterSource)\n                    this._masterSource.children.splice(this._masterSource.children.indexOf(this), 1);\n            }\n            flush(validate) {\n                if (validate)\n                    this.validate();\n                this.record.$record.flush();\n                this.state = DataSourceState.browsing;\n                for (let child of this.children)\n                    child.flush();\n            }\n            discardChanges() {\n                this.record.$record.discard();\n            }\n        }\n        Data.DataSource = DataSource;\n    })(Data = Katrid.Data || (Katrid.Data = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Data;\n    (function (Data) {\n        var Fields;\n        (function (Fields) {\n            function toCamelCase(s) {\n                s = s.replace(/([^a-zA-Z0-9_\\- ])|^[_0-9]+/g, \"\").trim().toLowerCase();\n                s = s.replace(/([ -]+)([a-zA-Z0-9])/g, function (a, b, c) {\n                    return c.toUpperCase();\n                });\n                s = s.replace(/([0-9]+)([a-zA-Z])/g, function (a, b, c) {\n                    return b + c.toUpperCase();\n                });\n                return s;\n            }\n            class Field {\n                constructor(info) {\n                    this.visible = true;\n                    this.info = info;\n                    this.cssClass = info.type;\n                    this.caption = info.caption || info.name;\n                    this.helpText = this.info.help_text;\n                    this.required = this.info.required;\n                    this.onChange = this.info.onchange;\n                    this.nolabel = false;\n                    this.displayChoices = _.object(info.choices);\n                    this.choices = info.choices;\n                    this.create();\n                    this.loadInfo(info);\n                }\n                create() {\n                    this.visible = true;\n                    this.emptyText = '--';\n                    this.cols = 6;\n                    this.readonly = false;\n                    if (this.info.choices)\n                        this.template = {\n                            list: 'view.list.selection-field.jinja2',\n                            card: 'view.list.selection-field.jinja2',\n                            form: 'view.form.selection-field.jinja2',\n                        };\n                    else\n                        this.template = {\n                            list: 'view.list.field.jinja2',\n                            card: 'view.list.field.jinja2',\n                            form: 'view.form.field.jinja2',\n                        };\n                }\n                loadInfo(info) {\n                    if (info.template)\n                        this.template = Object.assign(this.template, info.template);\n                    if ('cols' in info)\n                        this.cols = info.cols;\n                    if ('readonly' in info)\n                        this.readonly = info.readonly;\n                    if ('visible' in info)\n                        this.visible = info.visible;\n                }\n                assign(view, el) {\n                    let newField = new this.constructor(this.info);\n                    newField.view = view;\n                    newField.fieldEl = el;\n                    newField[newField.view.viewType + 'Render'].apply(newField);\n                    return newField;\n                }\n                get fieldEl() {\n                    return this._fieldEl;\n                }\n                set fieldEl(value) {\n                    this._fieldEl = value;\n                    if (value) {\n                        let newInfo = {};\n                        for (let attr of value.attributes)\n                            newInfo[attr.name] = value.nodeValue;\n                        this.loadInfo(newInfo);\n                    }\n                }\n                formRender(context = {}) {\n                    let el = this._fieldEl;\n                    let view = this.view;\n                    let widget = el.getAttribute('widget') || this.widget;\n                    if (widget) {\n                        let r = document.createElement(widget + '-field');\n                        r.bind(this);\n                        this.el = r;\n                        return;\n                    }\n                    let $el = $(el);\n                    let attrs = {};\n                    for (let attr of el.attributes) {\n                        attrs[attr.name] = attr.value;\n                        let camelCase = toCamelCase(attr.name);\n                        if (camelCase !== attr.name)\n                            attrs[camelCase] = attr.value;\n                    }\n                    if (attrs.cols)\n                        this.cols = attrs.cols;\n                    if (attrs.ngReadonly)\n                        this.ngReadonly = attrs.ngReadonly;\n                    if (attrs.domain)\n                        this.domain = attrs.domain;\n                    if (attrs.visible === 'false')\n                        this.visible = false;\n                    else if (attrs.visible === 'true')\n                        this.visible = true;\n                    if (attrs.ngShow)\n                        this.ngShow = attrs.ngShow;\n                    if (attrs.ngIf)\n                        this.ngIf = attrs.ngIf;\n                    if (attrs.ngClass)\n                        this.ngClass = attrs.ngClass;\n                    this.attrs = attrs;\n                    context['field'] = this;\n                    context['attrs'] = attrs;\n                    context['html'] = $el.html();\n                    this.el = $(Katrid.app.getTemplate(this.template[view.viewType], context))[0];\n                }\n                listRender() {\n                    let el = this._fieldEl;\n                    let view = this.view;\n                    let widget = el.getAttribute('widget') || this.widget;\n                    if (widget) {\n                        let r = document.createElement(widget + '-field');\n                        r.bind(this);\n                        this.el = r;\n                        return;\n                    }\n                    let attrs = {};\n                    for (let attr of el.attributes) {\n                        attrs[attr.name] = attr.value;\n                        let camelCase = toCamelCase(attr.name);\n                        if (camelCase !== attr.name)\n                            attrs[camelCase] = attr.value;\n                    }\n                    if (attrs.cols)\n                        this.cols = attrs.cols;\n                    if (attrs.ngReadonly)\n                        this.ngReadonly = attrs.ngReadonly;\n                    if (attrs.domain)\n                        this.domain = attrs.domain;\n                    if (attrs.visible === 'false')\n                        this.visible = false;\n                    else if (attrs.visible === 'true')\n                        this.visible = true;\n                    if (attrs.ngShow)\n                        this.ngShow = attrs.ngShow;\n                    if (attrs.ngIf)\n                        this.ngIf = attrs.ngIf;\n                    if (attrs.ngClass)\n                        this.ngClass = attrs.ngClass;\n                    let context = {\n                        field: this,\n                        html: $(el).html(),\n                        attrs,\n                    };\n                    let html = Katrid.app.getTemplate(this.template[this.view.viewType], context);\n                    let templ = document.createElement('template');\n                    templ.innerHTML = html;\n                    this.el = templ;\n                }\n                cardRender() {\n                    let el = this._fieldEl;\n                    let view = this.view;\n                    let widget = el.getAttribute('widget') || this.widget;\n                    if (widget) {\n                        let r = document.createElement(widget + '-field');\n                        r.bind(this);\n                        this.el = r;\n                        return;\n                    }\n                }\n                render(viewType, el, context) {\n                    let attrs = {};\n                    for (let attr of el.attributes) {\n                        attrs[attr.name] = attr.value;\n                        let camelCase = toCamelCase(attr.name);\n                        if (camelCase !== attr.name)\n                            attrs[camelCase] = attr.value;\n                    }\n                    if (attrs.cols)\n                        this.cols = attrs.cols;\n                    if (attrs.ngReadonly)\n                        this.ngReadonly = attrs.ngReadonly;\n                    if (attrs.domain)\n                        this.domain = attrs.domain;\n                    if (attrs.visible === 'false')\n                        this.visible = false;\n                    else if (attrs.visible === 'true')\n                        this.visible = true;\n                    if (attrs.ngShow)\n                        this.ngShow = attrs.ngShow;\n                    if (attrs.ngIf)\n                        this.ngIf = attrs.ngIf;\n                    if (attrs.ngClass)\n                        this.ngClass = attrs.ngClass;\n                    this.attrs = attrs;\n                    context['field'] = this;\n                    context['attrs'] = attrs;\n                    context['html'] = $(el).html();\n                    return Katrid.app.getTemplate(this.template[viewType], context);\n                }\n                fromJSON(value, dataSource) {\n                    dataSource.record[this.name] = value;\n                }\n                get validAttributes() {\n                    return ['name', 'nolabel', 'readonly', 'required'];\n                }\n                getAttributes(attrs) {\n                    let res = {};\n                    let validAttrs = this.validAttributes;\n                    if (this.ngReadonly)\n                        res['ng-readonly'] = this.ngReadonly;\n                    else if (this.readonly)\n                        res['readonly'] = this.readonly;\n                    res['ng-model'] = 'record.' + this.name;\n                    if (attrs.ngFieldChange) {\n                        res['ng-change'] = attrs.ngFieldChange;\n                    }\n                    if (this.required)\n                        res['required'] = this.required;\n                    return res;\n                }\n                get hasChoices() {\n                    return this.info.choices && this.info.choices.length > 0;\n                }\n                get name() {\n                    return this.info.name;\n                }\n                get model() {\n                    return this.info.model;\n                }\n                get maxLength() {\n                    return this.info.max_length;\n                }\n                get type() {\n                    return this.info.type;\n                }\n                get paramTemplate() {\n                    return 'view.param.String';\n                }\n                format(value) {\n                    return value.toString();\n                }\n                toJSON(val) {\n                    return val;\n                }\n                createWidget(widget, scope, attrs, element) {\n                    if (!widget) {\n                        if (this.hasChoices)\n                            widget = 'SelectionField';\n                    }\n                    let cls = Katrid.Forms.Widgets.registry[widget || this.type] || Katrid.Forms.Widgets.StringField;\n                    return new cls(scope, attrs, this, element);\n                }\n                validate() {\n                }\n                get defaultCondition() {\n                    return '=';\n                }\n                isControlVisible(condition) {\n                    switch (condition) {\n                        case 'is null':\n                            return false;\n                        case 'is not null':\n                            return false;\n                    }\n                    return true;\n                }\n            }\n            Fields.Field = Field;\n            class StringField extends Field {\n                constructor(info) {\n                    if (!info.cols)\n                        info.cols = 3;\n                    super(info);\n                }\n            }\n            class PasswordField extends StringField {\n                constructor(info) {\n                    if (!info.template)\n                        info.template = {};\n                    if (!info.template.form)\n                        info.template.form = 'view.form.password.jinja2';\n                    if (!info.template.list)\n                        info.template.list = 'view.list.password.jinja2';\n                    super(info);\n                }\n            }\n            Fields.PasswordField = PasswordField;\n            class BooleanField extends Field {\n                constructor(info) {\n                    if (!info.cols)\n                        info.cols = 3;\n                    super(info);\n                    this.template.form = 'view.form.boolean-field.jinja2';\n                    this.template.list = 'view.list.boolean-field.jinja2';\n                    this.template.card = 'view.list.boolean-field.jinja2';\n                    this.nolabel = true;\n                }\n                get paramTemplate() {\n                    return 'view.param.Boolean';\n                }\n            }\n            Fields.BooleanField = BooleanField;\n            class DateField extends Field {\n                constructor(info) {\n                    if (!info.cols)\n                        info.cols = 3;\n                    super(info);\n                    this.template.form = 'view.form.date-field.jinja2';\n                    this.template.list = 'view.list.date-field.jinja2';\n                    this.template.card = 'view.list.date-field.jinja2';\n                }\n                toJSON(val) {\n                    return val;\n                }\n                get paramTemplate() {\n                    return 'view.param.Date';\n                }\n                format(value) {\n                    if (_.isString(value))\n                        return moment(value).format(Katrid.i18n.gettext('yyyy-mm-dd').toUpperCase());\n                    return '';\n                }\n                getAttributes(attrs) {\n                    let res = super.getAttributes(attrs);\n                    res['type'] = 'date';\n                    return res;\n                }\n            }\n            class DateTimeField extends DateField {\n                constructor(info) {\n                    if (!info.cols)\n                        info.cols = 3;\n                    super(info);\n                    this.template.form = 'view.form.datetime-field.jinja2';\n                    this.template.list = 'view.list.datetime-field.jinja2';\n                }\n                get paramTemplate() {\n                    return 'view.param.DateTime';\n                }\n                getAttributes(attrs) {\n                    let res = super.getAttributes(attrs);\n                    res['type'] = 'datetime-local';\n                    return res;\n                }\n            }\n            class TimeField extends DateTimeField {\n                constructor(info) {\n                    if (!info.cols)\n                        info.cols = 3;\n                    super(info);\n                    this.template.form = 'view.form.time-field.jinja2';\n                    this.template.list = 'view.list.time-field.jinja2';\n                }\n            }\n            Fields.TimeField = TimeField;\n            class NumericField extends Field {\n                constructor(info) {\n                    if (!info.cols)\n                        info.cols = 3;\n                    super(info);\n                    this.template.form = 'view.form.decimal-field.jinja2';\n                    this.template.list = 'view.list.decimal-field.jinja2';\n                }\n                fromJSON(value, dataSource) {\n                    dataSource.record[this.name] = parseFloat(value);\n                }\n                toJSON(val) {\n                    if (val && _.isString(val))\n                        return parseFloat(val);\n                    return val;\n                }\n            }\n            Fields.NumericField = NumericField;\n            class IntegerField extends Field {\n                constructor(info) {\n                    if (!info.cols)\n                        info.cols = 3;\n                    super(info);\n                    this.template.form = 'view.form.numeric-field.jinja2';\n                    this.template.list = 'view.list.numeric-field.jinja2';\n                }\n                toJSON(val) {\n                    if (val && _.isString(val))\n                        return parseInt(val);\n                    return val;\n                }\n                get paramTemplate() {\n                    return 'view.param.Integer';\n                }\n            }\n            Fields.IntegerField = IntegerField;\n            class FloatField extends NumericField {\n            }\n            Fields.FloatField = FloatField;\n            class DecimalField extends NumericField {\n                constructor(info) {\n                    super(info);\n                    this.decimalPlaces = 2;\n                    if (this.info.attrs) {\n                        this.decimalPlaces = this.info.attrs.decimal_places || 2;\n                    }\n                }\n            }\n            Fields.DecimalField = DecimalField;\n            class ForeignKey extends Field {\n                constructor(info) {\n                    super(info);\n                    this.domain = info.domain;\n                    Object.assign(this.template, {\n                        list: 'view.list.foreignkey.jinja2',\n                        card: 'view.list.foreignkey.jinja2',\n                        form: 'view.form.foreignkey.jinja2',\n                    });\n                    if (Katrid.settings.ui.isMobile)\n                        this.template.form = 'view.form.autocomplete.jinja2';\n                }\n                toJSON(val) {\n                    if (_.isArray(val))\n                        return val[0];\n                    return val;\n                }\n                get validAttributes() {\n                    return super.validAttributes.concat(['domain']);\n                }\n            }\n            Fields.ForeignKey = ForeignKey;\n            class OneToManyField extends Field {\n                create() {\n                    super.create();\n                    this.template.form = 'view.form.grid.jinja2';\n                    this.widget = 'onetomany';\n                    this.cols = 12;\n                }\n                get field() {\n                    return this.info.field;\n                }\n                get validAttributes() {\n                    return super.validAttributes.concat(['inline-editor', 'ng-default-values']);\n                }\n                fromJSON(val, dataSource) {\n                    if (val && val instanceof Array) {\n                        let child = dataSource.childByName(this.name);\n                        val.map((obj) => {\n                            if (obj.action === 'CLEAR') {\n                                child.scope.records = [];\n                                dataSource.record[this.name] = [];\n                            }\n                            else if (obj.action === 'CREATE') {\n                                child.scope.addRecord(obj.values);\n                            }\n                        });\n                        child.scope.$apply();\n                    }\n                }\n            }\n            Fields.OneToManyField = OneToManyField;\n            class ManyToManyField extends ForeignKey {\n                constructor(info) {\n                    super(info);\n                    if (!info.template || (info.template && !info.template.form))\n                        this.template.form = 'view.form.manytomany.jinja2';\n                }\n                toJSON(val) {\n                    if (_.isArray(val))\n                        return val.map((obj) => _.isArray(obj) ? obj[0] : obj);\n                    else if (_.isString(val))\n                        val = val.split(',');\n                    return val;\n                }\n            }\n            Fields.ManyToManyField = ManyToManyField;\n            class TextField extends StringField {\n                constructor(info) {\n                    super(info);\n                    if (!info.template || (info.template && !info.template.form))\n                        this.template.form = 'view.form.text-field.jinja2';\n                }\n            }\n            Fields.TextField = TextField;\n            class XmlField extends TextField {\n                constructor(info) {\n                    super(info);\n                    if (!info.template || (info.template && !info.template.form))\n                        this.template.form = 'view.form.code-editor.jinja2';\n                }\n            }\n            Fields.XmlField = XmlField;\n            class JsonField extends TextField {\n                constructor(info) {\n                    super(info);\n                    if (!info.template || (info.template && !info.template.form))\n                        this.template.form = 'view.form.json-field.jinja2';\n                }\n            }\n            Fields.JsonField = JsonField;\n            class PythonCodeField extends TextField {\n                constructor(info) {\n                    super(info);\n                    if (!info.template || (info.template && !info.template.form))\n                        this.template.form = 'view.form.python-code.jinja2';\n                }\n            }\n            Fields.PythonCodeField = PythonCodeField;\n            class ImageField extends Field {\n                constructor(info) {\n                    if (!info.template)\n                        info.template = {};\n                    if (!info.template.form)\n                        info.template.form = 'view.form.image-field.jinja2';\n                    super(info);\n                    this.noImageUrl = '/static/web/assets/img/no-image.png';\n                }\n                getAttributes(attrs) {\n                    let res = super.getAttributes(attrs);\n                    res.ngSrc = attrs.ngEmptyImage || (attrs.emptyImage && (`'${attrs.emptyImage}`)) || `'${this.noImageUrl}'`;\n                    res.ngSrc = `{{ ${res['ng-model']} || ${res.ngSrc} }}`;\n                    return res;\n                }\n                get ngSrc() {\n                    let ngSrc = this.attrs.ngEmptyImage || (this.attrs.emptyImage && (`'${this.attrs.emptyImage}`)) || `'${this.noImageUrl}'`;\n                    ngSrc = `\\${ record.${this.name} || ${ngSrc} }`;\n                    return ngSrc;\n                }\n            }\n            Fields.ImageField = ImageField;\n            class RadioField extends Field {\n            }\n            function fromInfo(config) {\n                let cls = Katrid.Data.Fields.registry[config.type] || StringField;\n                return new cls(config);\n            }\n            Fields.fromInfo = fromInfo;\n            function fromArray(fields) {\n                let r = {};\n                Object.keys(fields).map((k) => r[k] = fromInfo(fields[k]));\n                return r;\n            }\n            Fields.fromArray = fromArray;\n            Fields.registry = {\n                Field,\n                StringField,\n                BooleanField,\n                DecimalField,\n                NumericField,\n                IntegerField,\n                TextField,\n                ImageField,\n                DateField,\n                DateTimeField,\n                TimeField,\n                XmlField,\n                JsonField,\n                ForeignKey,\n                ManyToManyField,\n                OneToManyField,\n                radio: RadioField,\n            };\n        })(Fields = Data.Fields || (Data.Fields = {}));\n    })(Data = Katrid.Data || (Katrid.Data = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Data;\n    (function (Data) {\n        let RecordState;\n        (function (RecordState) {\n            RecordState[RecordState[\"destroyed\"] = 0] = \"destroyed\";\n            RecordState[RecordState[\"created\"] = 1] = \"created\";\n            RecordState[RecordState[\"modified\"] = 2] = \"modified\";\n            RecordState[RecordState[\"unmodified\"] = 3] = \"unmodified\";\n        })(RecordState = Data.RecordState || (Data.RecordState = {}));\n        class Record {\n            constructor(data, dataSource, state) {\n                if (!data)\n                    data = this.newRecord();\n                this.pristine = data;\n                this.data = {};\n                this.dataSource = dataSource;\n                this.pending = null;\n                this.modified = false;\n                this.children = [];\n                this.state = state || RecordState.unmodified;\n                this.submitted = false;\n                data.$record = this;\n            }\n            get scope() {\n                return this.dataSource.scope;\n            }\n            get pk() {\n                return this.pristine.id;\n            }\n            addChild(child) {\n                if (this.children.indexOf(child) === -1)\n                    this.children.push(child);\n            }\n            newRecord() {\n                let rec = {};\n                rec.$created = true;\n                this.state = RecordState.created;\n                return rec;\n            }\n            delete() {\n                this.state = RecordState.destroyed;\n                if (this.state === RecordState.unmodified)\n                    this.setModified();\n                else if (this.parent.children.indexOf(this) > -1)\n                    this.parent.children.splice(this.parent.children.indexOf(this), 1);\n            }\n            _prepareRecord(rec, parent) {\n                console.log(rec.constructor.name);\n                return;\n                let getValue = (v) => {\n                    if (_.isObject(v))\n                        return this._prepareRecord(v, rec);\n                    else if (_.isArray(v))\n                        return v.map((obj) => getValue(obj));\n                    return v;\n                };\n                let res = {};\n                for (let [k, v] of Object.entries(rec)) {\n                    if (parent && _.isObject(v))\n                        continue;\n                    res[k] = getValue(v);\n                    if (v)\n                        console.log(v.constructor.name);\n                }\n                if (this.dataSource.parent && !parent) {\n                    let field = this.dataSource.parent.scope.view.fields[this.dataSource.fieldName]._info.field;\n                    res[field] = this.dataSource.parent.record.$record._prepareRecord(this.dataSource.parent.record);\n                }\n                return res;\n            }\n            setModified(field) {\n                this.modified = true;\n                if (field)\n                    this.dataSource.$setDirty(field);\n                this.dataSource._pendingChanges = true;\n            }\n            get parent() {\n                return this.dataSource.parent && this.dataSource.parent.record.$record;\n            }\n            compare(oldValue, newValue) {\n                if (_.isArray(oldValue) && _.isArray(newValue))\n                    return oldValue.join(',') !== newValue.join(',');\n                return oldValue != newValue;\n            }\n            discard() {\n                if (this.pending)\n                    Object.assign(this.pristine, this.pending);\n                this.data = {};\n            }\n            flush() {\n                if (!this.pending)\n                    this.pending = {};\n                Object.assign(this.pending, this.data);\n                this.parent.addChild(this);\n            }\n            set(propKey, value) {\n                let field = this.dataSource.fieldByName(propKey);\n                if (field) {\n                    if (this.state === RecordState.unmodified)\n                        this.state = RecordState.modified;\n                    let oldValue = this.pristine[propKey];\n                    value = field.toJSON(value);\n                    if (this.compare(oldValue, value)) {\n                        this.setModified(propKey);\n                        this.data[propKey] = value;\n                        if (field.onChange) {\n                            let rec = this.$encode(this.pristine);\n                            rec[propKey] = value;\n                            if (this.dataSource.parent && this.dataSource.fieldName) {\n                                let field = this.dataSource.parent.fields[this.dataSource.fieldName]._info.field;\n                                rec[field] = this.$encode(this.dataSource.parent.record);\n                            }\n                            this.dataSource.dispatchEvent('field_change_event', [propKey, rec]);\n                        }\n                    }\n                }\n                return true;\n            }\n            $encode(obj) {\n                if (_.isArray(obj))\n                    return obj.map((v) => this.$encode(v));\n                else if (_.isObject(obj)) {\n                    let r = {};\n                    for (let [k, v] of Object.entries(obj))\n                        if (!k.startsWith('$'))\n                            r[k] = this.$encode(v);\n                    return r;\n                }\n                else\n                    return obj;\n            }\n            $new() {\n                return new Record(this.pristine);\n            }\n            serialize() {\n                let data = jQuery.extend({}, this.data);\n                for (let child of this.children) {\n                    if (!(child.dataSource.field.name in data))\n                        data[child.dataSource.field.name] = [];\n                    if (child.state === RecordState.created)\n                        data[child.dataSource.field.name].push({ action: 'CREATE', values: child.serialize() });\n                    else if (child.state === RecordState.modified)\n                        data[child.dataSource.field.name].push({ action: 'UPDATE', values: child.serialize() });\n                    else if (child.state === RecordState.destroyed)\n                        data[child.dataSource.field.name].push({ action: 'DESTROY', id: child.pk });\n                }\n                if (this.pk)\n                    data.id = this.pk;\n                return data;\n            }\n        }\n        Data.Record = Record;\n        class SubRecords {\n            constructor(recs) {\n                this.recs = recs;\n            }\n            append(rec) {\n                if (this.recs.indexOf(rec) === -1)\n                    this.recs.push(rec);\n            }\n        }\n        Data.SubRecords = SubRecords;\n        function createRecord(rec, dataSource) {\n            let record = new Record(rec, dataSource);\n            if (!rec)\n                rec = record.pristine;\n            return new Proxy(rec, {\n                set(target, propKey, value, receiver) {\n                    if (!propKey.startsWith('$$')) {\n                        let scope = dataSource.scope;\n                        let field = dataSource.fieldByName(propKey);\n                        if (!propKey.startsWith('$') && scope && field && !(field instanceof Katrid.Data.Fields.OneToManyField)) {\n                            rec.$record.set(propKey, value);\n                        }\n                    }\n                    return Reflect.set(target, propKey, value, receiver);\n                }\n            });\n        }\n        Data.createRecord = createRecord;\n    })(Data = Katrid.Data || (Katrid.Data = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Dialogs;\n        (function (Dialogs) {\n            class Alerts {\n                static success(msg) {\n                    return toastr['success'](msg);\n                }\n                static warn(msg) {\n                    return toastr['warning'](msg);\n                }\n                static info(msg) {\n                    return toastr['info'](msg);\n                }\n                static error(msg) {\n                    return toastr['error'](msg);\n                }\n            }\n            Dialogs.Alerts = Alerts;\n            class WaitDialog {\n                static show() {\n                    $('#loading-msg').show();\n                }\n                static hide() {\n                    $('#loading-msg').hide();\n                }\n            }\n        })(Dialogs = Forms.Dialogs || (Forms.Dialogs = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var UI;\n    (function (UI) {\n        UI.keyCode = {\n            BACKSPACE: 8,\n            COMMA: 188,\n            DELETE: 46,\n            DOWN: 40,\n            END: 35,\n            ENTER: 13,\n            ESCAPE: 27,\n            HOME: 36,\n            LEFT: 37,\n            PAGE_DOWN: 34,\n            PAGE_UP: 33,\n            PERIOD: 190,\n            RIGHT: 39,\n            SPACE: 32,\n            TAB: 9,\n            UP: 38\n        };\n        function toggleFullScreen() {\n            if (!document.fullscreenElement) {\n                if (document.documentElement.requestFullscreen)\n                    document.documentElement.requestFullscreen();\n            }\n            else {\n                if (document.exitFullscreen) {\n                    document.exitFullscreen();\n                }\n            }\n        }\n        UI.toggleFullScreen = toggleFullScreen;\n        UI.uiKatrid = angular.module('ui.katrid', []);\n    })(UI = Katrid.UI || (Katrid.UI = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Widgets;\n        (function (Widgets) {\n            class Widget {\n            }\n            Widgets.Widget = Widget;\n            class Component {\n            }\n            Widgets.Component = Component;\n            let ID = 0;\n            function genId() {\n                return ++ID;\n            }\n            Widgets.genId = genId;\n            class FieldWidget extends HTMLElement {\n                get field() {\n                    return this._field;\n                }\n                set field(value) {\n                    this._field = value;\n                    this._fieldEl = value.fieldEl;\n                    this.fieldName = value.name;\n                    this.view = value.view;\n                }\n                bind(field) {\n                    this.field = field;\n                }\n                connectedCallback() {\n                    this.actionView = this.closest('action-view');\n                    this._id = ++ID;\n                    this.create();\n                }\n                disconnectedCallback() {\n                    this.destroy();\n                }\n                create() {\n                }\n                destroy() {\n                }\n            }\n            Widgets.FieldWidget = FieldWidget;\n            class InputField extends FieldWidget {\n            }\n            Widgets.InputField = InputField;\n            Widgets.registry = {};\n        })(Widgets = Forms.Widgets || (Forms.Widgets = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Views;\n        (function (Views) {\n            let compileButtons = (container) => {\n                let sendFileCounter = 0;\n                return container.find('button').each((idx, btn) => {\n                    let $btn = $(btn);\n                    let type = $btn.attr('type');\n                    if (!$btn.attr('type') || ($btn.attr('type') === 'object'))\n                        $btn.attr('type', 'button');\n                    if (type === 'object') {\n                        let sendFile = $btn.attr('send-file');\n                        $btn.attr('button-object', $btn.attr('name'));\n                        if (_.isUndefined(sendFile)) {\n                            $btn.attr('ng-click', `action.formButtonClick(action.selection, '${$btn.attr('name')}', $event.target);$event.stopPropagation();`);\n                        }\n                        else {\n                            let idSendFile = `__send_file_${++sendFileCounter}`;\n                            container.append(`<input id=\"${idSendFile}\" type=\"file\" style=\"display: none\" onchange=\"Katrid.Services.Upload.sendFile('${$btn.attr('name')}', this)\"/>`);\n                            $btn.attr('send-file', $btn.attr('name'));\n                            $btn.attr('onclick', `$('#${idSendFile}').trigger('click')`);\n                        }\n                    }\n                    else if (type === 'tag') {\n                        $btn.attr('button-tag', $btn.attr('name'));\n                        $btn.attr('onclick', `Katrid.Actions.ClientAction.tagButtonClick($(this))`);\n                    }\n                    if (!$btn.attr('class'))\n                        $btn.addClass('btn btn-outline-secondary');\n                });\n            };\n            class ClientView {\n                constructor(action) {\n                    this.action = action;\n                }\n                get template() {\n                    return Katrid.app.getTemplate(this.templateUrl);\n                }\n                render() {\n                    return $(this.template);\n                }\n            }\n            Views.ClientView = ClientView;\n            class BaseView {\n                constructor(scope) {\n                    this.scope = scope;\n                }\n                render() {\n                    return $(Katrid.app.getTemplate(this.templateUrl));\n                }\n            }\n            Views.BaseView = BaseView;\n            class ActionView extends BaseView {\n                constructor(action, scope, view, content) {\n                    super(scope);\n                    this.action = action;\n                    this.view = view;\n                    this.templateUrl = 'view.basic';\n                    this.toolbar = true;\n                    this.content = content;\n                }\n                getTemplateContext() {\n                    return { content: this.content };\n                }\n                render() {\n                    return sprintf(Katrid.app.getTemplate(this.templateUrl), this.getTemplateContext());\n                }\n                renderTo(el) {\n                    Katrid.Core.setContent(this.render(), this.scope);\n                }\n            }\n            Views.ActionView = ActionView;\n            class View extends ActionView {\n                getBreadcrumb() {\n                    let html = `<ol class=\"breadcrumb\">`;\n                    let i = 0;\n                    for (let h of Katrid.app.actionManager.actions) {\n                        if ((h instanceof Katrid.Actions.WindowAction) && (i === 0 && h.viewModes.length > 1))\n                            html += `<li class=\"breadcrumb-item\"><a href=\"#\" ng-click=\"action.backTo(0, 0)\">${h.info.display_name}</a></li>`;\n                        i++;\n                        if ((h instanceof Katrid.Actions.WindowAction) && (Katrid.app.actionManager.length > i && h.viewType === 'form'))\n                            html += `<li class=\"breadcrumb-item\"><a href=\"#\" ng-click=\"action.backTo(${i - 1}, 'form')\">${h.scope.record.display_name}</a></li>`;\n                    }\n                    if (this.type === 'form')\n                        html += `<li class=\"breadcrumb-item\">{{ self.display_name }}</li>`;\n                    return html + '</ol>';\n                }\n                render() {\n                    return sprintf(Katrid.app.$templateCache.get(this.templateUrl), { content: this.content });\n                }\n                getViewButtons() {\n                    let btns = Object.entries(View.buttons).map((btn) => this.view.viewModes.includes(btn[0]) ? btn[1] : '').join('');\n                    if (btns)\n                        btns = `<div class=\"btn-group\">${btns}</div>`;\n                    return btns;\n                }\n            }\n            View.buttons = {};\n            Views.View = View;\n            class WindowView {\n                constructor(config) {\n                    this.config = config;\n                    this.action = config.action;\n                    this.viewInfo = config.viewInfo;\n                    this.templateUrl = null;\n                    this.create();\n                }\n                create() {\n                    this.context = {};\n                    if (this.config.context)\n                        Object.assign(this.context, this.config.context);\n                    if (this.config.templateUrl)\n                        this.templateUrl = this.config.templateUrl;\n                }\n                template() {\n                    let content = this.viewInfo.content;\n                    if (content instanceof HTMLElement)\n                        content = content.cloneNode(true);\n                    return $(content)[0];\n                }\n                render(el) {\n                    return;\n                }\n                renderTo(container) {\n                    this.el = this.render(container);\n                    container.append(this.el);\n                }\n                get fields() {\n                    return this.viewInfo.fields;\n                }\n                renderField(fieldEl) {\n                    let name = fieldEl.getAttribute('name');\n                    if (name) {\n                        let fld = this.fields[name];\n                        if (fld) {\n                            let newField = fld.assign(this, fieldEl);\n                            if (newField.visible)\n                                return newField.el;\n                            return null;\n                        }\n                        else\n                            console.error(`Field \"${name}\" not found`);\n                    }\n                }\n                ready() {\n                }\n                createHeader(el) {\n                    compileButtons($(el));\n                    let headerEl = el.querySelector('header');\n                    let header = '';\n                    if (headerEl) {\n                        let statusField = headerEl.querySelector('field[name=status]');\n                        if (statusField)\n                            statusField.setAttribute('status-field', 'status-field');\n                        headerEl.remove();\n                        header = headerEl.innerHTML;\n                    }\n                    return header;\n                }\n            }\n            Views.WindowView = WindowView;\n            Katrid.UI.uiKatrid\n                .directive('smartForm', () => ({\n                restrict: 'A',\n                link(scope, el, attrs) {\n                    if ('edit' in attrs) {\n                        attrs.$observe('edit', (v) => {\n                            if (v === 'false')\n                                $('.action-view:first').find('.toolbutton-action-edit').hide();\n                            else\n                                $('.action-view:first').find('.toolbutton-action-edit').show();\n                        });\n                    }\n                }\n            }));\n            Views.searchModes = ['list', 'card'];\n            Views.registry = {};\n        })(Views = Forms.Views || (Forms.Views = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Dialogs;\n        (function (Dialogs) {\n            class Dialog extends Katrid.Forms.Views.BaseView {\n                constructor(scope, options) {\n                    super(scope);\n                    this.templateUrl = 'dialog.base';\n                    this.scope.isDialog = true;\n                }\n                render() {\n                    return $(Katrid.app.getTemplate(this.templateUrl).replace('<!-- replace-content -->', this.content));\n                }\n                show() {\n                    if (!this.el) {\n                        this.el = $(this.render());\n                        this.root = this.el.find('.modal-dialog-body');\n                        this.el.find('form').first().addClass('row');\n                        this.$compile(this.el)(this.scope);\n                    }\n                    this.el.modal('show')\n                        .on('shown.bs.modal', () => Katrid.UI.uiKatrid.setFocus(this.el.find('.form-field').first()));\n                    return this.el;\n                }\n            }\n            Dialogs.Dialog = Dialog;\n            class Window extends Dialog {\n                constructor(options) {\n                    super(options.scope, options);\n                    this.scope._ = this.scope.$parent._;\n                    this.scope.parentAction = this.scope.action;\n                    this.scope.views = {\n                        form: options.view\n                    };\n                    this.dialogTitle = (options && options.title) || Katrid.i18n.gettext('Create: ');\n                    this.scope.view = this.view = options.view;\n                    this.scope.model = options.model;\n                    this.options = options;\n                }\n                async createNew(config) {\n                    let field = this.options.field;\n                    this.scope.$setDirty = (field) => {\n                        const control = this.scope.form[field];\n                        if (control) {\n                            control.$setDirty();\n                        }\n                    };\n                    let view = this.scope.view;\n                    let elScope = this.scope;\n                    elScope.views = { form: view };\n                    elScope.isDialog = true;\n                    let caption = this.dialogTitle;\n                    this.action = this.scope.action = {\n                        scope: this.scope,\n                        context: {},\n                    };\n                    let dataSource = this.action.dataSource = this.scope.dataSource = new Katrid.Data.DataSource(this.scope, this.action);\n                    let formView = new Katrid.Forms.Views.FormView({ action: this.action, viewInfo: this.view, dialog: true, templateUrl: 'view.form.dialog.modal.jinja2' });\n                    let el = formView.render();\n                    let form = el.find('form:first');\n                    elScope.root = form;\n                    this.action.$element = form;\n                    form.addClass('row');\n                    el.modal('show').on('shown.bs.modal', () => Katrid.UI.uiKatrid.setFocus(el.find('.form-field').first()))\n                        .on('hidden.bs.modal', function () {\n                        $(this).modal('dispose').remove();\n                    });\n                    this.scope.form = form.controller('form');\n                    this.scope.formElement = form;\n                    if (field) {\n                        let evt = this.scope.$on('saveAndClose', async (event, targetScope, data) => {\n                            if (this.scope === targetScope) {\n                                if (_.isArray(data) && data.length) {\n                                    data = await this.scope.$parent.model.getFieldChoices(field.name, null, { ids: data });\n                                    let vals = {};\n                                    let res = data.items[0];\n                                    vals[field.name] = res;\n                                    this.scope.$parent.action.dataSource.setValues(vals);\n                                    if (this.options.sel)\n                                        this.options.sel.select2('data', { id: res[0], text: res[1] });\n                                }\n                                evt();\n                            }\n                        });\n                    }\n                    return new Promise(async (resolve, reject) => {\n                        setTimeout(async () => {\n                            let kwargs, defaultValues;\n                            if (config) {\n                                if (config.creationName)\n                                    kwargs = { creation_name: name };\n                                if (config.defaultValues)\n                                    defaultValues = config.defaultValues;\n                            }\n                            await dataSource.insert(true, defaultValues, kwargs);\n                            this.scope.$apply();\n                            resolve(el);\n                        });\n                    });\n                }\n                ;\n            }\n            Dialogs.Window = Window;\n        })(Dialogs = Forms.Dialogs || (Forms.Dialogs = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Views;\n        (function (Views) {\n            class Card extends Views.WindowView {\n                create() {\n                    super.create();\n                    this.viewType = 'card';\n                    this.templateUrl = 'view.card.jinja2';\n                    this.action.view = this;\n                }\n                render(container) {\n                    let content = $(this.template());\n                    content.children('field').remove();\n                    for (let element of content.find('field')) {\n                        let el = $(element);\n                        let newField = this.renderField(element);\n                        if (newField)\n                            el.replaceWith(newField);\n                        else\n                            el.replaceWith(`\\$\\{ record.${el.attr('name')} }`);\n                    }\n                    let templ = $(Katrid.app.getTemplate(this.templateUrl, { content: content[0].outerHTML }));\n                    return Katrid.Core.$compile(templ)(this.action.scope);\n                }\n                ready() {\n                    setTimeout(() => this.action.dataSource.open().then(() => this.action.scope.$apply()), 500);\n                }\n            }\n            Views.Card = Card;\n            Views.registry['card'] = Card;\n        })(Views = Forms.Views || (Forms.Views = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Views;\n        (function (Views) {\n            class FormView extends Views.WindowView {\n                create() {\n                    super.create();\n                    if (!this.templateUrl)\n                        this.templateUrl = 'view.form.jinja2';\n                    this.viewType = 'form';\n                }\n                template() {\n                    let form = super.template();\n                    $(form).find('tabset').tabset();\n                    return form;\n                }\n                prepare(container) {\n                    let form = this.template();\n                    form.setAttribute('smart-form', 'smart-form');\n                    form.classList.add('row');\n                    let header = this.createHeader(form);\n                    for (let child of form.querySelectorAll('field')) {\n                        if (child.hasAttribute('invisible'))\n                            continue;\n                        let newField = this.renderField(child);\n                        if (newField) {\n                            child.parentElement.insertBefore(newField, child);\n                            child.remove();\n                            newField.setAttribute('form-field', 'form-field');\n                        }\n                    }\n                    let context = {};\n                    Object.assign(context, this.context);\n                    Object.assign(context, {\n                        header,\n                    });\n                    let templ = $(Katrid.app.getTemplate(this.templateUrl, context));\n                    templ.find('.template-placeholder').append(form);\n                    if (this.action)\n                        this.action.$form = templ.find('form:first').first();\n                    this.el = templ;\n                    return templ;\n                }\n                render(container) {\n                    let templ = this.prepare(container);\n                    templ = Katrid.Core.$compile(templ)(this.action.scope);\n                    this.action.form = angular.element(this.action.$form).controller('form');\n                    templ.addClass('ng-form');\n                    return templ;\n                }\n            }\n            Views.FormView = FormView;\n            class FormDialog extends FormView {\n                get caption() {\n                    return this.el.attr('caption');\n                }\n            }\n            Views.FormDialog = FormDialog;\n            Views.registry['form'] = FormView;\n        })(Views = Forms.Views || (Forms.Views = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Views;\n        (function (Views) {\n            class List extends Views.WindowView {\n                create() {\n                    super.create();\n                    this.viewType = 'list';\n                    this.templateUrl = 'view.list.html';\n                    this.action.view = this;\n                }\n                render(container) {\n                    let list = this.template();\n                    let context = {};\n                    Object.assign(context, this.context);\n                    let header = this.createHeader(list);\n                    let templ = $(Katrid.app.getTemplate(this.templateUrl));\n                    templ.find('header:first').append($(header));\n                    templ.find('.template-placeholder').append(list);\n                    templ.find('list')\n                        .attr('ng-row-click', 'action.listRowClick($index, record, $event)')\n                        .attr('list-options', '{\"rowSelector\": true}').attr('ng-row-click', 'action.listRowClick($index, record, $event)');\n                    templ = Katrid.Core.$compile(templ)(this.action.scope);\n                    if (this.action && this.action.dataSource)\n                        setTimeout(() => this.action.dataSource.open());\n                    return templ;\n                }\n                ready() {\n                    this.action.dataSource.open();\n                }\n            }\n            Views.List = List;\n            Views.registry['list'] = List;\n        })(Views = Forms.Views || (Forms.Views = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    Katrid.i18n = {\n        languageCode: 'pt-BR',\n        formats: {},\n        catalog: {},\n        initialize(plural, catalog, formats) {\n            Katrid.i18n.plural = plural;\n            Katrid.i18n.catalog = catalog;\n            Katrid.i18n.formats = formats;\n            if (plural) {\n                Katrid.i18n.pluralidx = function (n) {\n                    if (plural instanceof Boolean) {\n                        if (plural) {\n                            return 1;\n                        }\n                        else {\n                            return 0;\n                        }\n                    }\n                    else {\n                        return plural;\n                    }\n                };\n            }\n            else {\n                Katrid.i18n.pluralidx = function (n) {\n                    if (n === 1) {\n                        return 0;\n                    }\n                    else {\n                        return 1;\n                    }\n                };\n            }\n            _.mixin({\n                gettext: Katrid.i18n.gettext,\n                sprintf: sprintf,\n            });\n            return Katrid.i18n.initialized = true;\n        },\n        merge(catalog) {\n            return Array.from(catalog).map((key) => (Katrid.i18n.catalog[key] = catalog[key]));\n        },\n        gettext(s) {\n            const value = Katrid.i18n.catalog[s];\n            if (value != null) {\n                return value;\n            }\n            else {\n                return s;\n            }\n        },\n        gettext_noop(s) {\n            return s;\n        },\n        ngettext(singular, plural, count) {\n            const value = Katrid.i18n.catalog[singular];\n            if (value != null) {\n                return value[Katrid.i18n.pluralidx(count)];\n            }\n            else if (count === 1) {\n                return singular;\n            }\n            else {\n                return plural;\n            }\n        },\n        pgettext(s) {\n            let value = Katrid.i18n.gettext(s);\n            if (value.indexOf('\\x04') !== -1) {\n                value = s;\n            }\n            return value;\n        },\n        npgettext(ctx, singular, plural, count) {\n            let value = Katrid.i18n.ngettext(ctx + '\\x04' + singular, ctx + '\\x04' + plural, count);\n            if (value.indexOf('\\x04') !== -1) {\n                value = Katrid.i18n.ngettext(singular, plural, count);\n            }\n            return value;\n        },\n        interpolate(fmt, obj, named) {\n            if (named) {\n                fmt.replace(/%\\(\\w+\\)s/g, match => String(obj[match.slice(2, -2)]));\n            }\n            else {\n                fmt.replace(/%s/g, match => String(obj.shift()));\n            }\n            return {\n                get_format(formatType) {\n                    const value = Katrid.i18n.formats[formatType];\n                    if (value != null) {\n                        return value;\n                    }\n                    else {\n                        return formatType;\n                    }\n                }\n            };\n        }\n    };\n    if (window.KATRID_I18N)\n        Katrid.i18n.initialize(KATRID_I18N.plural, KATRID_I18N.catalog, KATRID_I18N.formats);\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Views;\n        (function (Views) {\n            let conditionsLabels = {\n                '=': Katrid.i18n.gettext('Is equal'),\n                '!=': Katrid.i18n.gettext('Is different'),\n                '>': Katrid.i18n.gettext('Greater-than'),\n                '<': Katrid.i18n.gettext('Less-than'),\n            };\n            let conditionSuffix = {\n                '=': '',\n                '!=': '__isnot',\n                'like': '__icontains',\n                'not like': '__not_icontains',\n                '>': '__gt',\n                '>=': '__gte',\n                '<': '__lt',\n                '<=': '__lte',\n                'in': '__in',\n                'not in': '__not_in',\n            };\n            class SearchQuery {\n                constructor(searchView) {\n                    this.searchView = searchView;\n                    this.items = [];\n                    this.groups = [];\n                }\n                add(item) {\n                    if (this.items.includes(item)) {\n                        item.facet.addValue(item);\n                        item.facet.refresh();\n                    }\n                    else {\n                        this.items.push(item);\n                        this.searchView.renderFacets();\n                    }\n                    if (item instanceof SearchGroup)\n                        this.groups.push(item);\n                    this.searchView.change();\n                }\n                loadItem(item) {\n                    this.items.push(item);\n                    if (item instanceof SearchGroup)\n                        this.groups.push(item);\n                }\n                remove(item) {\n                    this.items.splice(this.items.indexOf(item), 1);\n                    if (item instanceof SearchGroup) {\n                        this.groups.splice(this.groups.indexOf(item), 1);\n                    }\n                    this.searchView.change();\n                }\n                getParams() {\n                    let r = [];\n                    for (let i of this.items)\n                        r = r.concat(i.getParamValues());\n                    return r;\n                }\n            }\n            class FacetView {\n                constructor(item) {\n                    this.item = item;\n                    this.values = [];\n                }\n                get separator() {\n                    return ` <span class=\"facet-values-separator\">${Katrid.i18n.gettext('or')}</span> `;\n                }\n                init(item, values) {\n                    this.item = item;\n                    if (values)\n                        this.values = values;\n                    else\n                        this.values = [{\n                                searchString: this.item.getDisplayValue(), value: this.item.value\n                            }];\n                }\n                addValue(value) {\n                    return this.values.push(value);\n                }\n                get caption() {\n                    return this.item.caption;\n                }\n                clear() {\n                    this.values = [];\n                }\n                get templateValue() {\n                    return (Array.from(this.values).map((s) => s instanceof SearchObject ? s.display : s)).join(this.separator);\n                }\n                template() {\n                    return;\n                }\n                link(searchView) {\n                    const html = $(this.template());\n                    this.item.facet = this;\n                    this.element = html;\n                    const rm = html.find('.facet-remove');\n                    rm.click((evt) => searchView.onRemoveItem(evt, this.item));\n                    return html;\n                }\n                render(el) {\n                }\n                refresh() {\n                    return this.element.find('.facet-value').html(this.templateValue);\n                }\n                load(searchView) {\n                    searchView.query.loadItem(this.item);\n                    this.render(searchView);\n                }\n                destroy() {\n                    this.clear();\n                }\n                getParamValues() {\n                    const r = [];\n                    for (let v of this.values) {\n                        r.push(this.item.getParamValue(v));\n                    }\n                    if (r.length > 1)\n                        return [{ 'OR': r }];\n                    return r;\n                }\n            }\n            class FacetGroup extends FacetView {\n                constructor(...args) {\n                    super(args);\n                    this.grouping = true;\n                }\n                clear() {\n                    let oldValues = this.values;\n                    super.clear();\n                    for (let v of oldValues)\n                        if (v._ref)\n                            v._ref._selected = false;\n                }\n                get separator() {\n                    return ` <span> &gt; </span> `;\n                }\n                get caption() {\n                    return '<span class=\"fa fa-bars\"></span>';\n                }\n            }\n            class SearchItem {\n                constructor(view, name, el) {\n                    this.view = view;\n                    this.name = name;\n                    this.el = el;\n                }\n                getDisplayValue() {\n                    if (this.value) {\n                        return this.value[1];\n                    }\n                    return this.searchString;\n                }\n                getParamValue(name, value) {\n                    let r = {};\n                    if (_.isArray(value)) {\n                        r[name] = value[0];\n                    }\n                    else {\n                        r[name + '__icontains'] = value;\n                    }\n                    return r;\n                }\n                _doChange() {\n                    this.view.update();\n                }\n            }\n            class SearchFilter extends SearchItem {\n                constructor(view, name, caption, domain, group, el) {\n                    super(view, name, el);\n                    this.group = group;\n                    this.caption = caption;\n                    if (_.isString(domain))\n                        domain = JSON.parse(domain.replace(/'/g, '\"'));\n                    this.domain = domain;\n                    this._selected = false;\n                }\n                static fromItem(view, el, group) {\n                    return new SearchFilter(view, el.attr('name'), el.attr('caption') || el.attr('label'), el.attr('domain'), group, el);\n                }\n                toString() {\n                    return this.caption;\n                }\n                toggle() {\n                    this.selected = !this.selected;\n                }\n                get selected() {\n                    return this._selected;\n                }\n                set selected(value) {\n                    this._selected = value;\n                    if (value)\n                        this.group.addValue(this);\n                    else\n                        this.group.removeValue(this);\n                    this._doChange();\n                }\n                getDisplayValue() {\n                    return this.caption;\n                }\n                get facet() {\n                    return this.group.facet;\n                }\n                getParamValue() {\n                    return this.domain;\n                }\n                get value() {\n                    return this.domain;\n                }\n            }\n            class SearchFilters extends Array {\n                constructor(view, facet) {\n                    super();\n                    this.view = view;\n                    this._selection = [];\n                    if (!facet)\n                        facet = new FacetView(this);\n                    this._facet = facet;\n                }\n                static fromItem(view, el) {\n                    let group = new SearchFilters(view);\n                    group.push(SearchFilter.fromItem(view, el, group));\n                    return group;\n                }\n                static fromGroup(view, el) {\n                    let group = new SearchFilters(view);\n                    for (let child of el.children())\n                        group.push(SearchFilter.fromItem(view, $(child), group));\n                    console.log(group);\n                    return group;\n                }\n                addValue(item) {\n                    this._selection.push(item);\n                    this._facet.values = this._selection.map(item => (new SearchObject(item.toString(), item.value)));\n                    this._refresh();\n                }\n                removeValue(item) {\n                    this._selection.splice(this._selection.indexOf(item), 1);\n                    this._facet.values = this._selection.map(item => ({ searchString: item.getDisplayValue(), value: item.value }));\n                    this._refresh();\n                }\n                selectAll() {\n                    for (let item of this)\n                        this.addValue(item);\n                    this.view.update();\n                }\n                get caption() {\n                    return '<span class=\"fa fa-filter\"></span>';\n                }\n                _refresh() {\n                    console.log(this.view);\n                    if (this._selection.length) {\n                        if (this.view.facets.indexOf(this._facet) === -1)\n                            this.view.facets.push(this._facet);\n                    }\n                    else if (this.view.facets.indexOf(this._facet) > -1)\n                        this.view.facets.splice(this.view.facets.indexOf(this._facet), 1);\n                }\n                getParamValue(v) {\n                    return v.value;\n                }\n                clear() {\n                    this._selection = [];\n                }\n            }\n            class SearchGroups extends SearchFilters {\n                constructor(view, facet) {\n                    if (!facet)\n                        facet = new FacetGroup();\n                    super(view, facet);\n                }\n                static fromGroup(opts) {\n                    let view = opts.view;\n                    let el = opts.el;\n                    let facet = opts.facet || view.facetGrouping;\n                    let group = new SearchGroups(view, facet);\n                    if (el)\n                        for (let child of el.children())\n                            group.push(SearchGroup.fromItem(view, $(child), group));\n                    return group;\n                }\n                addValue(item) {\n                    this.view.groupLength++;\n                    let newItem = new SearchObject(item.toString(), item.value);\n                    newItem._ref = item;\n                    this._facet.values.push(newItem);\n                    this._refresh();\n                }\n                removeValue(item) {\n                    this.view.groupLength--;\n                    for (let i of this._facet.values)\n                        if (i._ref === item) {\n                            this._facet.values.splice(this._facet.values.indexOf(i), 1);\n                            break;\n                        }\n                    this._refresh();\n                }\n                _refresh() {\n                    if (this._facet.values.length) {\n                        if (this.view.facets.indexOf(this._facet) === -1)\n                            this.view.facets.push(this._facet);\n                    }\n                    else if (this.view.facets.indexOf(this._facet) > -1)\n                        this.view.facets.splice(this.view.facets.indexOf(this._facet), 1);\n                }\n            }\n            class SearchObject {\n                constructor(display, value) {\n                    this.display = display;\n                    this.value = value;\n                }\n            }\n            class SearchResult {\n                constructor(field, value) {\n                    this.field = field;\n                    this.value = value;\n                    this.text = value[1];\n                    this.indent = true;\n                }\n                select() {\n                    this.field.selectItem(this.value);\n                }\n            }\n            class SearchField extends SearchItem {\n                constructor(view, name, el, field) {\n                    super(view, name, el);\n                    this.field = field;\n                    this._expanded = false;\n                    if (field.type === 'ForeignKey') {\n                        this.expandable = true;\n                        this.children = [];\n                    }\n                    else {\n                        this.expandable = false;\n                    }\n                }\n                get expanded() {\n                    return this._expanded;\n                }\n                set expanded(value) {\n                    this._expanded = value;\n                    if (value)\n                        this._loadChildren();\n                    else {\n                        this.children = [];\n                        if (this.view.$items)\n                            for (let i = this.view.$items.length - 1; i > 0; i--) {\n                                let obj = this.view.$items[i];\n                                if (obj.field === this) {\n                                    this.view.$items.splice(i, 1);\n                                }\n                            }\n                    }\n                }\n                _loadChildren() {\n                    this.loading = true;\n                    this.view.scope.model.getFieldChoices(this.name, this.view.text)\n                        .then((res) => {\n                        this.children = res.items;\n                        let index = this.view.$items.indexOf(this);\n                        if (index > -1) {\n                            for (let obj of this.children) {\n                                index++;\n                                this.view.$items.splice(index, 0, new SearchResult(this, obj));\n                            }\n                        }\n                    })\n                        .finally(() => this.view.scope.$apply(() => this.loading = false));\n                }\n                get facet() {\n                    if (!this._facet)\n                        this._facet = new FacetView(this);\n                    return this._facet;\n                }\n                getDisplayValue() {\n                    return this.value;\n                }\n                getParamValue(value) {\n                    let r = {};\n                    let name = this.name;\n                    if (_.isArray(value)) {\n                        r[name] = value[0];\n                    }\n                    else if (value instanceof SearchObject) {\n                        return value.value;\n                    }\n                    else {\n                        r[name + '__icontains'] = value;\n                    }\n                    return r;\n                }\n                get caption() {\n                    return this.field.caption;\n                }\n                get value() {\n                    if (this._value)\n                        return this._value[1];\n                    return this.view.text;\n                }\n                select() {\n                    this.facet.addValue(this.value);\n                    this.view.addFacet(this.facet);\n                    this.view.close();\n                    this.view.update();\n                }\n                selectItem(item) {\n                    let domain = {};\n                    domain[this.field.name] = item[0];\n                    this.facet.addValue(new SearchObject(item[1], domain));\n                    this.view.addFacet(this.facet);\n                    this.view.close();\n                    this.view.update();\n                }\n                static fromField(view, el) {\n                    let field = view.view.fields[el.attr('name')];\n                    return new SearchField(view, field.name, el, field);\n                }\n                get template() {\n                    return _.sprintf(Katrid.i18n.gettext(`Search <i>%(caption)s</i> by: <strong>%(text)s</strong>`), {\n                        caption: this.field.caption,\n                        text: this.view.text,\n                    });\n                }\n            }\n            class SearchGroup extends SearchFilter {\n                constructor(view, name, caption, group, el) {\n                    super(view, name, el);\n                    this.group = group;\n                    this.caption = caption;\n                    this._selected = false;\n                }\n                static fromItem(view, el, group) {\n                    return new SearchGroup(view, el.attr('name'), el.attr('caption'), group, el);\n                }\n                toString() {\n                    return this.caption;\n                }\n            }\n            class CustomFilterItem extends SearchFilter {\n                constructor(view, field, condition, value, group) {\n                    super(view, field.name, field.caption, null, group);\n                    this.field = field;\n                    this.condition = condition;\n                    this._value = value;\n                    this._selected = true;\n                }\n                toString() {\n                    let s = this.field.format(this._value);\n                    return this.field.caption + ' ' + conditionsLabels[this.condition].toLowerCase() + ' \"' + s + '\"';\n                }\n                get value() {\n                    let r = {};\n                    r[this.field.name + conditionSuffix[this.condition]] = this._value;\n                    return r;\n                }\n            }\n            Katrid.UI.uiKatrid.controller('CustomFilterController', ['$scope', '$element', '$filter', function ($scope, $element, $filter) {\n                    $scope.tempFilter = null;\n                    $scope.customFilter = [];\n                    $scope.fieldChange = function (field) {\n                        $scope.field = field;\n                        $scope.condition = field.defaultCondition;\n                        $scope.conditionChange($scope.condition);\n                    };\n                    $scope.conditionChange = (condition) => {\n                        $scope.controlVisible = $scope.field.isControlVisible(condition);\n                    };\n                    $scope.valueChange = (value) => {\n                        $scope.searchValue = value;\n                    };\n                    $scope.addCondition = (field, condition, value) => {\n                        if (!$scope.tempFilter)\n                            $scope.tempFilter = new SearchFilters($scope.$parent.action.searchView);\n                        $scope.tempFilter.push(new CustomFilterItem($scope.$parent.action.searchView, field, condition, value, $scope.tempFilter));\n                        $scope.field = null;\n                        $scope.condition = null;\n                        $scope.controlVisible = false;\n                        $scope.searchValue = undefined;\n                    };\n                    $scope.applyFilter = () => {\n                        if ($scope.searchValue)\n                            $scope.addCondition($scope.field, $scope.condition, $scope.searchValue);\n                        $scope.customFilter.push($scope.tempFilter);\n                        $scope.tempFilter.selectAll();\n                        $scope.tempFilter = null;\n                        $scope.customSearchExpanded = false;\n                    };\n                }])\n                .directive('customFilter', () => ({\n                restrict: 'A',\n                scope: {\n                    action: '=',\n                },\n            }));\n            class SearchView {\n                constructor(scope, element, view) {\n                    this.scope = scope;\n                    this.element = element;\n                    this.query = new SearchQuery(this);\n                    this._viewMoreButtons = localStorage.getItem('katrid.search.viewMoreButtons') === 'true';\n                    this.items = [];\n                    this.fields = [];\n                    this.filterGroups = [];\n                    this.groups = [];\n                    this._groupLength = this.groupLength = 0;\n                    this.facets = [];\n                    this.input = element.find('.search-view-input');\n                    this.view = view;\n                    this.$items = null;\n                    this.facetGrouping = new FacetGroup();\n                    if (view) {\n                        this.el = $(view.content);\n                        this.menu = element.find('.search-dropdown-menu.search-view-menu');\n                        for (let child of this.el.children()) {\n                            child = $(child);\n                            let tag = child.prop('tagName');\n                            let obj;\n                            if (tag === 'FILTER') {\n                                obj = SearchFilters.fromItem(this, child);\n                                this.filterGroups.push(obj);\n                            }\n                            else if (tag === 'FILTER-GROUP') {\n                                obj = SearchFilters.fromGroup(this, child);\n                                this.filterGroups.push(obj);\n                                continue;\n                            }\n                            else if (tag === 'GROUP') {\n                                obj = SearchGroup.fromItem({ view: this, el: child });\n                                this.groups.push(obj);\n                                continue;\n                            }\n                            else if (tag === 'FIELD') {\n                                obj = SearchField.fromField(this, child);\n                                this.fields.push(obj);\n                                continue;\n                            }\n                            console.log('obj', obj);\n                            if (obj)\n                                this.append(obj);\n                        }\n                        this.input\n                            .on('input', (evt) => {\n                            if (this.input.val().length) {\n                                return this.show();\n                            }\n                            else {\n                                return this.close();\n                            }\n                        })\n                            .on('keydown', (evt) => {\n                            switch (evt.which) {\n                                case Katrid.UI.keyCode.DOWN:\n                                    this.move(1);\n                                    evt.preventDefault();\n                                    break;\n                                case Katrid.UI.keyCode.UP:\n                                    this.move(-1);\n                                    evt.preventDefault();\n                                    break;\n                                case Katrid.UI.keyCode.ENTER:\n                                    this.scope.$apply(() => angular.element(this.menu.find('li.active a.search-menu-item')).scope().item.select(evt));\n                                    break;\n                                case Katrid.UI.keyCode.BACKSPACE:\n                                    if (this.input.val() === '') {\n                                        this.scope.$apply(() => this.facets.splice(this.facets.length - 1, 1).map(facet => facet.clear()));\n                                        this.update();\n                                    }\n                                    break;\n                            }\n                        })\n                            .on('blur', (evt) => {\n                            this.input.val('');\n                            return this.close();\n                        });\n                    }\n                }\n                addCustomGroup(field) {\n                    if (!this.customGroups) {\n                        this.customGroups = new SearchGroups(this, this.facetGrouping);\n                        this.groups.push(this.customGroups);\n                    }\n                    let obj = new SearchGroup(this, field.name, field.caption, this.customGroups);\n                    this.customGroups.push(obj);\n                    obj.selected = true;\n                }\n                set viewMoreButtons(value) {\n                    if (this._viewMoreButtons !== value) {\n                        this._viewMoreButtons = value;\n                        localStorage.setItem('katrid.search.viewMoreButtons', value.toString());\n                    }\n                }\n                get viewMoreButtons() {\n                    return this._viewMoreButtons;\n                }\n                load(filter) {\n                    Object.entries(filter).map((item, idx) => {\n                        let i = this.getByName(item[0]);\n                        if (i)\n                            i.selected = true;\n                    });\n                }\n                getByName(name) {\n                    for (let item of this.filterGroups)\n                        for (let subitem of item)\n                            if (subitem.name === name)\n                                return subitem;\n                    for (let item of this.items)\n                        if (item.name === name)\n                            return item;\n                }\n                append(item) {\n                    this.items.push(item);\n                }\n                addFacet(facet) {\n                    if (!this.facets.includes(facet))\n                        this.facets.push(facet);\n                }\n                first() {\n                    this.menu.find('li.active a.search-menu-item').removeClass('active');\n                    this.menu.find('li:first').addClass('active');\n                }\n                remove(index) {\n                    let facet = this.facets[index];\n                    facet.destroy();\n                    this.facets.splice(index, 1);\n                    this.update();\n                }\n                getParams() {\n                    let r = [];\n                    for (let i of this.facets)\n                        if (!i.grouping)\n                            r = r.concat(i.getParamValues());\n                    return r;\n                }\n                dump() {\n                    let res = [];\n                    for (let i of this.facets)\n                        res.push(i);\n                    return res;\n                }\n                move(distance) {\n                    const fw = distance > 0;\n                    distance = Math.abs(distance);\n                    while (distance !== 0) {\n                        distance--;\n                        let el = this.element.find('.search-view-menu li.active');\n                        if (el.length) {\n                            el.removeClass('active');\n                            if (fw) {\n                                el = el.next();\n                            }\n                            else {\n                                el = el.prev();\n                            }\n                            el.addClass('active');\n                        }\n                        else {\n                            if (fw) {\n                                el = this.element.find('.search-view-menu > li:first');\n                            }\n                            else {\n                                el = this.element.find('.search-view-menu > li:last');\n                            }\n                            el.addClass('active');\n                        }\n                    }\n                }\n                update() {\n                    if (this.groupLength !== this._groupLength) {\n                        this._groupLength = this.groupLength;\n                        this.scope.action.applyGroups(this.groupBy(), this.getParams());\n                    }\n                    else\n                        this.scope.action.setSearchParams(this.getParams());\n                }\n                groupBy() {\n                    return this.facetGrouping.values.map(obj => obj._ref.name);\n                }\n                show() {\n                    let shouldApply = false;\n                    if (!this.$items) {\n                        this.$items = [].concat(this.fields);\n                        shouldApply = true;\n                    }\n                    for (let obj of this.$items)\n                        if (obj.expanded) {\n                            obj.expanded = false;\n                            shouldApply = true;\n                        }\n                    if (shouldApply)\n                        this.scope.$apply();\n                    this.menu.show();\n                    this.first();\n                }\n                close() {\n                    this.$items = null;\n                    this.menu.hide();\n                    this.reset();\n                    this.input.val('');\n                }\n                reset() {\n                    for (let i of this.fields)\n                        if (i && i.children && i.children.length)\n                            i.expanded = false;\n                }\n            }\n            class SearchViewComponent {\n                constructor() {\n                    this.restrict = 'E';\n                    this.templateUrl = 'view.search.jinja2';\n                    this.replace = true;\n                    this.scope = false;\n                }\n            }\n            class SearchViewArea {\n                constructor() {\n                    this.restrict = 'A';\n                    this.scope = false;\n                }\n                link(scope, el, attrs) {\n                    let view = scope.action.views.search;\n                    scope.action.searchView = new SearchView(scope, el, view);\n                    if (scope.action.context.default_search) {\n                        scope.action.searchView.load(scope.action.context.default_search);\n                    }\n                }\n            }\n            Katrid.UI.uiKatrid.controller('SearchMenuController', ['$scope', function ($scope) {\n                }]);\n            Katrid.UI.uiKatrid.directive('searchView', SearchViewComponent);\n            Katrid.UI.uiKatrid.directive('searchViewArea', SearchViewArea);\n        })(Views = Forms.Views || (Forms.Views = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Views;\n        (function (Views) {\n            class ViewInfo {\n                constructor(info) {\n                    this._info = info;\n                    this.fields = info.fields;\n                    this.content = info.content;\n                    this.toolbar = info.toolbar;\n                }\n            }\n            Views.ViewInfo = ViewInfo;\n        })(Views = Forms.Views || (Forms.Views = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Widgets;\n        (function (Widgets) {\n            let WIDGET_COUNT = 0;\n            let DEFAULT_COLS = {\n                'BooleanField': 3,\n                'DecimalField': 3,\n                'FloatField': 3,\n                'DateField': 3,\n                'DateTimeField': 3,\n                'IntegerField': 3,\n                'SmallIntegerField': 3,\n                'TimeField': 3,\n                'CharField': 3,\n                'OneToManyField': 12\n            };\n            class Field {\n                constructor(scope, attrs, field, element) {\n                    this.attrs = attrs;\n                    this.scope = scope;\n                    this.templAttrs = {};\n                    this.wAttrs = {};\n                    this.field = field;\n                    this.element = element;\n                    this.content = element.html();\n                    this.spanPrefix = '';\n                    if ((field.depends != null) && field.depends.length)\n                        scope.dataSource.addFieldWatcher(field);\n                    if (attrs.ngShow)\n                        this.templAttrs['ng-show'] = attrs.ngShow;\n                    if (attrs.ngReadonly || field.readonly)\n                        this.templAttrs['ng-readonly'] = attrs.ngReadonly || field.readonly;\n                    if (field.attrs)\n                        for (let k of field.attrs) {\n                            let v = field.attrs[k];\n                            if (k.startsWith('container') || ((k === 'ng-show') && !attrs.ngShow)) {\n                                this.templAttrs[k] = v;\n                            }\n                        }\n                    if (attrs.ngFieldChange) {\n                        this.wAttrs['ng-change'] = attrs.ngFieldChange;\n                    }\n                    let cols = attrs.cols;\n                    if (!cols) {\n                        if (field.type === 'CharField')\n                            if (field.max_length && (field.max_length < 30))\n                                cols = 3;\n                        if (!cols)\n                            cols = DEFAULT_COLS[field.type] || 6;\n                    }\n                    this.col = cols;\n                    this.classes = ['form-field'];\n                    if (field.onchange)\n                        scope.$watch();\n                }\n                static get tag() {\n                    return 'input';\n                }\n                fieldChangeEvent() {\n                }\n                get caption() {\n                    return this.element.attr('label') || this.field.caption;\n                }\n                renderTo(templTag, inplaceEditor = false, cls = '') {\n                    let templAttrs = [];\n                    for (let [k, v] of Object.entries(this.templAttrs))\n                        templAttrs.push(k + '=' + '\"' + v + '\"');\n                    if (inplaceEditor)\n                        return `<${templTag} class=\"${cls}\" ${templAttrs.join('')}>${this.template(this.scope, this.element, this.attrs, this.field)}</${templTag}>`;\n                    return `<${templTag} class=\"${this.field.type} section-field-${this.field.name} form-group\" ${templAttrs.join('')}>` +\n                        this.template(this.scope, this.element, this.attrs, this.field) +\n                        `</${templTag}>`;\n                }\n                get ngModel() {\n                    return `record.${this.field.name}`;\n                }\n                get id() {\n                    if (!this._id)\n                        this._id = ++WIDGET_COUNT;\n                    return `katrid-input-${this._id.toString()}`;\n                }\n                widgetAttrs(...args) {\n                    let v;\n                    const r = this.wAttrs;\n                    if (this.field.required) {\n                        r['required'] = null;\n                    }\n                    r['ng-model'] = this.ngModel;\n                    if (this.field.attrs) {\n                        for (let attr of Object.keys(this.field.attrs)) {\n                            v = this.field.attrs[attr];\n                            if (!attr.startsWith('container-') && (attr !== 'ng-show') && (attr !== 'ng-readonly')) {\n                                r[attr] = v;\n                            }\n                        }\n                    }\n                    if (!_.isUndefined(this.attrs.$attr))\n                        for (let attr of Object.keys(this.attrs.$attr)) {\n                            let attrName = this.attrs.$attr[attr];\n                            if (!attrName.startsWith('container-') && (attr !== 'ngShow') && (attr !== 'ngReadonly')) {\n                                v = this.attrs[attr];\n                                if (attrName.startsWith('field-')) {\n                                    attrName = attrName.substr(6, attrName.length - 6);\n                                }\n                                else if (attrName === 'class')\n                                    this.classes.push(v);\n                                r[attrName] = v;\n                            }\n                        }\n                    if ((this.attrs.readonly != null) || this.field.readonly)\n                        r['readonly'] = '';\n                    if (this.classes)\n                        r['class'] = this.classes.join(' ');\n                    return r;\n                }\n                _getWidgetAttrs(scope, el, attrs, field) {\n                    let html = '';\n                    let attributes = this.widgetAttrs(scope, el, attrs, field);\n                    for (let att in attributes) {\n                        const v = attributes[att];\n                        html += ` ${att}`;\n                        if (v || (v === false)) {\n                            if (_.isString(v) && (v.indexOf('\"') > -1)) {\n                                html += `='${v}'`;\n                            }\n                            else {\n                                html += `=\"${v}\"`;\n                            }\n                        }\n                    }\n                    if (this.placeholder)\n                        html += ` placeholder=\"${this.placeholder}\" `;\n                    return html;\n                }\n                innerHtml() {\n                    return '';\n                }\n                labelTemplate() {\n                    const placeholder = '';\n                    const label = this.caption;\n                    if (this.attrs.nolabel === 'placeholder') {\n                        this.placeholder = label;\n                        return '';\n                    }\n                    else if (!_.isUndefined(this.attrs.nolabel))\n                        return '';\n                    return `<label for=\"${this.id}\" class=\"form-label\">${label}</label>`;\n                }\n                get emptyText() {\n                    if (this.inplaceEditor)\n                        return '';\n                    return '--';\n                }\n                get readOnlyClass() {\n                    if (this.inplaceEditor || this.spanPrefix === '::')\n                        return 'grid-field-readonly';\n                    return 'form-field-readonly';\n                }\n                spanTemplate(scope, el, attrs, field) {\n                    return `<span class=\"${this.readOnlyClass}\">{{ ${this.spanPrefix}record.${this.field.name}.toString() || '${this.emptyText}' }}</span>`;\n                }\n                widgetTemplate() {\n                    let html = `<${this.constructor.tag} id=\"${this.id}\" name=\"${this.field.name}\" ${this._getWidgetAttrs()}>`;\n                    const inner = this.innerHtml();\n                    if (inner)\n                        html += inner + `</${this.constructor.tag}>`;\n                    return html;\n                }\n                template(...args) {\n                    let label = '';\n                    let span = this.spanTemplate();\n                    if (!this.inplaceEditor) {\n                        label = this.labelTemplate();\n                    }\n                    let widget = this.widgetTemplate();\n                    if (this.inline === 'inline')\n                        widget = `<div ng-if=\"dataSource.changing && dataSource.recordIndex === $index\">${widget}</div>`;\n                    return `<div>${label}${span}${widget}</div>`;\n                }\n                link(scope, el, attrs, $compile, field) {\n                    if (field.depends) {\n                        return (() => {\n                            const result = [];\n                            for (let dep of Array.from(field.depends)) {\n                                if (!Array.from(scope.dataSource.fieldChangeWatchers).includes(dep)) {\n                                    scope.dataSource.fieldChangeWatchers.push(dep);\n                                    result.push(scope.$watch(`record.${dep}`, function (newValue, oldValue) {\n                                        if ((newValue !== oldValue) && scope.dataSource.changing) {\n                                            return scope.model.onFieldChange(dep, scope.record)\n                                                .done(scope.dataSource.onFieldChange);\n                                        }\n                                    }));\n                                }\n                            }\n                            return result;\n                        })();\n                    }\n                }\n                th() {\n                    let cls = `${this.field.type} list-column`;\n                    let lbl = this.element.attr('label') || `{{view.fields.${this.field.name}.caption}}`;\n                    return `<th class=\"${cls}\" name=\"${this.field.name}\"><span>${lbl}</span></th>`;\n                }\n                _gridEditor(cls) {\n                    return this.renderTo('section', true, cls);\n                }\n                _tdContent() {\n                    return this.spanTemplate();\n                }\n                _td(cls) {\n                    let content;\n                    if (this.inplaceEditor)\n                        content = this._gridEditor(cls);\n                    else {\n                        this.spanPrefix = '::';\n                        content = this.spanTemplate();\n                    }\n                    return `<td class=\"${cls}\">${content}</td>`;\n                }\n            }\n            Widgets.Field = Field;\n            class InputWidget extends Field {\n                static get tag() {\n                    return 'input input-field';\n                }\n                constructor(scope, attrs, field, element) {\n                    super(scope, attrs, field, element);\n                    this.classes.push('form-control');\n                }\n                get type() {\n                    return 'text';\n                }\n                widgetTemplate() {\n                    let type = this.type;\n                    const prependIcon = this.attrs.icon;\n                    let html = `<${this.constructor.tag} id=\"${this.id}\" type=\"${this.type}\" name=\"${this.field.name}\" ${this._getWidgetAttrs()}>`;\n                    if (prependIcon)\n                        return `<label class=\"prepend-icon\"><i class=\"icon ${prependIcon}\"></i>${html}</label>`;\n                    const inner = this.innerHtml();\n                    if (inner)\n                        html += inner + `</${this.constructor.tag}>`;\n                    return html;\n                }\n            }\n            class StringField extends InputWidget {\n                widgetAttrs() {\n                    const attributes = super.widgetAttrs();\n                    if (this.field.maxLength)\n                        attributes['maxlength'] = this.field.maxLength.toString();\n                    return attributes;\n                }\n            }\n            Widgets.StringField = StringField;\n            class NumericField extends InputWidget {\n                static get tag() {\n                    return 'input decimal';\n                }\n                get type() {\n                    if (Katrid.settings.ui.isMobile)\n                        return 'number';\n                    return 'text';\n                }\n                spanTemplate() {\n                    return `<span class=\"${this.readOnlyClass}\">{{ ${this.spanPrefix}(record.${this.field.name}|number) || '${this.emptyText}' }}</span>`;\n                }\n            }\n            Widgets.NumericField = NumericField;\n            class IntegerField extends NumericField {\n                static get tag() {\n                    return 'input decimal decimal-places=\"0\"';\n                }\n            }\n            Widgets.IntegerField = IntegerField;\n            class TimeField extends InputWidget {\n                get type() {\n                    return 'time';\n                }\n            }\n            Widgets.TimeField = TimeField;\n            class SelectionField extends InputWidget {\n                static get tag() {\n                    return 'select';\n                }\n                spanTemplate() {\n                    return `<span class=\"${this.readOnlyClass}\">{{ ${this.spanPrefix}view.fields.${this.field.name}.displayChoices[record.${this.field.name}] || '${this.emptyText}' }}</span>`;\n                }\n                innerHtml() {\n                    return `<option ng-repeat=\"choice in view.fields.${this.field.name}.choices\" value=\"{{choice[0]}}\">{{choice[1]}}</option>`;\n                }\n            }\n            Widgets.SelectionField = SelectionField;\n            class ForeignKey extends Field {\n                static get tag() {\n                    return 'input fk-autocomplete';\n                }\n                spanTemplate() {\n                    let allowOpen = true;\n                    if (((this.attrs.allowOpen != null) && (this.attrs.allowOpen === 'false')) || ((this.attrs.allowOpen == null) && this.field.attrs && (this.field.attrs['allow-open'] === false)))\n                        allowOpen = false;\n                    if (!allowOpen || this.inList)\n                        return `<span class=\"${this.readOnlyClass}\"><a href=\"javascript:void(0)\">{{ ${this.spanPrefix}record.${this.field.name}[1] || '${this.emptyText}' }}</a></span>`;\n                    return `<span class=\"${this.readOnlyClass}\"><a href=\"#/action/${this.field.model}/view/?id={{ ${this.spanPrefix}record.${this.field.name}[0] }}\" ng-click=\"action.openObject('${this.field.model}', record.${this.field.name}[0], $event, '${this.field.caption}')\">{{ ${this.spanPrefix}record.${this.field.name}[1] }}</a><span ng-if=\"!record.${this.field.name}[1]\">--</span></span>`;\n                }\n                get type() {\n                    return 'text';\n                    return 'hidden';\n                }\n                _tdContent() {\n                    return `{{record.${this.field.name}[1]}}`;\n                }\n            }\n            Widgets.ForeignKey = ForeignKey;\n            class TextField extends StringField {\n                static get tag() {\n                    return 'textarea';\n                }\n            }\n            Widgets.TextField = TextField;\n            class XmlField extends TextField {\n            }\n            Widgets.XmlField = XmlField;\n            class FloatField extends NumericField {\n                static get tag() {\n                    if (Katrid.settings.ui.isMobile)\n                        return 'input';\n                    return 'input decimal';\n                }\n                get type() {\n                    if (Katrid.settings.ui.isMobile)\n                        return 'number';\n                    return 'text';\n                }\n                spanTemplate() {\n                    let decimalPlaces = this.attrs.decimalPlaces || 2;\n                    return `<span class=\"${this.readOnlyClass}\">{{ ${this.spanPrefix}(record.${this.field.name}|number:${decimalPlaces}) || '${this.emptyText}' }}</span>`;\n                }\n                _tdContent() {\n                    let filter;\n                    let decimalPlaces = this.element.attr('decimal-places');\n                    if (decimalPlaces)\n                        filter `number:${decimalPlaces}`;\n                    else\n                        filter = `numberFormat:${this.element.attr('max-digits') || 6}`;\n                    return `{{::record.${this.field.name}|${filter} }}`;\n                }\n            }\n            Widgets.FloatField = FloatField;\n            class DecimalField extends FloatField {\n                spanTemplate() {\n                    let maxDigits = this.attrs.maxDigits;\n                    let fmt = 'number';\n                    if (maxDigits)\n                        fmt = 'numberFormat';\n                    else\n                        maxDigits = this.attrs.decimalPlaces || 2;\n                    return `<span class=\"${this.readOnlyClass}\">{{ ${this.spanPrefix}(record.${this.field.name}|${fmt}:${maxDigits}) || '${this.emptyText}' }}</span>`;\n                }\n            }\n            Widgets.DecimalField = DecimalField;\n            class DateField extends TextField {\n                static get tag() {\n                    return 'input date-input';\n                }\n                get type() {\n                    return 'date';\n                }\n                spanTemplate() {\n                    return `<span class=\"${this.readOnlyClass}\">{{ ${this.spanPrefix}(record.${this.field.name}|date:'${Katrid.i18n.gettext('yyyy-mm-dd').replace(/[m]/g, 'M')}') || '${this.emptyText}' }}</span>`;\n                }\n            }\n            Widgets.DateField = DateField;\n            class DateTimeField extends TextField {\n                static get tag() {\n                    return 'input date-input';\n                }\n                get type() {\n                    return 'datetime-local';\n                }\n                spanTemplate() {\n                    return `<span class=\"${this.readOnlyClass}\">{{ ${this.spanPrefix}(record.${this.field.name}|date:'${Katrid.i18n.gettext('yyyy-MM-dd hh:mma')}') || '${this.emptyText}' }}</span>`;\n                }\n            }\n            class OneToManyField extends Field {\n                static get tag() {\n                    return 'grid';\n                }\n                spanTemplate() {\n                    return '';\n                }\n                innerHtml() {\n                    return this.content;\n                    let html = this.element.html();\n                    if (html)\n                        return html;\n                    return '';\n                }\n            }\n            Widgets.OneToManyField = OneToManyField;\n            class ManyToManyField extends Field {\n                static get tag() {\n                    return 'input foreignkey multiple';\n                }\n                spanTemplate() {\n                    return `<span class=\"${this.readOnlyClass}\">{{ ${this.spanPrefix}record.${this.field.name}|m2m }}</span>`;\n                }\n                get type() {\n                    return 'hidden';\n                }\n            }\n            Widgets.ManyToManyField = ManyToManyField;\n            class BooleanField extends InputWidget {\n                spanTemplate() {\n                    return `<span class=\"${this.readOnlyClass} bool-text\">\n  {{${this.spanPrefix}record.${this.field.name} ? '${Katrid.i18n.gettext('yes')}' : '${Katrid.i18n.gettext('no')}'}}\n  </span>`;\n                }\n                get type() {\n                    return 'checkbox';\n                }\n                widgetTemplate() {\n                    let html = super.widgetTemplate();\n                    html = `<label class=\"checkbox\" ng-show=\"dataSource.changing\">${html}`;\n                    if (this.field.help_text) {\n                        html += this.field.help_text;\n                    }\n                    else {\n                        html += this.field.caption;\n                    }\n                    html += '<i></i></label>';\n                    return html;\n                }\n                labelTemplate() {\n                    if (this.field.help_text)\n                        return super.labelTemplate();\n                    return `<label for=\"${this.id}\" class=\"form-label form-label-checkbox\"><span>${this.caption}</span>&nbsp;</label>`;\n                }\n            }\n            class FileField extends InputWidget {\n                static get tag() {\n                    return 'input file-reader';\n                }\n                get type() {\n                    return 'file';\n                }\n            }\n            Widgets.FileField = FileField;\n            class ImageField extends FileField {\n                static get tag() {\n                    return 'input file-reader accept=\"image/*\"';\n                }\n                spanTemplate() {\n                    return '';\n                }\n                widgetTemplate() {\n                    let html = super.widgetTemplate();\n                    let imgSrc = this.attrs.ngEmptyImage || (this.attrs.emptyImage && (\"'\" + this.attrs.emptyImage + \"'\")) || \"'/static/web/assets/img/no-image.png'\";\n                    html = `<div class=\"image-box image-field\">\n  <img ng-src=\"{{ record.${this.field.name} || ${imgSrc} }}\" />\n    <div class=\"text-right image-box-buttons\">\n    <button class=\"btn btn-default\" type=\"button\" title=\"${Katrid.i18n.gettext('Change')}\" onclick=\"$(this).closest('.image-box').find('input').trigger('click')\"><i class=\"fa fa-pencil\"></i></button>\n    <button class=\"btn btn-default\" type=\"button\" title=\"${Katrid.i18n.gettext('Clear')}\" ng-click=\"record[this.field.name] = null\"><i class=\"fa fa-trash\"></i></button>\n    </div>\n      ${html}</div>`;\n                    return html;\n                }\n            }\n            Widgets.ImageField = ImageField;\n            class PasswordField extends InputWidget {\n                get type() {\n                    return 'password';\n                }\n                spanTemplate() {\n                    return `<span class=\"form-field-readonly\">*******************</span>`;\n                }\n            }\n            class SortableField extends Field {\n                constructor(scope, attrs, field, element) {\n                    super(scope, attrs, field, element);\n                    this.col = null;\n                }\n                static get tag() {\n                    return 'sortable-field';\n                }\n                get type() {\n                    return 'hidden';\n                }\n                th() {\n                    return `<th class=\"list-column-sortable\" name=\"${this.field.name}\"></th>`;\n                }\n                spanTemplate() {\n                    return `<sortable-field id=\"${this.id}\" name=\"${this.field.name}\" ng-model=\"record.${this.field.name}\"/>`;\n                }\n            }\n            Widgets.SortableField = SortableField;\n            Object.assign(Katrid.Forms.Widgets.registry, {\n                Field,\n                InputWidget,\n                StringField,\n                IntegerField,\n                SelectionField,\n                ForeignKey,\n                TextField,\n                DecimalField,\n                FloatField,\n                DateField,\n                DateTimeField,\n                TimeField,\n                BooleanField,\n                OneToManyField,\n                ManyToManyField,\n                FileField,\n                PasswordField,\n                ImageField,\n                SortableField,\n                XmlField,\n                input: InputWidget,\n                string: StringField,\n                integer: IntegerField,\n                selection: SelectionField,\n                text: TextField,\n                decimal: DecimalField,\n                float: FloatField,\n                file: FileField,\n                boolean: BooleanField,\n                password: PasswordField,\n                image: ImageField,\n                sortable: SortableField,\n            });\n        })(Widgets = Forms.Widgets || (Forms.Widgets = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Forms;\n    (function (Forms) {\n        var Widgets;\n        (function (Widgets) {\n            class OneToManyWidget extends Widgets.FieldWidget {\n                create() {\n                    super.create();\n                    this._viewMode = this._fieldEl.getAttribute('view-mode') || 'list';\n                    this._model = new Katrid.Services.Model(this.field.info.model);\n                    this._scope = this.actionView.action.scope.$new(true);\n                    this._action = new OneToManyAction(this);\n                    let views = {};\n                    let template = this._fieldEl.querySelector('template');\n                    if (template)\n                        for (let child of template.content.children)\n                            views[child.tagName.toLowerCase()] = child.cloneNode(true);\n                    this._dataSource = new Katrid.Data.DataSource({\n                        model: this._model,\n                        scope: this._scope,\n                        master: this.actionView.action.dataSource,\n                        field: this.field,\n                        action: this._action,\n                    });\n                    this.loadViews(views);\n                }\n                get dataSource() {\n                    return this._dataSource;\n                }\n                get scope() {\n                    return this._scope;\n                }\n                get model() {\n                    return this._model;\n                }\n                async loadViews(preLoadedViews) {\n                    let viewModes = { form: null };\n                    viewModes[this._viewMode] = null;\n                    let res = await this.model.loadViews({ views: viewModes });\n                    this.views = res.views;\n                    let viewInfo = this._viewInfo = res.views[this._viewMode];\n                    let relField = viewInfo.fields[this.field.info.field];\n                    if (relField)\n                        relField.visible = false;\n                    for (let k of Object.keys(preLoadedViews)) {\n                        if (!(k in res.views))\n                            res.views[k] = { fields: res.fields };\n                        res.views[k].content = preLoadedViews[k];\n                        res.views[k].fields = res.fields;\n                    }\n                    this._scope.action = this._action;\n                    this.view = new Katrid.Forms.Views.registry[this._viewMode]({\n                        action: this._action,\n                        viewInfo,\n                    });\n                    this._scope.views = res.views;\n                    this._scope.view = this.view;\n                    this.render(this.view.render(this)[0]);\n                    this.querySelector('.content');\n                }\n                render(elView) {\n                    let tb = this.renderToolbar();\n                    Katrid.Core.$compile(tb)(this._scope);\n                    this.appendChild(tb);\n                    this.appendChild(elView);\n                }\n                renderToolbar() {\n                    let tb = document.createElement('div');\n                    tb.classList.add('grid-toolbar', 'col-12');\n                    let btn = document.createElement('button');\n                    btn.setAttribute('type', 'button');\n                    btn.classList.add('btn', 'btn-xs', 'btn-outline-secondary', 'grid-editor-control');\n                    btn.innerText = Katrid.i18n.gettext('Add');\n                    btn.setAttribute('ng-if', '$parent.action.dataSource.changing');\n                    tb.appendChild(btn);\n                    btn.addEventListener('click', () => this._action.addItem());\n                    return tb;\n                }\n                get viewMode() {\n                    return this._viewMode;\n                }\n                async showDialog() {\n                    let formInfo = this.views.form;\n                    let relField = formInfo.fields[this.field.info.field];\n                    if (relField)\n                        relField.visible = false;\n                    let view = new Katrid.Forms.Views.FormDialog({\n                        action: this._action,\n                        viewInfo: formInfo,\n                        templateUrl: 'view.form.empty.jinja2',\n                    });\n                    let el = view.prepare();\n                    this._action.view = view;\n                    this._scope.view = view;\n                    let dlg = $(Katrid.app.getTemplate('view.form.dialog.jinja2', { caption: view.caption || this.field.caption }));\n                    this.dlg = dlg;\n                    dlg[0].action = this._action;\n                    dlg.find('.modal-body').append(el);\n                    dlg.modal('show');\n                    dlg.on('hidden', () => dlg.data('modal', null));\n                    Katrid.Core.$compile(dlg)(this._scope);\n                    this._action.form = angular.element(this._action.$form).controller('form');\n                }\n                destroy() {\n                    super.destroy();\n                    this._dataSource.destroy();\n                }\n            }\n            Widgets.OneToManyWidget = OneToManyWidget;\n            Katrid.define('onetomany-field', OneToManyWidget);\n            class RadioField extends Widgets.FieldWidget {\n                create() {\n                    super.create();\n                    let label = document.createElement('div');\n                    label.setAttribute('ng-repeat', `choice in view.viewInfo.fields.${this.field.name}.choices`);\n                    label.classList.add('radio-button', 'radio-inline');\n                    let css = this._fieldEl.getAttribute('class');\n                    if (css)\n                        label.classList.add(css.split(' '));\n                    let input = document.createElement('input');\n                    let id = `id-${this.field.name}-${this._id}-\\${$index}`;\n                    input.setAttribute('id', id);\n                    input.setAttribute('type', 'radio');\n                    input.setAttribute('ng-model', `$parent.record.${this.field.name}`);\n                    input.setAttribute('ng-value', `choice[0]`);\n                    let txt = document.createElement('label');\n                    txt.setAttribute('ng-bind', 'choice[1]');\n                    txt.setAttribute('for', id);\n                    label.appendChild(input);\n                    label.appendChild(txt);\n                    this.appendChild(label);\n                }\n            }\n            class OneToManyAction {\n                constructor(field) {\n                    this.field = field;\n                    this.scope = field.scope;\n                }\n                get dataSource() {\n                    return this.field.dataSource;\n                }\n                listRowClick(index, record, event) {\n                    this.editItem(record);\n                }\n                async addItem() {\n                    this.field.showDialog();\n                    await this.field.dataSource.insert();\n                    this.field.dataSource.record[this.field.info.field] = this.field.actionView.action.dataSource.recordId;\n                }\n                editItem(record) {\n                    console.log('item click');\n                    this.field.scope.record = record;\n                    if (this.field.actionView.action.dataSource.changing)\n                        this.field.dataSource.edit();\n                    this.field.showDialog();\n                }\n                setDirty() {\n                    console.log('set dirty');\n                }\n                saveAndClose() {\n                    this.field.dlg.modal('hide');\n                    this.field.dataSource.flush();\n                    this.scope.records.push(this.scope.record);\n                }\n            }\n            Katrid.define('radio-field', RadioField);\n        })(Widgets = Forms.Widgets || (Forms.Widgets = {}));\n    })(Forms = Katrid.Forms || (Katrid.Forms = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Services;\n    (function (Services) {\n        class Service {\n            constructor(name) {\n                this.name = name;\n            }\n            static get url() {\n                return '/api/rpc/';\n            }\n            ;\n            static $fetch(url, config, params) {\n                if (params) {\n                    url = new URL(url);\n                    Object.entries(params).map((k, v) => url.searchParams.append(k, v));\n                }\n                $(Katrid).trigger('fetch.before');\n                return fetch(url, config)\n                    .then(response => {\n                    $(Katrid).trigger('fetch.done');\n                    return response;\n                });\n            }\n            static $post(url, data, params) {\n                return this.$fetch(url, {\n                    method: 'POST',\n                    credentials: \"same-origin\",\n                    body: JSON.stringify(data),\n                    headers: {\n                        'content-type': 'application/json',\n                    }\n                }, params)\n                    .then(res => res.json());\n            }\n            delete(name, params, data) {\n            }\n            get(name, params) {\n                const methName = this.name ? this.name + '/' : '';\n                const rpcName = Katrid.settings.server + this.constructor.url + methName + name + '/';\n                return $.get(rpcName, params);\n            }\n            post(name, data, params) {\n                let context;\n                if (Katrid.app)\n                    context = Katrid.app.context;\n                if (!data)\n                    data = {};\n                if (context)\n                    data.context = context;\n                data = {\n                    method: name,\n                    params: data,\n                };\n                const methName = this.name ? this.name + '/' : '';\n                let rpcName = Katrid.settings.server + this.constructor.url + methName + name + '/';\n                if (params) {\n                    rpcName += `?${$.param(params)}`;\n                }\n                return new Promise((resolve, reject) => {\n                    fetch(rpcName, {\n                        method: 'POST',\n                        body: JSON.stringify(data),\n                        headers: {\n                            'Accept': 'application/json',\n                            'Content-Type': 'application/json',\n                        },\n                    })\n                        .then(res => res.json())\n                        .then(res => {\n                        if (res.error)\n                            reject(res.error);\n                        else {\n                            if (res.result) {\n                                let messages;\n                                if (res.result.messages)\n                                    messages = res.result.messages;\n                                else\n                                    messages = [];\n                                if (res.result.message)\n                                    messages.push(res.result.message);\n                                else if (res.result.warn)\n                                    messages.push({ type: 'warn', message: res.result.warn });\n                                else if (res.result.info)\n                                    messages.push({ type: 'info', message: res.result.info });\n                                else if (res.result.error)\n                                    messages.push({ type: 'error', message: res.result.error });\n                                messages.forEach(function (msg) {\n                                    if (_.isString(msg))\n                                        Katrid.Forms.Dialogs.Alerts.success(msg);\n                                    else if (msg.type === 'warn')\n                                        Katrid.Forms.Dialogs.Alerts.warn(msg.message);\n                                    else if (msg.type === 'info')\n                                        Katrid.Forms.Dialogs.Alerts.info(msg.message);\n                                    else if ((msg.type === 'error') || (msg.type === 'danger'))\n                                        Katrid.Forms.Dialogs.Alerts.error(msg.message);\n                                });\n                            }\n                            resolve(res.result);\n                        }\n                    })\n                        .catch(res => reject(res));\n                });\n            }\n        }\n        Services.Service = Service;\n        class Data extends Service {\n            static get url() {\n                return '/web/data/';\n            }\n            ;\n            reorder(model, ids, field = 'sequence', offset = 0) {\n                return this.post('reorder', { args: [model, ids, field, offset] });\n            }\n        }\n        Services.Data = Data;\n        class Attachments {\n            static destroy(id) {\n                let svc = new Katrid.Services.Model('ir.attachment');\n                svc.destroy(id);\n            }\n            static upload(file, scope = null) {\n                let data = new FormData();\n                if (!scope)\n                    scope = angular.element(file).scope();\n                console.log(file);\n                data.append('model', scope.model.name);\n                data.append('id', scope.recordId);\n                for (let f of file.files)\n                    data.append('attachment', f, f.name);\n                return $.ajax({\n                    url: '/web/content/upload/',\n                    type: 'POST',\n                    data: data,\n                    processData: false,\n                    contentType: false\n                })\n                    .done((res) => {\n                    if (!scope.attachments)\n                        scope.attachments = [];\n                    if (res && res.result)\n                        for (let obj of res.result)\n                            scope.attachments.push(obj);\n                    scope.$apply();\n                });\n            }\n        }\n        Services.Attachments = Attachments;\n        class Auth extends Service {\n            static login(username, password) {\n                return this.$post('/web/login/', { username: username, password: password });\n            }\n        }\n        class Upload {\n            static sendFile(service, file) {\n                let form = new FormData();\n                form.append('files', file.files[0]);\n                let scope = angular.element(file).scope();\n                let url = `/web/file/upload/${scope.model.name}/${service}/`;\n                if (scope.record && scope.record.id)\n                    form.append('id', scope.record.id);\n                let dataSource = scope.action.dataSource;\n                if (!dataSource) {\n                    dataSource = scope.$parent.dataSource;\n                    let s = scope.$parent;\n                    while (s) {\n                        dataSource = s.dataSource;\n                        if (dataSource)\n                            break;\n                        s = scope.$parent;\n                    }\n                }\n                $.ajax({\n                    url: url,\n                    data: form,\n                    processData: false,\n                    contentType: false,\n                    type: 'POST',\n                    success: (data) => {\n                        dataSource.refresh();\n                        Katrid.Forms.Dialogs.Alerts.success('Operação realizada com sucesso.');\n                    }\n                });\n            }\n            static uploadTo(url, file) {\n                let form = new FormData();\n                form.append('files', file.files[0]);\n                return $.ajax({\n                    url: url,\n                    data: form,\n                    processData: false,\n                    contentType: false,\n                    type: 'POST',\n                    success: (data) => {\n                        Katrid.Forms.Dialogs.Alerts.success('Arquivo enviado com sucesso!');\n                    }\n                });\n            }\n        }\n        Services.data = new Data('');\n        function post(url, data) {\n            return fetch(url, {\n                method: 'POST',\n                body: JSON.stringify(data),\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json',\n                },\n            }).then(res => res.json());\n        }\n        Services.post = post;\n    })(Services = Katrid.Services || (Katrid.Services = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Services;\n    (function (Services) {\n        class Model extends Services.Service {\n            searchName(name) {\n                let args = { name };\n                return this.post('search_name', args);\n            }\n            createName(name) {\n                let kwargs = { name };\n                return this.post('create_name', { kwargs: kwargs });\n            }\n            search(data, params) {\n                return this.post('search', { kwargs: data }, params);\n            }\n            destroy(id) {\n                if (!_.isArray(id))\n                    id = [id];\n                return this.post('destroy', { kwargs: { ids: id } });\n            }\n            getById(id) {\n                return this.post('get', { args: [id] });\n            }\n            getDefaults(kwargs) {\n                return this.post('get_defaults', { kwargs });\n            }\n            copy(id) {\n                return this.post('copy', { args: [id] });\n            }\n            static _prepareFields(res) {\n                if (res) {\n                    res.fields = Katrid.Data.Fields.fromArray(res.fields);\n                    res.fieldList = Object.values(res.fields);\n                    if (res.views) {\n                        Object.values(res.views).map((v) => v.fields = Katrid.Data.Fields.fromArray(v.fields));\n                        Object.keys(res.views).map(k => res.views[k] = new Katrid.Forms.Views.ViewInfo(res.views[k]));\n                    }\n                }\n                return res;\n            }\n            getViewInfo(data) {\n                return this.post('get_view_info', { kwargs: data })\n                    .then(this.constructor._prepareFields);\n            }\n            async loadViews(data) {\n                return this.post('load_views', { kwargs: data })\n                    .then(this.constructor._prepareFields);\n            }\n            getFieldsInfo(data) {\n                return this.post('get_fields_info', { kwargs: data })\n                    .then(this.constructor._prepareFields);\n            }\n            getFieldChoices(field, term, kwargs) {\n                return this.post('get_field_choices', { args: [field, term], kwargs: kwargs });\n            }\n            doViewAction(data) {\n                return this.post('do_view_action', { kwargs: data });\n            }\n            write(data, params) {\n                return new Promise((resolve, reject) => {\n                    this.post('write', { kwargs: { data } }, params)\n                        .then((res) => {\n                        Katrid.Forms.Dialogs.Alerts.success(Katrid.i18n.gettext('Record saved successfully.'));\n                        resolve(res);\n                    })\n                        .catch(res => {\n                        if ((res.status === 500) && res.responseText)\n                            alert(res.responseText);\n                        else\n                            Katrid.Forms.Dialogs.Alerts.error(Katrid.i18n.gettext('Error saving record changes'));\n                        reject(res);\n                    });\n                });\n            }\n            groupBy(grouping, params) {\n                return this.post('group_by', { kwargs: { grouping, params } });\n            }\n            autoReport() {\n                return this.post('auto_report', { kwargs: {} });\n            }\n            rpc(meth, args, kwargs) {\n                return new Promise((resolve, reject) => {\n                    this.post(meth, { args: args, kwargs: kwargs })\n                        .then((res) => {\n                        if (res && res.open)\n                            window.open(res.open);\n                        resolve(res);\n                    })\n                        .catch(res => {\n                        if (res.messages && _.isObject(res.messages)) {\n                            for (let msg of Object.values(res.messages))\n                                Katrid.Forms.Dialogs.Alerts.error(msg.join('\\n'));\n                        }\n                        else\n                            Katrid.Forms.Dialogs.Alerts.error(res.message);\n                        reject(res);\n                    });\n                });\n            }\n        }\n        Services.Model = Model;\n        class Query extends Model {\n            constructor() {\n                super('ir.query');\n            }\n            static read(config) {\n                let details, id, params;\n                if (_.isObject(config)) {\n                    details = config.details;\n                    params = config.params;\n                    id = config.id;\n                }\n                else\n                    id = config;\n                return (new Query()).post('read', { args: [id], kwargs: { with_desc: details, params, as_dict: config.as_dict } });\n            }\n            static all() {\n                return (new Query()).rpc('all');\n            }\n            static executeSql(sql) {\n                return (new Query()).post('execute_sql', { args: [sql] });\n            }\n        }\n        Services.Query = Query;\n        class View extends Model {\n            constructor() {\n                super('ui.view');\n            }\n            fromModel(model) {\n                return this.post('from_model', null, { model });\n            }\n        }\n        class Actions extends Model {\n            static load(action) {\n                let svc = new Model('ir.action');\n                return svc.post('load', { args: [action] });\n            }\n        }\n        Services.Actions = Actions;\n    })(Services = Katrid.Services || (Katrid.Services = {}));\n})(Katrid || (Katrid = {}));\n(function () {\n    class FileManager {\n        constructor(opts) {\n            this.$element = opts.el;\n            this.$scope = opts.scope;\n            this.service = this.$element.attr('service');\n            $.get(this.service)\n                .then(res => {\n                this.$scope.dirs = res.content.filter(obj => obj.type === 'dir');\n                this.$scope.files = res.content.filter(obj => obj.type === 'file');\n                this.$scope.items = res.content;\n                this.$scope.levels[this.$scope.level] = this.$scope.items;\n                this.$scope.$apply();\n            });\n        }\n        getPath(item) {\n            let url = item.name;\n            let parent = item.parent;\n            while (parent) {\n                url = parent.name + '/' + url;\n                parent = parent.parent;\n            }\n            return url;\n        }\n        expand(item) {\n            let url = this.getPath(item);\n            url = this.service + '?path=' + url;\n            $.get(url)\n                .then(res => {\n                this.$scope.items = res.content;\n                this.$scope.dirs = res.content.filter(obj => obj.type === 'dir');\n                this.$scope.files = res.content.filter(obj => obj.type === 'file');\n                res.content.map(obj => obj.parent = item);\n                this.$scope.levels[this.$scope.level] = this.$scope.items;\n                this.$scope.$apply();\n            });\n        }\n    }\n    Katrid.UI.uiKatrid.directive('fileManager', () => ({\n        restrict: 'E',\n        scope: {},\n        templateUrl: 'file-manager.jinja2',\n        link(scope, el) {\n            scope.level = 0;\n            scope.levels = {};\n            let fm = new FileManager({ el, scope });\n            scope.expand = item => {\n                scope.level++;\n                scope.currentItem = item;\n                fm.expand(item);\n                scope.currentPath = fm.getPath(item);\n            };\n            scope.backTo = level => {\n                scope.level = level;\n                console.log('back to', level);\n                scope.items = scope.levels[scope.level];\n                scope.dirs = scope.items.filter(obj => obj.type === 'dir');\n                scope.files = scope.items.filter(obj => obj.type === 'file');\n                scope.currentPath = fm.getPath(scope.items[0]);\n            };\n            scope.uploadFile = file => {\n                console.log('current path', scope.currentPath);\n                Katrid.Services.Upload.uploadTo('/pwapec/file-manager/upload/?path=' + (scope.currentPath || ''), file)\n                    .then(() => {\n                    fm.expand(scope.currentItem);\n                });\n            };\n        }\n    }));\n})();\n(function () {\n    class QueryManager {\n        constructor(app) {\n            this.app = app;\n            this.$scope = app.$scope.$new();\n            this.$scope.queryChange = (query) => this.queryChange(query);\n            this.$scope.search = {};\n            let me = this;\n            this.action = this.$scope.action = {\n                context: {},\n                views: {},\n                async saveSearch(search) {\n                    let svc = new Katrid.Services.Model('ui.filter');\n                    let data = {};\n                    Object.assign(data, search);\n                    data.query = me.$scope.query.id;\n                    if (search.name === null) {\n                        search.name = prompt('Query name', 'current query namne');\n                        search.is_default = false;\n                        search.is_shared = true;\n                    }\n                    if (search.name)\n                        await svc.write([data]);\n                },\n                setSearchParams(params) {\n                    me.$scope.search.params = params;\n                    me.refresh(me.query);\n                },\n                switchView(viewType) {\n                    console.log('set view type', viewType);\n                },\n                orderBy(field) {\n                    if (me.$scope.ordering === field)\n                        me.$scope.reverse = !me.$scope.reverse;\n                    else {\n                        me.$scope.ordering = field;\n                        me.$scope.reverse = false;\n                    }\n                }\n            };\n        }\n        getFilter(field) {\n            if (field.type === 'DateField')\n                return \"|date:'shortDate'\";\n            else if (field.type === 'DateTimeField')\n                return \"|date:'short'\";\n            else if (field.type === 'IntegerField')\n                return \"|number:0\";\n            return \"\";\n        }\n        getSearchView(query) {\n            let s;\n            if (query.params)\n                s = query.params;\n            else {\n                s = `<search>`;\n                for (let f of query.fields)\n                    s += `<field name=\"${f.name}\"/>`;\n                s += '</search>';\n            }\n            let fields = {};\n            for (let f of query.fields)\n                fields[f.name] = Katrid.Data.Fields.Field.fromInfo(f);\n            this.fields = fields;\n            return { content: s, fields };\n        }\n        async queryChange(query) {\n            this.$scope.search = {\n                viewMoreButtons: true,\n            };\n            this.query = query;\n            let res = await this.refresh(query);\n            query.fields = res.fields;\n            this.action.search = this.getSearchView(query);\n            this.action.fieldList = Object.values(this.fields);\n            this.$scope.action.views.search = this.$scope.action.search;\n            this.renderSearch();\n            this.renderTable(res);\n            this.$scope.$apply();\n        }\n        async refresh(query) {\n            let res = await Katrid.Services.Query.read({ id: query.id, details: true, params: this.$scope.search.params });\n            for (let f of res.fields)\n                f.filter = this.getFilter(f);\n            let _toObject = (fields, values) => {\n                let r = {}, i = 0;\n                for (let f of fields) {\n                    r[f.name] = values[i];\n                    i++;\n                }\n                return r;\n            };\n            this.$scope.records = res.data.map(row => _toObject(res.fields, row));\n            this.$scope.$apply();\n            return res;\n        }\n        renderSearch() {\n            let el = this.app.getTemplate('query.manager.search.jinja2');\n            el = Katrid.Core.$compile(el)(this.$scope);\n            this.$element.find('#query-search-view').html(el);\n        }\n        async render() {\n            let templ = this.app.getTemplate('query.manager.jinja2');\n            templ = Katrid.Core.$compile(templ)(this.$scope);\n            this.$element = templ;\n            let queries = await Katrid.Services.Query.all();\n            this.$scope.queries = queries.data;\n            this.app.$element.html(templ);\n            this.$scope.$apply();\n        }\n        renderTable(data) {\n            let templ = this.app.getTemplate('query.manager.table.jinja2', {\n                self: this, query: this.$scope.query, records: this.records, fields: Object.values(this.fields),\n            });\n            templ = Katrid.Core.$compile(templ)(this.$scope);\n            initColumn(templ);\n            this.$element.find('#query-manager-result').html(templ);\n        }\n    }\n    Katrid.Core.plugins.register((app) => {\n        $(app).on('hashchange', (event, hash) => {\n            if (hash.startsWith('#/app/query.manager/')) {\n                event.stopPropagation();\n                event.preventDefault();\n                app.$scope.$parent.currentMenu = { name: 'Query Manager' };\n                let q = new QueryManager(app);\n                q.render();\n            }\n        });\n    });\n    function initColumn(table) {\n    }\n    function reorder(index1, index2) {\n        $('table tr').each(function () {\n            var tr = $(this);\n            var td1 = tr.find(`td:eq(${index1})`);\n            var td2 = tr.find(`td:eq(${index2})`);\n            td1.detach().insertAfter(td2);\n        });\n    }\n})();\nvar Katrid;\n(function (Katrid) {\n    var Reports;\n    (function (Reports) {\n        let _counter = 0;\n        class Params {\n        }\n        Params.Operations = {\n            exact: 'exact',\n            in: 'in',\n            contains: 'contains',\n            startswith: 'startswith',\n            endswith: 'endswith',\n            gt: 'gt',\n            lt: 'lt',\n            between: 'between',\n            isnull: 'isnull'\n        };\n        Params.Labels = null;\n        Params.DefaultOperations = {\n            CharField: Params.Operations.exact,\n            IntegerField: Params.Operations.exact,\n            DateTimeField: Params.Operations.between,\n            DateField: Params.Operations.between,\n            FloatField: Params.Operations.between,\n            DecimalField: Params.Operations.between,\n            ForeignKey: Params.Operations.exact,\n            ModelChoices: Params.Operations.exact,\n            SelectionField: Params.Operations.exact,\n        };\n        Params.TypeOperations = {\n            CharField: [Params.Operations.exact, Params.Operations.in, Params.Operations.contains, Params.Operations.startswith, Params.Operations.endswith, Params.Operations.isnull],\n            IntegerField: [Params.Operations.exact, Params.Operations.in, Params.Operations.gt, Params.Operations.lt, Params.Operations.between, Params.Operations.isnull],\n            FloatField: [Params.Operations.exact, Params.Operations.in, Params.Operations.gt, Params.Operations.lt, Params.Operations.between, Params.Operations.isnull],\n            DecimalField: [Params.Operations.exact, Params.Operations.in, Params.Operations.gt, Params.Operations.lt, Params.Operations.between, Params.Operations.isnull],\n            DateTimeField: [Params.Operations.exact, Params.Operations.in, Params.Operations.gt, Params.Operations.lt, Params.Operations.between, Params.Operations.isnull],\n            DateField: [Params.Operations.exact, Params.Operations.in, Params.Operations.gt, Params.Operations.lt, Params.Operations.between, Params.Operations.isnull],\n            ForeignKey: [Params.Operations.exact, Params.Operations.in, Params.Operations.isnull],\n            ModelChoices: [Params.Operations.exact, Params.Operations.in, Params.Operations.isnull],\n            SelectionField: [Params.Operations.exact, Params.Operations.isnull],\n        };\n        Params.Widgets = {\n            CharField(param) {\n                return `<div><input id=\"rep-param-id-${param.id}\" ng-model=\"param.value1\" type=\"text\" class=\"form-control\"></div>`;\n            },\n            IntegerField(param) {\n                let secondField = '';\n                if (param.operation === 'between') {\n                    secondField = `<div class=\"col-sm-6\"><input id=\"rep-param-id-${param.id}-2\" ng-model=\"param.value2\" type=\"number\" class=\"form-control\"></div>`;\n                }\n                return `<div class=\"row\"><div class=\"col-sm-6\"><input id=\"rep-param-id-${param.id}\" type=\"number\" ng-model=\"param.value1\" class=\"form-control\"></div>${secondField}</div>`;\n            },\n            DecimalField(param) {\n                let secondField = '';\n                if (param.operation === 'between') {\n                    secondField = `<div class=\"col-xs-6\"><input id=\"rep-param-id-${param.id}-2\" ng-model=\"param.value2\" input-decimal class=\"form-control\"></div>`;\n                }\n                return `<div class=\"col-sm-12 row\"><div class=\"col-xs-6\"><input id=\"rep-param-id-${param.id}\" input-decimal ng-model=\"param.value1\" class=\"form-control\"></div>${secondField}</div>`;\n            },\n            DateTimeField(param) {\n                let secondField = '';\n                if (param.operation === 'between') {\n                    secondField = `<div class=\"col-xs-6\"><input id=\"rep-param-id-${param.id}-2\" type=\"text\" date-picker=\"L\" ng-model=\"param.value2\" class=\"form-control\"></div>`;\n                }\n                return `<div class=\"col-sm-12 row\"><div class=\"col-xs-6\"><input id=\"rep-param-id-${param.id}\" type=\"text\" date-picker=\"L\" ng-model=\"param.value1\" class=\"form-control\"></div>${secondField}</div>`;\n            },\n            DateField(param) {\n                let secondField = '';\n                if (param.operation === 'between') {\n                    secondField = `<div class=\"col-xs-6\"><input id=\"rep-param-id-${param.id}-2\" type=\"text\" date-picker=\"L\" ng-model=\"param.value2\" class=\"form-control\"></div>`;\n                }\n                return `<div class=\"col-sm-12 row\"><div class=\"col-xs-6\"><input id=\"rep-param-id-${param.id}\" type=\"text\" date-picker=\"L\" ng-model=\"param.value1\" class=\"form-control\"></div>${secondField}</div>`;\n            },\n            ForeignKey(param) {\n                const serviceName = param.info.field.attr('model') || param.params.model;\n                let multiple = '';\n                if (param.operation === 'in') {\n                    multiple = 'multiple';\n                }\n                return `<div><input id=\"rep-param-id-${param.id}\" ajax-choices=\"${serviceName}\" field=\"${param.name}\" ng-model=\"param.value1\" ${multiple}></div>`;\n            },\n            ModelChoices(param) {\n                let multiple = '';\n                if (param.operation === 'in') {\n                    multiple = 'multiple';\n                }\n                return `<div><input id=\"rep-param-id-${param.id}\" ajax-choices=\"ir.action.report\" model-choices=\"${param.info.modelChoices}\" ng-model=\"param.value1\" ${multiple}></div>`;\n            },\n            SelectionField(param) {\n                param.info.choices = param.info.field.data('choices');\n                let defaultValue = param.info.field.attr('default');\n                if (defaultValue)\n                    defaultValue = ` ng-init=\"param.value1='${defaultValue}'\"`;\n                if (!param.info.choices) {\n                    param.info.choices = {};\n                    for (let child of param.info.field.find('option')) {\n                        child = $(child);\n                        param.info.choices[child.attr('value')] = child.text();\n                    }\n                }\n                return `<div${defaultValue}><select class=\"form-control\" ng-model=\"param.value1\"><option value=\"\\${ key }\" ng-repeat=\"(key, value) in fields.${param.name}.choices\">\\${ value }</option></select></div>`;\n            }\n        };\n        Reports.Params = Params;\n        class Param {\n            constructor(info, params) {\n                this.info = info;\n                this.params = params;\n                this.name = this.info.name;\n                this.field = this.params.info.fields && this.params.info.fields[this.name];\n                this.label = this.info.label || this.params.info.caption;\n                this.static = this.info.param === 'static';\n                this.type = this.info.type || (this.field && this.field.type) || 'CharField';\n                this.defaultOperation = this.info.operation || Params.DefaultOperations[this.type];\n                this.operation = this.defaultOperation;\n                this.operations = this.getOperations();\n                this.exclude = this.info.exclude;\n                this.id = ++_counter;\n            }\n            defaultValue() {\n                return null;\n            }\n            setOperation(op, focus) {\n                if (focus == null) {\n                    focus = true;\n                }\n                this.createControls(this.scope);\n                const el = this.el.find(`#rep-param-id-${this.id}`);\n                if (focus) {\n                    el.focus();\n                }\n            }\n            createControls(scope) {\n                const el = this.el.find(\".param-widget\");\n                el.empty();\n                let widget = Params.Widgets[this.type](this);\n                widget = Katrid.Core.$compile(widget)(scope);\n                return el.append(widget);\n            }\n            getOperations() {\n            }\n            operationTemplate() {\n                const opts = this.getOperations();\n                return `<div class=\"col-sm-4\"><select id=\"param-op-${this.id}\" ng-model=\"param.operation\" ng-init=\"param.operation='${this.defaultOperation}'\" class=\"form-control\" onchange=\"$('#param-${this.id}').data('param').change();$('#rep-param-id-${this.id}')[0].focus()\">\n  ${opts}\n  </select></div>`;\n            }\n            template() {\n                let operation = '';\n                if (!this.operation)\n                    operation = this.operationTemplate();\n                return `<div id=\"param-${this.id}\" class=\"row form-group\" data-param=\"${this.name}\" ng-controller=\"ParamController\"><label class=\"control-label\">${this.label}</label>${operation}<div id=\"param-widget-${this.id}\"></div></div>`;\n            }\n            render(container) {\n                this.el = this.params.scope.compile(this.template())(this.params.scope);\n                this.el.data('param', this);\n                console.log('render param');\n                this.createControls(this.el.scope());\n                return container.append(this.el);\n            }\n        }\n        Reports.Param = Param;\n        Katrid.UI.uiKatrid.controller('ReportController', ['$scope', '$element', '$compile', function ($scope, $element, $compile) {\n                const xmlReport = $scope.$parent.action.info.content;\n                const report = new Reports.Report($scope.$parent.action, $scope);\n                $scope.report = report;\n                report.loadFromXml(xmlReport);\n                report.render($element);\n                return report.loadParams();\n            }]);\n        Katrid.UI.uiKatrid.controller('ReportParamController', ['$scope', '$element', function ($scope, $element) {\n                $scope.$parent.param.el = $element;\n                $scope.$parent.param.scope = $scope;\n                return $scope.$parent.param.setOperation($scope.$parent.param.operation, false);\n            }]);\n        class ReportEngine {\n            static load(el) {\n                $('row').each((idx, el) => {\n                    el.addClass('row');\n                });\n                $('column').each((idx, el) => {\n                    el.addClass('col');\n                });\n            }\n        }\n        Reports.ReportEngine = ReportEngine;\n    })(Reports = Katrid.Reports || (Katrid.Reports = {}));\n})(Katrid || (Katrid = {}));\nvar Katrid;\n(function (Katrid) {\n    var Reports;\n    (function (Reports) {\n        let _counter = 0;\n        Reports.currentReport = {};\n        Reports.currentUserReport = {};\n        function renderDialog(action) {\n            console.log(action);\n            return Katrid.app.getTemplate('view.report.jinja2', { action: action });\n        }\n        Reports.renderDialog = renderDialog;\n        class Report {\n            constructor(action, scope) {\n                this.action = action;\n                this.scope = scope;\n                this.info = this.action.info;\n                Reports.currentReport = this;\n                if ((Reports.Params.Labels == null)) {\n                    Reports.Params.Labels = {\n                        exact: Katrid.i18n.gettext('Is equal'),\n                        in: Katrid.i18n.gettext('Selection'),\n                        contains: Katrid.i18n.gettext('Contains'),\n                        startswith: Katrid.i18n.gettext('Starting with'),\n                        endswith: Katrid.i18n.gettext('Ending with'),\n                        gt: Katrid.i18n.gettext('Greater-than'),\n                        lt: Katrid.i18n.gettext('Less-than'),\n                        between: Katrid.i18n.gettext('Between'),\n                        isnull: Katrid.i18n.gettext('Is Null')\n                    };\n                }\n                this.name = this.info.name;\n                this.id = ++_counter;\n                this.values = {};\n                this.params = [];\n                this.filters = [];\n                this.groupables = [];\n                this.sortables = [];\n                this.totals = [];\n            }\n            telegram() {\n            }\n            getUserParams() {\n                let report = this;\n                let params = {\n                    data: [],\n                    file: report.container.find('#id-report-file').val()\n                };\n                for (let p of Array.from(this.params)) {\n                    params.data.push({\n                        name: p.name,\n                        op: p.operation,\n                        value1: p.value1,\n                        value2: p.value2,\n                        type: p.type\n                    });\n                }\n                let fields = report.container.find('#report-id-fields').val();\n                params['fields'] = fields;\n                let totals = report.container.find('#report-id-totals').val();\n                params['totals'] = totals;\n                let sorting = report.container.find('#report-id-sorting').val();\n                params['sorting'] = sorting;\n                let grouping = report.container.find('#report-id-grouping').val();\n                params['grouping'] = grouping;\n                return params;\n            }\n            loadFromXml(xml) {\n                let dataTypeDict = {\n                    date: 'DateField',\n                    datetime: 'DateTimeField',\n                };\n                if (_.isString(xml)) {\n                    xml = $(xml);\n                }\n                this.scope.customizableReport = xml.attr('customizableReport');\n                this.scope.advancedOptions = xml.attr('advancedOptions');\n                this.model = xml.attr('model');\n                const fields = [];\n                for (let f of Array.from(xml.find('param,field'))) {\n                    let tag = f.tagName;\n                    f = $(f);\n                    const name = f.attr('name');\n                    console.log(this.info);\n                    let fld;\n                    if (this.info.fields)\n                        fld = this.info.fields[name];\n                    const label = f.attr('label') || f.attr('caption') || (fld && fld.caption) || name;\n                    const groupable = f.attr('groupable');\n                    const sortable = f.attr('sortable');\n                    const total = f.attr('total');\n                    let param = f.attr('param');\n                    if ((tag === 'FIELD') && (!param))\n                        param = 'static';\n                    const required = f.attr('required');\n                    const autoCreate = f.attr('autoCreate') || required || (param === 'static');\n                    const operation = f.attr('operation');\n                    let type = f.attr('type') || f.data('type') || (fld && fld.type);\n                    if (type in dataTypeDict)\n                        type = dataTypeDict[type];\n                    const modelChoices = f.attr('model-choices');\n                    if (!type && modelChoices)\n                        type = 'ModelChoices';\n                    fields.push({\n                        name,\n                        label,\n                        groupable,\n                        sortable,\n                        total,\n                        param,\n                        required,\n                        operation,\n                        modelChoices,\n                        type,\n                        autoCreate,\n                        field: f,\n                    });\n                }\n                const params = (Array.from(xml.find('param')).map((p) => $(p).attr('name')));\n                return this.load(fields, params);\n            }\n            saveDialog() {\n                const params = this.getUserParams();\n                const name = window.prompt(Katrid.i18n.gettext('Report name'), Katrid.Reports.currentUserReport.name);\n                if (name) {\n                    Katrid.Reports.currentUserReport.name = name;\n                    $.ajax({\n                        type: 'POST',\n                        url: this.container.find('#report-form').attr('action') + '?save=' + name,\n                        contentType: \"application/json; charset=utf-8\",\n                        dataType: 'json',\n                        data: JSON.stringify(params)\n                    });\n                }\n                return false;\n            }\n            load(fields, params) {\n                if (!fields) {\n                    ({ fields } = this.info);\n                }\n                if (!params) {\n                    params = [];\n                }\n                this.fields = fields;\n                this.scope.fields = {};\n                for (let p of fields) {\n                    this.scope.fields[p.name] = p;\n                    if (p.groupable)\n                        this.groupables.push(p);\n                    if (p.sortable)\n                        this.sortables.push(p);\n                    if (p.total)\n                        this.totals.push(p);\n                    if (!p.autoCreate)\n                        p.autoCreate = params.includes(p.name);\n                }\n            }\n            loadParams() {\n                for (let p of Array.from(this.fields)) {\n                    if (p.autoCreate)\n                        this.addParam(p.name);\n                }\n            }\n            addParam(paramName, value) {\n                for (let p of Array.from(this.fields))\n                    if (p.name === paramName) {\n                        p = new Reports.Param(p, this);\n                        this.params.push(p);\n                        break;\n                    }\n            }\n            getValues() { }\n            export(format) {\n                if (format == null)\n                    format = localStorage.katridReportViewer || 'pdf';\n                const params = this.getUserParams();\n                console.log('send params', params);\n                const svc = new Katrid.Services.Model('ir.action.report');\n                svc.post('export_report', { args: [this.info.id], kwargs: { format, params } })\n                    .then(function (res) {\n                    if (res.open) {\n                        return window.open(res.open);\n                    }\n                });\n                return false;\n            }\n            preview() {\n                return this.export(localStorage.katridReportViewer);\n            }\n            renderFields() {\n                let p;\n                let el = $('<div></div>');\n                const flds = this.fields.map((p) => `<option value=\"${p.name}\">${p.label}</option>`).join('');\n                const aggs = ((() => {\n                    const result1 = [];\n                    for (p of Array.from(this.fields)) {\n                        if (p.total) {\n                            result1.push(`<option value=\"${p.name}\">${p.label}</option>`);\n                        }\n                    }\n                    return result1;\n                })()).join('');\n                el = this.container.find('#report-params');\n                let sel = el.find('#report-id-fields');\n                sel.append($(flds))\n                    .select2({ tags: ((() => {\n                        const result2 = [];\n                        for (let p of Array.from(this.fields))\n                            result2.push({ id: p.name, text: p.label });\n                        return result2;\n                    })()) });\n                if (Katrid.Reports.currentUserReport.params && Katrid.Reports.currentUserReport.params.fields) {\n                    console.log(Katrid.Reports.currentUserReport.params.fields);\n                    sel.select2('val', Katrid.Reports.currentUserReport.params.fields);\n                }\n                sel = el.find('#report-id-totals');\n                sel.append(aggs)\n                    .select2({ tags: ((() => {\n                        const result3 = [];\n                        for (let p of Array.from(this.fields)) {\n                            if (p.total) {\n                                result3.push({ id: p.name, text: p.label });\n                            }\n                        }\n                        return result3;\n                    })()) });\n                return el;\n            }\n            renderParams(container) {\n                let p;\n                let el = $('<div></div>');\n                this.elParams = el;\n                let loaded = {};\n                const userParams = Katrid.Reports.currentUserReport.params;\n                if (userParams && userParams.data) {\n                    for (let p of Array.from(userParams.data)) {\n                        loaded[p.name] = true;\n                        this.addParam(p.name, p.value);\n                    }\n                }\n                for (p of Array.from(this.params)) {\n                    if (p.static && !loaded[p.name]) {\n                        $(p.render(el));\n                    }\n                }\n                return container.find('#params-params').append(el);\n            }\n            renderGrouping(container) {\n                const opts = (Array.from(this.groupables).map((p) => `<option value=\"${p.name}\">${p.label}</option>`)).join('');\n                const el = container.find(\"#params-grouping\");\n                const sel = el.find('select').select2();\n                return sel.append(opts)\n                    .select2(\"container\").find(\"ul.select2-choices\").sortable({\n                    containment: 'parent',\n                    start() { return sel.select2(\"onSortStart\"); },\n                    update() { return sel.select2(\"onSortEnd\"); }\n                });\n            }\n            renderSorting(container) {\n                const opts = (Array.from(this.sortables).filter((p) => p.sortable).map((p) => `<option value=\"${p.name}\">${p.label}</option>`)).join('');\n                const el = container.find(\"#params-sorting\");\n                const sel = el.find('select').select2();\n                return sel.append(opts)\n                    .select2(\"container\").find(\"ul.select2-choices\").sortable({\n                    containment: 'parent',\n                    start() { return sel.select2(\"onSortStart\"); },\n                    update() { return sel.select2(\"onSortEnd\"); }\n                });\n            }\n            render(container) {\n                this.container = container;\n                let el = this.renderFields();\n                if (this.sortables.length) {\n                    el = this.renderSorting(container);\n                }\n                else {\n                    container.find(\"#params-sorting\").hide();\n                }\n                if (this.groupables.length) {\n                    el = this.renderGrouping(container);\n                }\n                else {\n                    container.find(\"#params-grouping\").hide();\n                }\n                return el = this.renderParams(container);\n            }\n        }\n        Reports.Report = Report;\n    })(Reports = Katrid.Reports || (Katrid.Reports = {}));\n})(Katrid || (Katrid = {}));\n(function () {\n    Katrid.UI.uiKatrid\n        .directive('codeEditor', [function () {\n            return {\n                restrict: 'EA',\n                require: 'ngModel',\n                link: function (scope, elm, attrs, ngModel) {\n                    let editor;\n                    require.config({\n                        paths: {\n                            vs: '/static/web/monaco/min/vs',\n                        }\n                    });\n                    console.log('set language', attrs.language);\n                    require(['vs/editor/editor.main'], function () {\n                        editor = monaco.editor.create(elm[0], {\n                            value: '',\n                            language: attrs.language || 'xml',\n                            minimap: {\n                                enabled: false,\n                            },\n                            automaticLayout: true,\n                        });\n                        editor.getModel().onDidChangeContent(evt => {\n                            ngModel.$setViewValue(editor.getValue());\n                        });\n                        ngModel.$render = function () {\n                            setTimeout(() => {\n                                editor.setValue(ngModel.$viewValue);\n                            }, 300);\n                        };\n                    });\n                }\n            };\n        }]);\n})();\n(function () {\n    let uiKatrid = Katrid.UI.uiKatrid;\n    let formCount = 0;\n    uiKatrid.directive('formField2', ['$compile', function ($compile) {\n            return {\n                restrict: 'A',\n                priority: 99,\n                replace: true,\n                compile(el, attrs) {\n                    return function (scope, element, attrs, ctrl) {\n                        let field = scope.view.fields[attrs.name];\n                        if (_.isUndefined(field))\n                            throw Error('Invalid field name \"' + attrs.name + '\"');\n                        let templ = field.template.form;\n                        field.assign(element);\n                        if (!field.visible) {\n                            el.remove();\n                            return;\n                        }\n                        let fieldAttributes = field.getAttributes(attrs);\n                        let sectionAttrs = {};\n                        if (fieldAttributes['ng-readonly'])\n                            sectionAttrs['ng-readonly'] = fieldAttributes['ng-readonly'].toString();\n                        if (attrs.ngShow)\n                            sectionAttrs['ng-show'] = attrs.ngShow;\n                        if (field.helpText) {\n                            sectionAttrs['title'] = field.helpText;\n                        }\n                        let content = element.html();\n                        templ = Katrid.app.getTemplate(templ, {\n                            name: attrs.name, field, attrs: fieldAttributes, content, fieldAttributes: attrs, sectionAttrs,\n                        });\n                        templ = $compile(templ)(scope);\n                        element.replaceWith(templ);\n                        let fcontrol = templ.find('.form-field');\n                        if (fcontrol.length) {\n                            fcontrol = fcontrol[fcontrol.length - 1];\n                            const form = templ.controller('form');\n                            ctrl = angular.element(fcontrol).data().$ngModelController;\n                            if (ctrl)\n                                form.$addControl(ctrl);\n                        }\n                    };\n                },\n            };\n        }]);\n    uiKatrid.directive('inputField', () => ({\n        restrict: 'A',\n        scope: false,\n        link(scope, element, attrs) {\n            $(element).on('click', function () {\n                $(this).select();\n            });\n        }\n    }));\n    uiKatrid.directive('view', () => ({\n        restrict: 'E',\n        template(element, attrs) {\n            formCount++;\n            return '';\n        },\n        link(scope, element, attrs) {\n            if (scope.model) {\n                element.attr('class', `view-form-${scope.model.name.replace(new RegExp('\\.', 'g'), '-')}`);\n                element.attr('id', `katrid-form-${formCount.toString()}`);\n                element.attr('model', scope.model);\n                return element.attr('name', `dataForm${formCount.toString()}`);\n            }\n        }\n    }));\n    uiKatrid.directive('ngSum', () => ({\n        restrict: 'A',\n        priority: 9999,\n        require: 'ngModel',\n        link(scope, element, attrs, controller) {\n            const nm = attrs.ngSum.split('.');\n            const field = nm[0];\n            const subField = nm[1];\n            return scope.$watch(`record.$${field}`, function (newValue, oldValue) {\n                if (newValue && scope.record) {\n                    let v = 0;\n                    scope.record[field].map(obj => v += parseFloat(obj[subField]));\n                    if (v.toString() !== controller.$modelValue) {\n                        controller.$setViewValue(v);\n                        controller.$render();\n                    }\n                }\n            });\n        }\n    }));\n    uiKatrid.directive('ngEnter', () => (scope, element, attrs) => element.bind(\"keydown keypress\", (event) => {\n        if (event.which === 13) {\n            scope.$apply(() => scope.$eval(attrs.ngEnter, { $event: event }));\n            event.preventDefault();\n        }\n    }));\n    uiKatrid.directive('ngEsc', () => (scope, element, attrs) => element.bind(\"keydown keypress\", (event) => {\n        if (event.which === 27) {\n            scope.$apply(() => scope.$eval(attrs.ngEsc, { $event: event }));\n            event.preventDefault();\n        }\n    }));\n    if ($.fn.modal)\n        $.fn.modal.Constructor.prototype._enforceFocus = function () { };\n    uiKatrid.directive('ajaxChoices', ['$location', $location => ({\n            restrict: 'A',\n            require: '?ngModel',\n            link(scope, element, attrs, controller) {\n                const { multiple } = attrs;\n                const serviceName = attrs.ajaxChoices;\n                let field = attrs.field;\n                let _timeout = null;\n                let domain;\n                const cfg = {\n                    allowClear: true,\n                    query(query) {\n                        let data = {\n                            args: [query.term],\n                            kwargs: {\n                                count: 1,\n                                page: query.page,\n                                name_fields: attrs.nameFields && attrs.nameFields.split(\",\") || null\n                            }\n                        };\n                        if (domain)\n                            data.domain = domain;\n                        const f = () => {\n                            let svc = new Katrid.Services.Model(serviceName);\n                            if (field)\n                                svc = svc.getFieldChoices(field, query.term, data.kwargs);\n                            else\n                                svc = new Katrid.Services.Model(attrs.modelChoices).searchName(data);\n                            svc.then(res => {\n                                let data = res.items;\n                                const r = data.map(item => ({\n                                    id: item[0],\n                                    text: item[1]\n                                }));\n                                const more = query.page * Katrid.settings.services.choicesPageLimit < res.count;\n                                return query.callback({\n                                    results: r,\n                                    more: more\n                                });\n                            });\n                        };\n                        if (_timeout)\n                            clearTimeout(_timeout);\n                        _timeout = setTimeout(f, 400);\n                    },\n                    escapeMarkup(m) {\n                        return m;\n                    },\n                    initSelection(element, callback) {\n                        const v = controller.$modelValue;\n                        if (v) {\n                            if (multiple) {\n                                const values = [];\n                                for (let i of Array.from(v)) {\n                                    values.push({ id: i[0], text: i[1] });\n                                }\n                                return callback(values);\n                            }\n                            else {\n                                return callback({ id: v[0], text: v[1] });\n                            }\n                        }\n                    }\n                };\n                if (multiple)\n                    cfg['multiple'] = true;\n                const el = element.select2(cfg);\n                let sel = el;\n                element.on('$destroy', function () {\n                    $('.select2-hidden-accessible').remove();\n                    $('.select2-drop').remove();\n                    return $('.select2-drop-mask').remove();\n                });\n                el.on('change', function (e) {\n                    const v = el.select2('data');\n                    controller.$setDirty();\n                    if (v)\n                        controller.$viewValue = v;\n                    return scope.$apply();\n                });\n                controller.$render = () => {\n                    if (controller.$viewValue)\n                        return element.select2('val', controller.$viewValue);\n                };\n            }\n        })]);\n    uiKatrid.directive('inputMask', () => ({\n        restrict: 'A',\n        link(scope, el, attrs) {\n            el.inputmask();\n        }\n    }));\n    class Decimal {\n        constructor($filter) {\n            this.restrict = 'A';\n            this.require = 'ngModel';\n            this.$filter = $filter;\n        }\n        link(scope, element, attrs, controller) {\n            let decimal = attrs.inputDecimal;\n            let opts = {\n                alias: 'numeric',\n                groupSeparator: '.',\n                unmaskAsNumber: true,\n                radixPoint: ',',\n                autoGroup: true,\n                digitsOptional: false,\n                placeholder: '0',\n            };\n            if (decimal)\n                opts.digits = parseInt(decimal);\n            element.inputmask(opts);\n            controller.$parsers.push(value => {\n                let v = element.inputmask('unmaskedvalue');\n                return v;\n            });\n            controller.$formatters.push((v) => {\n                if (_.isNumber(v))\n                    v = v.toFixed(opts.digits).replace('.', ',');\n                else if (_.isString(v))\n                    v = v.replace('.', ',');\n                return v;\n            });\n        }\n    }\n    uiKatrid.directive('inputDecimal', ['$filter', Decimal]);\n    uiKatrid.filter('moment', () => function (input, format) {\n        if (format) {\n            return moment().format(format);\n        }\n        return moment(input).fromNow();\n    });\n    uiKatrid.directive('fileReader', () => ({\n        restrict: 'A',\n        require: 'ngModel',\n        scope: {},\n        link(scope, element, attrs, controller) {\n            if (attrs.accept === 'image/*') {\n                element.tag === 'INPUT';\n            }\n            return element.bind('change', function () {\n                const reader = new FileReader();\n                reader.onload = event => controller.$setViewValue(event.target.result);\n                return reader.readAsDataURL(event.target.files[0]);\n            });\n        }\n    }));\n    uiKatrid.directive('dateInput', ['$filter', ($filter) => ({\n            restrict: 'A',\n            require: '?ngModel',\n            link(scope, element, attrs, controller) {\n                let setNow = () => {\n                    let value;\n                    if (attrs.type === 'date')\n                        value = (new Date()).toISOString().split('T')[0];\n                    else\n                        value = moment(new Date()).format('YYYY-MM-DD HH:mm').replace(' ', 'T');\n                    $(element).val(value);\n                    controller.$setViewValue(value);\n                    _focus = false;\n                };\n                let _focus = true;\n                element\n                    .focus(function () {\n                    if (($(this).val() === ''))\n                        _focus = true;\n                })\n                    .keypress(function (evt) {\n                    if (evt.key.toLowerCase() === 'h') {\n                        setNow();\n                        evt.stopPropagation();\n                        evt.preventDefault();\n                    }\n                })\n                    .keydown(function (evt) {\n                    if (/\\d/.test(evt.key)) {\n                        if (($(this).val() === '') && (_focus))\n                            setNow();\n                    }\n                });\n                controller.$formatters.push(function (value) {\n                    if (value) {\n                        return new Date(value);\n                    }\n                });\n                controller.$parsers.push(function (value) {\n                    if (_.isDate(value)) {\n                        let v = moment.utc(value).format('YYYY-MM-DD');\n                        if (controller.$modelValue)\n                            v += 'T' + controller.$modelValue.split('T', 1)[1];\n                        let r = moment.utc(v).format('YYYY-MM-DDTHH:mm:ss');\n                        console.log('ret', value, v, r);\n                        return r;\n                    }\n                });\n            }\n        })]);\n    uiKatrid.directive('timeInput', () => ({\n        restrict: 'A',\n        require: '?ngModel',\n        link(scope, el, attrs, controller) {\n            el.inputmask({ regex: '([0-1]?[0-9]|2[0-4]):([0-5][0-9])', insertMode: false });\n            el.on('focus', function () {\n                setTimeout(() => $(this).select());\n            });\n            controller.$parsers.push(function (value) {\n                let v = controller.$modelValue.split('T', 1)[0] + 'T' + value;\n                console.log('time parser', v, value, controller.$viewValue);\n                let r = moment.utc(v).format('YYYY-MM-DDTHH:mm:ss');\n                if (r === 'Invalid date')\n                    r = controller.$modelValue;\n                return r;\n            });\n            controller.$render = function () {\n                let v = controller.$modelValue;\n                console.log('render', v);\n                if (v)\n                    return el.val(moment.utc(v).format('HH:mm'));\n            };\n        }\n    }));\n    uiKatrid.directive('cardDraggable', () => {\n        return {\n            restrict: 'A',\n            link(scope, element, attrs, controller) {\n                let cfg = {\n                    connectWith: attrs.cardDraggable,\n                    cursor: 'move',\n                };\n                if (!_.isUndefined(attrs.cardItem))\n                    cfg['receive'] = (event, ui) => {\n                        console.log('event');\n                        let parent = angular.element(ui.item.parent()).scope();\n                        let scope = angular.element(ui.item).scope();\n                        console.log(scope);\n                        console.log(parent);\n                        let data = {};\n                        data['id'] = scope.record.id;\n                        $.extend(data, parent.group.$params[0]);\n                        console.log(data);\n                        parent.model.write([data])\n                            .then(res => {\n                            console.log('write ok', res);\n                        });\n                    };\n                if (!_.isUndefined(attrs.cardGroup))\n                    cfg['update'] = (event, ui) => {\n                        let ids = [];\n                        $.each(ui.item.parent().find('.card-group'), (idx, el) => {\n                            ids.push($(el).data('id'));\n                        });\n                        let groupName = element.find('.card-group').first().data('group-name');\n                        let modelName = scope.$parent.$parent.view.fields[groupName].model;\n                        Katrid.Services.data.reorder(modelName, ids)\n                            .done(res => {\n                            console.log(res);\n                        });\n                    };\n                console.log(cfg);\n                element.sortable(cfg).disableSelection();\n                $('#sortable').sortable();\n            }\n        };\n    });\n    uiKatrid.directive('uiTooltip', () => ({\n        restrict: 'A',\n        link: (scope, el, attrs) => {\n            $(el).tooltip({\n                container: 'body',\n                delay: {\n                    show: 200,\n                    hide: 500\n                }\n            });\n        }\n    }));\n    uiKatrid.setFocus = (el) => {\n        let e = $(el);\n        if (e.data('select2'))\n            e.select2('focus');\n        else\n            el.focus();\n    };\n    uiKatrid.directive('action', ['$compile', ($compile) => ({\n            restrict: 'E',\n            priority: 99,\n            link: (scope, el, attrs) => {\n                console.log('define action', attrs.ngClick);\n                let div = el.closest('div.data-form');\n                let actions = div.find('.dropdown-menu-actions');\n                let name = attrs.name;\n                let label = el.html();\n                let html = `<li><a href=\"javascript:void(0)\">${label}</a></li>`;\n                let newItem = $(html);\n                newItem.click(() => {\n                    if (attrs.object)\n                        scope.model.rpc(attrs.object, [scope.$parent.record.id]);\n                });\n                actions.append(newItem);\n                el.remove();\n            }\n        })]);\n    class CardView {\n        constructor() {\n            this.restrict = 'E';\n            this.scope = false;\n        }\n        controller($scope, element, attrs) {\n            console.log('controller started');\n            $scope.dataSource.autoLoadGrouping = true;\n            $scope.cardShowAddGroupDlg = (event) => {\n                $scope.cardAddGroupDlg = true;\n                setTimeout(() => $(event.target).closest('.card-add-group').find('input').focus(), 10);\n            };\n            $scope.cardAddGroup = (event, name) => {\n                let gname = $(event.target).closest('.card-add-group').data('group-name');\n                let field = $scope.action.view.fields[gname];\n                let svc = new Katrid.Services.Model(field.model);\n                console.log('the name is', name);\n                svc.createName(name)\n                    .done((res) => {\n                    console.log(res);\n                });\n            };\n            $scope.cardAddItem = (event, name) => {\n                if (name) {\n                    let ctx = {};\n                    let g = $(event.target).closest('.card-group');\n                    ctx['default_' + g.data('group-name')] = g.data('sequence-id');\n                    scope.model.createName(name, ctx)\n                        .done((res) => {\n                        if (res.ok) {\n                            let id = res.result[0];\n                            scope.model.getById(id)\n                                .done((res) => {\n                                if (res.ok) {\n                                    let s = angular.element(event.target).scope();\n                                    let g = s.group;\n                                    s.$apply(() => {\n                                        g.records.push(res.result.data[0]);\n                                    });\n                                }\n                            });\n                        }\n                    });\n                }\n                $scope.kanbanHideAddGroupItemDlg(event);\n            };\n        }\n    }\n})();\n(function () {\n    class Dashboard extends Katrid.Forms.Views.ClientView {\n        async render() {\n            let model = new Katrid.Services.Model('ir.action.client');\n            let res = await model.rpc('get_view', [this.action.info.id]);\n            if (res.content) {\n                return Katrid.Core.$compile(res.content)(this.action.scope);\n            }\n        }\n    }\n    class DashboardComponent extends Katrid.Forms.Widgets.Component {\n        constructor($compile) {\n            super();\n            this.$compile = $compile;\n            this.restrict = 'E';\n            this.scope = false;\n        }\n        async link(scope, el, attrs, controller) {\n            let dashboardId = attrs.dashboardId;\n        }\n    }\n    let dataGroup = function (data, groups, total) {\n        let res = [];\n        let row = data[0];\n        let x = [];\n        let grps = {};\n        let c = 0;\n        for (let group of groups) {\n            let g = [];\n            if (c === 0)\n                g.push(groups[0]);\n            for (let row of data) {\n                let v = row[group];\n                if ((c > 0) && !(v in grps)) {\n                    g = [v];\n                    grps[v] = g;\n                    for (let z of x)\n                        g.push(0);\n                }\n                else if (c > 0)\n                    g = grps[v];\n                if (c > 0)\n                    g[x.indexOf(row[groups[0]])] = row[total || 'total'] || 0;\n                else if (!g.includes(v))\n                    g.push(v);\n            }\n            if (c === 0) {\n                x = g;\n                grps[groups[0]] = g;\n            }\n            else {\n            }\n            c++;\n        }\n        res = Object.values(grps);\n        console.log(res);\n        return res;\n    };\n    class ChartComponent extends Katrid.Forms.Widgets.Component {\n        constructor() {\n            super();\n        }\n        async link(scope, el, attrs) {\n            let res, chart, sql;\n            let q = el.find('query');\n            if (q.length) {\n                q.remove();\n                sql = q.text();\n            }\n            console.log('init chart');\n            let groups;\n            if (attrs.groups)\n                groups = attrs.groups.split(',');\n            let observe = async (url) => {\n                if (sql)\n                    res = await Katrid.Services.Query.executeSql(sql);\n                else if (attrs.source)\n                    res = scope[attrs.source];\n                else {\n                    res = await fetch(url).then(res => res.json());\n                }\n                let data = res.data;\n                console.log(attrs);\n                let cfg = {\n                    bindto: el[0],\n                    data: {},\n                    color: {\n                        pattern: Katrid.UI.Dashboard.colorPatterns,\n                    },\n                };\n                let hasData = false;\n                let type = el.attr('type');\n                if (type)\n                    cfg.data.type = type;\n                if (groups) {\n                    data = dataGroup(data, groups);\n                    let vals = [];\n                    for (let i = 1; i < data.length; i++)\n                        vals.push(data[i][0]);\n                    hasData = true;\n                }\n                else if (_.isArray(data) && data.length) {\n                    let cols = Object.keys(data[0]);\n                    cfg.data.columns = data.map(obj => [obj[cols[0]], obj[cols[1]]]);\n                    hasData = true;\n                }\n                if (hasData)\n                    chart = c3.generate(cfg);\n            };\n            if (attrs.urlParams) {\n                let urlParams = attrs.urlParams;\n                scope.$watch(attrs.urlParams, observe);\n            }\n            else if (attrs.source) {\n                scope.$watch(attrs.source + '.data', observe);\n            }\n            else\n                observe();\n            attrs.$observe('url', observe);\n        }\n    }\n    class Query extends Katrid.Forms.Widgets.Component {\n        constructor() {\n            super();\n            this.priority = 200;\n            this.scope = false;\n        }\n        link(scope, el, attrs) {\n            let ds = new DataSource(el, scope);\n            el.remove();\n            return;\n            if (!attrs.name)\n                throw Error('Query name attribute is required!');\n            let instance = scope[attrs.name] = { loading: false, data: null };\n            let url = el.data('url');\n            if (url) {\n                console.log('find query by url', url);\n                $.get(url)\n                    .then(res => {\n                    instance.loading = false;\n                    let data = res.data.map((row) => (_.object(res.fields, row)));\n                    scope.$apply(() => instance.data = data);\n                });\n                return;\n            }\n            let r;\n            let sqlQuery = el.html();\n            let inMemory = 'inMemory' in attrs;\n            if (inMemory) {\n                let dataBind = el.data('bind');\n                let dataBindField = el.data('bind-field');\n                if (dataBind) {\n                    scope.$parent.$watch(dataBind, function (newValue, oldValue) {\n                        if (_.isArray(newValue) && newValue.length && _.isObject(newValue[0]))\n                            console.log(alasql(sqlQuery, [newValue]));\n                    });\n                }\n                else if (dataBindField) {\n                    let fnBind = function (newValue, oldValue) {\n                        let fieldLog = scope.dataSource.$fieldLog[dataBindField];\n                        if (fieldLog) {\n                            let data = fieldLog.value;\n                            if (_.isArray(data) && data.length && _.isObject(data[0])) {\n                                instance = alasql(sqlQuery, [data]);\n                            }\n                        }\n                    };\n                    if (_.isString(dataBindField))\n                        dataBindField = [dataBindField];\n                    for (let field of dataBindField)\n                        scope.$parent.$watch('$fieldLog.' + field + '.count', fnBind);\n                }\n            }\n            else {\n                instance.loading = true;\n                if (_.isUndefined(attrs.url))\n                    r = Katrid.Services.Query.read(attrs.queryId);\n                else\n                    r = $.get(attrs.url);\n                r.then(res => {\n                    instance.loading = false;\n                    let data = res.data.map((row) => (_.object(res.fields, row)));\n                    scope.$apply(() => instance.data = data);\n                });\n            }\n            el.remove();\n        }\n    }\n    Katrid.Actions.ClientAction.register('dashboard', Dashboard);\n    Katrid.UI.uiKatrid.directive('dashboard', ['$compile', DashboardComponent]);\n    Katrid.UI.uiKatrid.directive('chart', ChartComponent);\n    Katrid.UI.uiKatrid.directive('query', Query);\n    class Field {\n        constructor(el) {\n            this.el = el;\n        }\n        th() {\n            let caption = this.el.attr('caption') || this.el.attr('name');\n            let cls = this.el.attr('class');\n            let title = this.el.attr('header-title');\n            let attrs = '';\n            if (!title)\n                title = '';\n            let headerClick = this.el.attr('on-header-click');\n            if (cls)\n                attrs += 'class =\"' + cls + '\"';\n            if (headerClick)\n                attrs += ' ng-click=\"' + headerClick + '\"';\n            return `<th title=\"${title}\" ${attrs}>${caption}</th>`;\n        }\n        td() {\n            let format = this.el.attr('format');\n            if (format) {\n                format = '|' + format;\n                console.log('format', format);\n            }\n            else\n                format = '';\n            let title = this.el.attr('title');\n            if (!title)\n                title = '';\n            let ngClass = this.el.attr('ng-class');\n            let cls = this.el[0].className;\n            let content = this.el.html();\n            if (!content)\n                content = `\\${ record.${this.name}${format} }`;\n            return `<td title='${title}' class=\"${cls}\">${content}</td>`;\n        }\n        tfoot() {\n            let total = this.total;\n            if (total)\n                total = '${grid.total(\"' + this.name + '\")}';\n            else if (this.footer)\n                total = this.footer;\n            else\n                total = '';\n            let cls = this.el[0].className;\n            return `<td class=\"${cls}\">${total}</td>`;\n        }\n        get name() {\n            return this.el.attr('name');\n        }\n        get footer() {\n            return this.el.attr('footer');\n        }\n        get total() {\n            return this.el.attr('total');\n        }\n    }\n    Katrid.UI.uiKatrid.directive('tableView', () => ({\n        restrict: 'E',\n        scope: false,\n        template(el, attrs) {\n            let fields = [];\n            for (let fld of el.find('field'))\n                fields.push(new Field($(fld)));\n            return Katrid.app.getTemplate('dashboard.table.jinja2', { fields, el, attrs });\n        }\n    }));\n    class DataSource {\n        constructor(el, scope) {\n            this.$el = el;\n            this.controls = [];\n            this.$counter = 0;\n            this.$scope = scope;\n            this.params = this.$el.data('params');\n            this.name = el.attr('name');\n            if (this.name)\n                scope[this.name] = this;\n            this.sql = this.$el.html();\n            this.url = el.data('url');\n            setTimeout(() => this.execute(), 100);\n        }\n        async execute() {\n            this.$loading = true;\n            try {\n                let res;\n                if (this.url) {\n                    res = await fetch(this.url)\n                        .then(res => res.json());\n                }\n                else if (this.sql) {\n                    let params = this.params;\n                    console.log(params);\n                    if (!params)\n                        params = this.$scope;\n                    else {\n                        let dataParams = params;\n                        params = {};\n                        for (let k of dataParams) {\n                            let v = this.$scope[k];\n                            console.log(k, v);\n                            if (_.isDate(v))\n                                console.log('param is date', v);\n                            params[k] = v;\n                        }\n                    }\n                    let sql = _.sprintf(this.sql, params);\n                    res = await Katrid.Services.Query.executeSql(sql);\n                }\n                this.$counter++;\n                this.data = res.data;\n                this.$scope.$apply();\n                this.onChange();\n            }\n            finally {\n                this.$loading = false;\n            }\n        }\n        onChange() {\n            for (let control of this.controls)\n                control.$render(this.data);\n        }\n    }\n    class DashboardWidget {\n        constructor(opts) {\n            if (_.isString(opts.el))\n                this.$el = $(opts.el);\n            else\n                this.$el = opts.el;\n            this.$scope = opts.scope;\n            this.$sourceScope = opts.sourceScope || opts.scope;\n            this.$loading = false;\n            this.create(opts);\n            if (_.isString(this.dataSource)) {\n                let ds = this.$sourceScope[this.dataSource];\n                if (ds) {\n                    ds.controls.push(this);\n                    if (ds.$counter)\n                        this.$render(ds.data);\n                }\n            }\n        }\n        create(opts) {\n            this.dataSource = opts.dataSource || this.$el.data('source');\n            this.caption = opts.caption || this.$el.attr('caption');\n        }\n        $render(data) {\n        }\n    }\n    class Chart extends DashboardWidget {\n        constructor(opts) {\n            super(opts);\n            this.backButton = $(`<button style=\"position: absolute; left: 0; top: 0;\" class=\"btn btn-outline-secondary btn-sm back-button\">${_.gettext('Back')}</button>`);\n            this.backButton.hide();\n            this.$el.prepend(this.backButton);\n        }\n        groupBy(data, group, totals) {\n            if (data.length === 0)\n                return [];\n            let res = [];\n            let firstRow = data[0];\n            let sql = 'select ';\n            let groups = group;\n            if (_.isArray(groups))\n                groups = groups.join(',');\n            else if (_.isNumber(group))\n                groups = Object.keys(firstRow)[group];\n            sql += groups;\n            if (_.isArray(totals))\n                for (let total of totals)\n                    sql += ',' + 'sum(' + total + ') as ' + total;\n            else if (_.isString((totals)))\n                sql += `,sum(${totals}) as ${totals}`;\n            else if (_.isNumber(totals)) {\n                totals = Object.keys(firstRow)[totals];\n                sql += ',sum(' + totals + ') as ' + totals;\n            }\n            sql += ' from ? group by ';\n            sql += groups;\n            console.log(sql);\n            res = alasql(sql, [data]);\n            return res;\n        }\n        create(opts) {\n            super.create(opts);\n            this.x = opts.x;\n            this.y = opts.y;\n            this.keys = opts.keys;\n            this.type = opts.type;\n            this.axis = opts.axis;\n            this.legend = opts.legend;\n            this.onclick = opts.onclick;\n            this.columns = opts.columns;\n            this.grid = opts.grid;\n            this.labels = opts.labels;\n            this.pie = opts.pie;\n            if (!this.columns && !this.keys && _.isUndefined(this.x) && _.isUndefined(this.y)) {\n                this.x = 0;\n                this.y = 1;\n            }\n        }\n        $render(data) {\n            this.$data = data;\n            if (this.columns)\n                this.$columns = this.columns;\n            else\n                this.$columns = this.groupBy(data, this.x, this.y).map(obj => Object.values(obj));\n            let size = {\n                width: this.$el.parent().width(),\n            };\n            this.$chart = c3.generate({\n                bindto: this.$el[0],\n                data: {\n                    columns: this.$columns,\n                    type: this.type,\n                    onclick: this.onclick,\n                    labels: this.labels,\n                },\n                color: {\n                    pattern: ['#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5', '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5']\n                },\n                pie: this.pie,\n                size,\n                grid: this.grid,\n                legend: this.legend,\n                axis: this.axis,\n            });\n            this.$chart.$chart = this;\n        }\n        query(sql, params) {\n            return alasql(sql, params);\n        }\n    }\n    class GridView extends DashboardWidget {\n        constructor(opts) {\n            super(opts);\n            this._groupBy = [];\n            let groupBy = this.$el.attr('group-by');\n            if (groupBy)\n                this._groupBy = groupBy.split(',');\n            this.totals = [];\n            this.fields = [];\n            for (let fld of this.$el.find('field')) {\n                let field = new Field($(fld));\n                this.fields.push(field);\n                if (field.total)\n                    this.totals.push(field.name);\n            }\n            this.$scope.grid = this;\n            let templ = Katrid.app.getTemplate('dashboard.grid.jinja2', {\n                self: this,\n                fields: this.fields,\n            });\n            templ = Katrid.Core.$compile(templ)(this.$scope);\n            this.$el.html(templ);\n        }\n        get groupBy() {\n            return this._groupBy;\n        }\n        set groupBy(groupBy) {\n            this._groupBy = groupBy;\n            if (this._lastData)\n                this.$render(this._lastData);\n        }\n        total(attr) {\n            console.log('calc attr', attr);\n            let r = 0;\n            if (this._lastData)\n                for (let row of this._lastData)\n                    r += row[attr];\n            return r;\n        }\n        $render(data) {\n            this._lastData = data;\n            if (!data)\n                data = [];\n            if (this.groupBy.length) {\n                data = groupBy(data, this.groupBy, this.totals, this.fields[0].name);\n            }\n            this.$scope.records = this._renderGroup(data);\n        }\n        _renderGroup(data) {\n            let r = [];\n            for (let row of data) {\n                r.push(row);\n                if (row.$group)\n                    r = r.concat(this._renderGroup(row.$children));\n            }\n            return r;\n        }\n    }\n    function groupBy(data, member, totals, to) {\n        let r = {};\n        for (let row of data) {\n            let v = row[member];\n            let group = r[v];\n            if (!group) {\n                group = r[v] = { $children: [] };\n                for (let total of totals)\n                    group[total] = 0;\n            }\n            group.$children.push(row);\n            group.$group = true;\n            group[to] = v;\n            for (let total of totals)\n                group[total] += row[total];\n        }\n        return Object.values(r);\n    }\n    class GridRow {\n        constructor(grid, row, el) {\n            this.row = row;\n        }\n    }\n    class GroupRow extends GridRow {\n    }\n    Katrid.UI.uiKatrid.directive('gridView', () => ({\n        restrict: 'E',\n        scope: {},\n        async link(scope, el, attrs) {\n            let grid = new GridView({ el, attrs, scope, sourceScope: scope.$parent });\n            return;\n            scope.loading = false;\n            let res, sql;\n            let query = el.find('query');\n            if (attrs.source) {\n                console.log('data source is', attrs.source);\n            }\n            else if (query.length) {\n                sql = query.text();\n                query.remove();\n                if (sql) {\n                    scope.loading = true;\n                    scope.$apply();\n                    res = await Katrid.Services.Query.executeSql(sql);\n                    scope.loading = false;\n                }\n                if (res) {\n                    scope.records = res.data;\n                    scope.$apply();\n                }\n            }\n        }\n    }));\n    Katrid.UI.uiKatrid.filter('duration', () => {\n        return (input, unit, format) => {\n            if (!format)\n                format = 'HH:mm:ss';\n            if (input) {\n                if ((unit === 'seconds') && (_.isString(input)))\n                    input = parseInt(input);\n                let fmt = moment.duration(input, unit).format(format);\n                if (fmt.length === 5)\n                    fmt = '00:' + fmt;\n                return fmt;\n            }\n            return input;\n        };\n    });\n    Katrid.UI.Dashboard = {\n        Chart,\n        colorPatterns: [\n            '#1f77b4', '#aec7e8', '#ff7f0e', '#ffbb78', '#2ca02c', '#98df8a', '#d62728', '#ff9896', '#9467bd', '#c5b0d5',\n            '#8c564b', '#c49c94', '#e377c2', '#f7b6d2', '#7f7f7f', '#c7c7c7', '#bcbd22', '#dbdb8d', '#17becf', '#9edae5'\n        ],\n    };\n})();\n(function () {\n    let uiKatrid = Katrid.UI.uiKatrid;\n    uiKatrid.directive('datePicker', ['$filter', $filter => ({\n            restrict: 'A',\n            require: '?ngModel',\n            link(scope, el, attrs, controller) {\n                let mask = '99/99/9999';\n                let format = attrs.datePicker || 'L';\n                if (format === 'L LT')\n                    mask = '99/99/9999 99:99';\n                el.inputmask({\n                    mask,\n                    insertMode: false,\n                });\n                let calendar = $(el.parent()).datetimepicker({\n                    useCurrent: false,\n                    format,\n                    icons: {\n                        time: 'fa fa-clock',\n                    },\n                })\n                    .on('dp.change', function (evt) {\n                    calendar.datetimepicker('hide');\n                })\n                    .on('dp.hide', function (evt) {\n                    controller.$setDirty();\n                    controller.$setViewValue(el.val());\n                });\n                el.on('focus', () => el.select());\n                controller.$render = function () {\n                    if (controller.$modelValue) {\n                        calendar.datetimepicker('date', moment.utc(controller.$modelValue));\n                    }\n                    else\n                        el.val('');\n                };\n                el.on('blur', () => {\n                    let v = moment(el.val(), format);\n                    if (v.isValid())\n                        controller.$modelValue = v.format('YYYY-MM-DD');\n                    else\n                        controller.$modelValue = null;\n                });\n                controller.$parsers.push(value => {\n                    let v = moment(el.val(), format);\n                    if (v.isValid()) {\n                        if (format === 'L')\n                            return v.format('YYYY-MM-DD');\n                        else if (format === 'L LT')\n                            return v.format('YYYY-MM-DD HH:mm');\n                    }\n                    return null;\n                });\n            }\n        })]);\n    uiKatrid.directive('timePicker', ['$filter', $filter => ({\n            restrict: 'A',\n            require: '?ngModel',\n            link(scope, el, attrs, controller) {\n                let mask = '99:99';\n                el.inputmask({\n                    mask,\n                    insertMode: false,\n                });\n                el.on('focus', () => el.select());\n            }\n        })]);\n})();\n(function () {\n    class Component {\n        constructor(el, config) {\n            this.config = config;\n            this.create();\n            this.render();\n            this.$el = $(el);\n        }\n        create() {\n        }\n        render() {\n        }\n    }\n    Katrid.UI.uiKatrid.directive(\"fkAutocomplete\", ['$controller', ($controller) => ({\n            restrict: \"A\",\n            require: \"ngModel\",\n            link(scope, el, attrs, controller) {\n                const field = scope.view.fields[attrs.name];\n                $(el).autocomplete({\n                    source: (req, res) => {\n                        let domain = field.domain;\n                        if (domain && _.isString(domain))\n                            domain = scope.$eval(domain);\n                        let data = {\n                            args: [req.term],\n                            kwargs: {\n                                domain: domain,\n                                name_fields: attrs.nameFields && attrs.nameFields.split(\",\") || null\n                            }\n                        };\n                        let svc;\n                        if (scope.model)\n                            svc = scope.model.getFieldChoices(field.name, req.term, data.kwargs);\n                        else\n                            svc = new Katrid.Services.Model(field.model).searchName(data);\n                        svc.then(r => {\n                            let items = [];\n                            for (let obj of r.items)\n                                items.push({ value: obj[0], label: obj[1] });\n                            res(items);\n                        });\n                    },\n                    minLength: 1,\n                    select: (event, ui) => {\n                        el.val(ui.item.label);\n                        scope.$apply(() => {\n                            el.data('value', [ui.item.value, ui.item.label]);\n                            controller.$setDirty();\n                            return false;\n                        });\n                        return false;\n                    }\n                });\n                controller.$parsers.push(value => {\n                    value = el.data('value');\n                    return value;\n                });\n                controller.$formatters.push(value => {\n                    console.log('formatter', value);\n                    if (_.isArray(value))\n                        return value[1];\n                    return value;\n                });\n            }\n        })]);\n    Katrid.UI.uiKatrid.directive(\"foreignkey\", ['$compile', '$controller', ($compile, $controller) => ({\n            restrict: \"A\",\n            require: \"ngModel\",\n            link(scope, el, attrs, controller) {\n                let serviceName;\n                let sel = el;\n                let _shown = false;\n                const field = scope.view.fields[attrs.name];\n                el.addClass(\"form-field\");\n                if (attrs.serviceName)\n                    serviceName = attrs;\n                else if (scope.action && scope.action.model)\n                    serviceName = scope.action.model.name;\n                else\n                    serviceName = attrs.foreignkey;\n                const newItem = function () {\n                };\n                const newEditItem = function () {\n                };\n                let _timeout = null;\n                let config = {\n                    allowClear: true,\n                    query(query) {\n                        let domain = field.domain;\n                        if (domain && _.isString(domain))\n                            domain = scope.$eval(domain);\n                        let data = {\n                            args: [query.term],\n                            kwargs: {\n                                count: 1,\n                                page: query.page,\n                                domain: domain,\n                                name_fields: attrs.nameFields && attrs.nameFields.split(\",\") || null\n                            }\n                        };\n                        const f = () => {\n                            let svc;\n                            if (scope.model)\n                                svc = scope.model.getFieldChoices(field.name, query.term, data.kwargs);\n                            else\n                                svc = new Katrid.Services.Model(field.model).searchName(data);\n                            svc.then(res => {\n                                let data = res.items;\n                                const r = data.map(item => ({\n                                    id: item[0],\n                                    text: item[1]\n                                }));\n                                const more = query.page * Katrid.settings.services.choicesPageLimit < res.count;\n                                if (!multiple && !more) {\n                                    let msg;\n                                    const v = sel.data(\"select2\").search.val();\n                                    if ((attrs.allowCreate && attrs.allowCreate !== \"false\" || attrs.allowCreate == null) && v) {\n                                        msg = Katrid.i18n.gettext('Create <i>\"%s\"</i>...');\n                                        r.push({\n                                            id: newItem,\n                                            text: msg\n                                        });\n                                    }\n                                }\n                                return query.callback({\n                                    results: r,\n                                    more: more\n                                });\n                            });\n                        };\n                        if (_timeout)\n                            clearTimeout(_timeout);\n                        _timeout = setTimeout(f, 400);\n                    },\n                    ajax: {\n                        url: `/api/rpc/${serviceName}/get_field_choices/`,\n                        contentType: \"application/json\",\n                        dataType: \"json\",\n                        type: \"POST\"\n                    },\n                    formatSelection(val) {\n                        if (val.id === newItem || val.id === newEditItem)\n                            return Katrid.i18n.gettext(\"Creating...\");\n                        return val.text;\n                    },\n                    formatResult(state) {\n                        const s = sel.data(\"select2\").search.val();\n                        if (state.id === newItem) {\n                            state.str = s;\n                            return `<strong>${sprintf(state.text, s)}</strong>`;\n                        }\n                        else if (state.id === newEditItem) {\n                            state.str = s;\n                            return `<strong>${sprintf(state.text, s)}</strong>`;\n                        }\n                        return state.text;\n                    },\n                    initSelection(el, cb) {\n                        let v = controller.$modelValue;\n                        if (multiple) {\n                            v = v.map(obj => ({\n                                id: obj[0],\n                                text: obj[1]\n                            }));\n                            return cb(v);\n                        }\n                        else if (_.isArray(v)) {\n                            return cb({\n                                id: v[0],\n                                text: v[1]\n                            });\n                        }\n                    }\n                };\n                let allowCreateEdit = attrs.noCreateEdit;\n                allowCreateEdit = _.isUndefined(allowCreateEdit) || !Boolean(allowCreateEdit);\n                let { multiple: multiple } = attrs;\n                if (multiple) {\n                    config[\"multiple\"] = true;\n                }\n                sel = sel.select2(config);\n                let createNew = () => {\n                    sel.select2('close');\n                    let service = new Katrid.Services.Model(field.model);\n                    return service.getViewInfo({\n                        view_type: \"form\"\n                    }).then(function (res) {\n                        let title = _.sprintf(Katrid.i18n.gettext('Create: %(title)s'), { title: field.caption });\n                        let options = {\n                            scope: scope.$new(true),\n                            $controller: $controller,\n                            sel: sel, field: field,\n                            title: title,\n                            view: res,\n                            model: service,\n                            action: scope.action,\n                        };\n                        let wnd = new Katrid.UI.Dialogs.Window(options);\n                        wnd.createNew();\n                    });\n                };\n                if (allowCreateEdit)\n                    sel.parent().find('div.select2-container>div.select2-drop')\n                        .append(`<div style=\"padding: 4px;\"><button type=\"button\" class=\"btn btn-link btn-sm\">${Katrid.i18n.gettext('Create New...')}</button></div>`)\n                        .find('button').click(createNew);\n                sel.on(\"change\", async (e) => {\n                    console.log('on change', e.val);\n                    let v = e.added;\n                    if (v && v.id === newItem) {\n                        let service = new Katrid.Services.Model(field.model);\n                        try {\n                            let res = await service.createName(v.str);\n                            let vals = {};\n                            vals[field.name] = res;\n                            scope.dataSource.setValues(vals);\n                            sel.select2('data', { id: res[0], text: res[1] });\n                        }\n                        catch (err) {\n                            let res = await service.getViewInfo({\n                                view_type: \"form\"\n                            });\n                            let title = _.sprintf(Katrid.i18n.gettext('Create: %(title)s'), { title: field.caption });\n                            let options = {\n                                scope: scope.$new(true),\n                                $controller: $controller,\n                                sel: sel, field: field,\n                                title: title,\n                                view: res,\n                                model: service,\n                                action: scope.action,\n                            };\n                            let wnd = new Katrid.UI.Dialogs.Window(options);\n                            wnd.createNew({ creationName: v.str });\n                            sel.select2('data', null);\n                        }\n                    }\n                    else if (v && v.id === newEditItem) {\n                    }\n                    else if (multiple && e.val.length) {\n                        return controller.$setViewValue(e.val);\n                    }\n                    else {\n                        controller.$setDirty();\n                        if (v) {\n                            return controller.$setViewValue([v.id, v.text]);\n                        }\n                        else {\n                            return controller.$setViewValue(null);\n                        }\n                    }\n                }).on(\"select2-open\", () => {\n                    if (!_shown) {\n                        _shown = true;\n                        let parentModal = el.closest(\"div.modal\");\n                        if (parentModal.length)\n                            parentModal.on(\"hide.bs.modal\", () => sel.select2(\"destroy\"));\n                    }\n                });\n                controller.$parsers.push(value => {\n                    if (value) {\n                        if (_.isArray(value))\n                            return value;\n                        else if (_.isObject(value))\n                            return [value.id, value.text];\n                        else\n                            return value;\n                    }\n                    return null;\n                });\n                if (!multiple)\n                    scope.$watch(attrs.ngModel, (newValue, oldValue) => sel.select2(\"val\", newValue));\n                return controller.$render = function () {\n                    if (multiple) {\n                        if (controller.$modelValue) {\n                            const v = Array.from(controller.$modelValue).map(obj => obj[0]);\n                            sel.select2(\"val\", controller.$modelValue);\n                        }\n                    }\n                    else if (controller.$viewValue) {\n                        return sel.select2(\"val\", controller.$viewValue[0]);\n                    }\n                    else {\n                        return sel.select2(\"val\", null);\n                    }\n                };\n            }\n        })]);\n    Katrid.UI.uiKatrid.filter('m2m', () => function (input) {\n        if (_.isArray(input))\n            return input.map((obj) => obj ? obj[1] : null).join(', ');\n    });\n})();\n(function () {\n    Katrid.UI.uiKatrid.directive('sortableField', ['$compile', '$timeout', ($compile, $timeout) => ({\n            restrict: 'E',\n            require: 'ngModel',\n            replace: true,\n            scope: {},\n            link: {\n                post: function (scope, el, attrs) {\n                    let tbl = el.closest('tbody');\n                    let fixHelperModified = function (e, tr) {\n                        let $originals = tr.children();\n                        let $helper = tr.clone();\n                        $helper.children().each(function (index) {\n                            $(this).width($originals.eq(index).width());\n                        });\n                        return $helper;\n                    }, updateIndex = function (e, ui) {\n                        $('td.list-column-sortable', ui.item.parent()).each(function (i) {\n                        });\n                    };\n                    tbl.sortable({\n                        helper: fixHelperModified,\n                        stop: updateIndex\n                    }).disableSelection();\n                }\n            },\n            template(element, attrs) {\n                return sprintf(Katrid.$templateCache.get('view.field.SortableField'), { fieldName: attrs.name });\n            }\n        })\n    ]);\n})();\n(function () {\n    Katrid.UI.uiKatrid.directive('statusField', ['$compile', ($compile) => ({\n            restrict: 'A',\n            priority: 1,\n            replace: true,\n            link(scope, element, attrs, controller) {\n                const field = scope.view.fields[attrs.name];\n                scope.choices = field.choices;\n                if (!attrs.readonly) {\n                    scope.itemClick = () => console.log('status field item click');\n                }\n                element.closest('header').prepend(element);\n            },\n            template(element, attrs) {\n                return sprintf(Katrid.app.$templateCache.get('view.field.StatusField'), { fieldName: attrs.name });\n            }\n        })\n    ]);\n})();\n(function () {\n    Katrid.UI.uiKatrid.filter('numberFormat', () => {\n        return (value, maxDigits = 3) => {\n            if (value == null)\n                return '';\n            return new Intl.NumberFormat('pt-br', { maximumSignificantDigits: maxDigits }).format(value);\n        };\n    });\n})();\n(function () {\n    class Grid {\n        constructor($compile) {\n            this.restrict = 'E';\n            this.scope = {};\n            this.$compile = $compile;\n        }\n        async loadViews(scope, element, views, attrs) {\n            let res = await scope.model.loadViews();\n            let fld = res.views.list.fields[scope.field.field];\n            scope.dataSource.field = scope.field;\n            if (fld)\n                fld.visible = false;\n            let newViews = res.views;\n            for (let [k, v] of Object.entries(views))\n                newViews[k].content = v;\n            scope.views = newViews;\n            scope.view = newViews.list;\n            let content = $(scope.view.content);\n            if (scope.inline)\n                content.attr('ng-row-click', 'editItem($event, $index)').attr('inline-editor', scope.inline);\n            else\n                content.attr('ng-row-click', 'openItem($event, $index)');\n            content.attr('records', 'records');\n            content.attr('list-options', '{\"deleteRow\": true}');\n            let el = (this.$compile(content)(scope));\n            element.html(el);\n            element.prepend(this.$compile(Katrid.app.getTemplate('view.form.grid.toolbar.jinja2', { attrs }))(scope));\n            element.find('table').addClass('table-bordered grid');\n        }\n        async showDialog(scope, attrs, index) {\n            if (scope.views.form)\n                await this.renderDialog(scope, attrs);\n            if (index != null) {\n                scope.recordIndex = index;\n                let record = scope.records[index];\n                if (record && record.$loaded)\n                    scope.record = record;\n                else if (record) {\n                    let res = await scope.dataSource.get(scope.records[index].id, 0, false, index);\n                    res.$loaded = true;\n                }\n            }\n        }\n        ;\n        async link(scope, element, attrs) {\n            if (attrs.ngDefaultValues)\n                scope.ngDefaultValues = attrs.ngDefaultValues;\n            let me = this;\n            const field = scope.$parent.view.fields[attrs.name];\n            scope.totalDisplayed = 1000;\n            scope.fieldName = attrs.name;\n            scope.field = field;\n            scope.records = [];\n            scope.recordIndex = -1;\n            scope._cachedViews = {};\n            scope._ = scope.$parent._;\n            scope._changeCount = 0;\n            scope.dataSet = [];\n            scope.model = new Katrid.Services.Model(field.model);\n            scope.isList = true;\n            if (attrs.inlineEditor === 'tabular')\n                scope.inline = 'tabular';\n            else if (attrs.hasOwnProperty('inlineEditor'))\n                scope.inline = 'inline';\n            scope.getContext = function () {\n                return {};\n            };\n            scope.$setDirty = function () {\n                return {};\n            };\n            let dataSource = scope.dataSource = new Katrid.Data.DataSource(scope);\n            dataSource.readonly = !_.isUndefined(attrs.readonly);\n            let p = scope.$parent;\n            while (p) {\n                if (p.action && p.action.dataSource) {\n                    scope.dataSource.masterSource = p.action.dataSource;\n                    break;\n                }\n                else if (p.dataSource) {\n                    scope.dataSource.masterSource = p.dataSource;\n                    break;\n                }\n                p = p.$parent;\n            }\n            scope.parent = dataSource.masterSource.scope;\n            scope.action = dataSource.masterSource.action;\n            dataSource.action = scope.action;\n            scope.dataSource.fieldName = scope.fieldName;\n            scope.gridDialog = null;\n            let gridEl = null;\n            let views = {};\n            for (let child of element.children()) {\n                if (child.tagName.startsWith('GRID:')) {\n                    let viewType = child.tagName.split(':')[1].toLowerCase();\n                    child = $(child);\n                    views[viewType] = `<${viewType}>${child.html()}</${viewType}>`;\n                }\n            }\n            await me.loadViews(scope, element, views, attrs);\n            scope.doViewAction = (viewAction, target, confirmation) => scope.action._doViewAction(scope, viewAction, target, confirmation);\n            let _cacheChildren = (fieldName, record, records) => {\n                record[fieldName] = records;\n            };\n            scope._incChanges = () => {\n                if (!scope.$parent.$fieldLog[scope.field.name])\n                    scope.$parent.$fieldLog[scope.field.name] = {};\n                scope.$parent.$fieldLog[scope.field.name].count++;\n            };\n            scope.addItem = async () => {\n                await scope.dataSource.insert();\n                if (attrs.$attr.inlineEditor) {\n                    scope.records.splice(0, 0, scope.record);\n                    scope.dataSource.edit();\n                    if (!scope.$parent.record[scope.fieldName])\n                        scope.$parent.record[scope.fieldName] = [];\n                    scope.$parent.record[scope.fieldName].push(scope.record);\n                    scope.$apply();\n                }\n                else\n                    return this.showDialog(scope, attrs);\n            };\n            scope.addRecord = function (rec) {\n                let record = Katrid.Data.createRecord({ $loaded: true }, scope.dataSource);\n                for (let [k, v] of Object.entries(rec))\n                    record[k] = v;\n                scope.records.push(record);\n                if (!scope.dataSource.parent.record[scope.fieldName])\n                    scope.dataSource.parent.record[scope.fieldName] = [];\n                scope.dataSource.parent.record[scope.fieldName].push(record);\n                console.log('add record', record);\n            };\n            scope.cancelChanges = () => scope.dataSource.setState(Katrid.Data.DataSourceState.browsing);\n            scope.openItem = async (evt, index) => {\n                await this.showDialog(scope, attrs, index);\n                if (scope.dataSource.masterSource.changing && !scope.dataSource.readonly) {\n                    scope.dataSource.edit();\n                }\n                scope.$apply();\n            };\n            scope.editItem = (evt, index) => {\n                if (scope.dataSource.changing)\n                    scope.save();\n                if (scope.$parent.dataSource.changing) {\n                    scope.dataSource.recordIndex = index;\n                    scope.dataSource.edit();\n                    setTimeout(() => {\n                        let el = $(evt.target).closest('td').find('input.form-control').focus();\n                        setTimeout(() => el.select());\n                    }, 100);\n                }\n            };\n            scope.removeItem = function (idx) {\n                const rec = scope.records[idx];\n                scope.records.splice(idx, 1);\n                scope._incChanges();\n                rec.$record.$delete();\n            };\n            scope.$set = (field, value) => {\n                const control = scope.form[field];\n                control.$setViewValue(value);\n                control.$render();\n            };\n            scope.save = function () {\n                scope._incChanges();\n                if (scope.inline)\n                    return;\n                if (scope.recordIndex > -1) {\n                    let rec = scope.record;\n                    scope.record = null;\n                    scope.records.splice(scope.recordIndex, 1);\n                    setTimeout(() => {\n                        scope.records.splice(scope.recordIndex, 0, rec);\n                        scope.$apply();\n                    });\n                }\n                else if (scope.recordIndex === -1) {\n                    scope.records.push(scope.record);\n                }\n                if (!scope.inline) {\n                    scope.gridDialog.modal('toggle');\n                }\n            };\n            let _loadChildFromCache = (child) => {\n                if (scope.record.hasOwnProperty(child.fieldName)) {\n                    child.scope.records = scope.record[child.fieldName];\n                }\n            };\n            function trim(str) {\n                str = str.replace(/^\\s+/, '');\n                for (let i = str.length - 1; i >= 0; i--) {\n                    if (/\\S/.test(str.charAt(i))) {\n                        str = str.substring(0, i + 1);\n                        break;\n                    }\n                }\n                return str;\n            }\n            scope.pasteData = async function () {\n                let cache = {};\n                let _queryForeignKeyField = async function (field, val) {\n                    return new Promise(async (resolve, reject) => {\n                        if (!cache[field.name])\n                            cache[field.name] = {};\n                        if (cache[field.name][val] === undefined) {\n                            let res = await scope.model.getFieldChoices(field.name, val, { exact: true });\n                            if (res.items && res.items.length)\n                                cache[field.name][val] = res.items[0];\n                            else\n                                cache[field.name][val] = null;\n                        }\n                        resolve(cache[field.name][val]);\n                    });\n                };\n                let fields = [];\n                for (let f of $(scope.view.content).find('field')) {\n                    let field = scope.view.fields[$(f).attr('name')];\n                    if (field && (_.isUndefined(field.visible) || field.visible))\n                        fields.push(field);\n                }\n                let txt = await navigator.clipboard.readText();\n                let rowNo = 0;\n                for (let row of txt.split(/\\r?\\n/)) {\n                    rowNo++;\n                    if (row) {\n                        let i = 0;\n                        let newObj = {};\n                        for (let col of row.split(/\\t/)) {\n                            let field = fields[i];\n                            if (field instanceof Katrid.Data.Fields.ForeignKey)\n                                newObj[field.name] = await _queryForeignKeyField(field, trim(col));\n                            else\n                                newObj[field.name] = trim(col);\n                            i++;\n                        }\n                        scope.addRecord(newObj);\n                    }\n                }\n                scope.$apply();\n            };\n            let masterChanged = function (evt, master, key) {\n                if (master === scope.dataSource.masterSource) {\n                    scope.dataSet = [];\n                    scope._changeCount = 0;\n                    scope.records = [];\n                    if (key != null) {\n                        const data = {};\n                        data[field.field] = key;\n                        if (key) {\n                            scope.dataSource.pageLimit = 1000;\n                            return scope.dataSource.search(data)\n                                .then((data) => {\n                                scope.$parent.$fieldLog[field.name] = { count: 0, value: data.data };\n                                scope.$parent.record[field.name] = data.data;\n                                scope.$apply();\n                            })\n                                .finally(() => scope.dataSource.state = Katrid.Data.DataSourceState.browsing);\n                        }\n                    }\n                    else {\n                        scope.$parent.record[field.name] = [];\n                    }\n                }\n            };\n            if (scope.dataSource.pendingMasterId)\n                masterChanged(null, scope.dataSource.parent, scope.dataSource.pendingMasterId);\n            let unhook = [\n                scope.$on('masterChanged', masterChanged),\n                scope.$on('afterCancel', function (evt, master) {\n                    if (master === scope.dataSource.masterSource)\n                        scope.dataSource.cancel();\n                })\n            ];\n            scope.$on('$destroy', function () {\n                unhook.map(fn => fn());\n            });\n        }\n        async renderDialog(scope, attrs) {\n            let el;\n            let html = scope.views.form.content;\n            scope.view = scope.views.form;\n            let fld = scope.views.form.fields[scope.field.field];\n            if (fld)\n                fld.visible = false;\n            if (attrs.inline) {\n                el = me.$compile(html)(scope);\n                gridEl.find('.inline-input-dialog').append(el);\n            }\n            else {\n                let view = new Katrid.UI.Views.FormView({ scope }, scope.views.form, {\n                    dialog: true,\n                    templateUrl: 'view.field.OneToManyField.Dialog.jinja2',\n                    context: {\n                        field: scope.field,\n                    },\n                });\n                el = view.render();\n            }\n            scope.formElement = el.find('form:first');\n            scope.form = scope.formElement.controller('form');\n            scope.gridDialog = el;\n            if (!attrs.inline) {\n                el.modal('show');\n                el.on('hidden.bs.modal', function () {\n                    scope.record = null;\n                    scope.dataSource.state = Katrid.Data.DataSourceState.browsing;\n                    el.remove();\n                    scope.gridDialog = null;\n                    scope.recordIndex = -1;\n                    _destroyChildren();\n                });\n            }\n            el.find('.modal-dialog').addClass('ng-form');\n            return new Promise(function (resolve) {\n                el.on('shown.bs.modal', () => resolve(el));\n            });\n        }\n        ;\n    }\n    Katrid.UI.uiKatrid\n        .directive('grid', ['$compile', Grid])\n        .directive('list', ['$compile', $compile => ({\n            restrict: 'E',\n            scope: false,\n            compile(el, attrs) {\n                el.addClass('table-responsive');\n                let rowClick = attrs.ngRowClick;\n                let records = attrs.records || 'records';\n                let content = el.html();\n                let options = {};\n                if (attrs.listOptions)\n                    options = JSON.parse(attrs.listOptions);\n                let template = Katrid.app.getTemplate('view.list.table.jinja2', { attrs, rowClick, options, records });\n                return function (scope, el, attrs, controller) {\n                    let templ = $(template);\n                    let tr = templ.find('tbody>tr:first');\n                    let thead = templ.find('thead>tr:first');\n                    let tfoot = templ.find('tfoot>tr:first');\n                    let formView;\n                    let ngTrClass = attrs.ngTrClass;\n                    if (ngTrClass)\n                        ngTrClass = ',' + ngTrClass;\n                    else\n                        ngTrClass = '';\n                    console.log('row class', ngTrClass);\n                    if (attrs.inlineEditor) {\n                        templ.addClass('inline-editor');\n                        formView = $(scope.views.form.content);\n                        tr\n                            .attr('ng-form', \"grid-row-form-{{$index}}\")\n                            .attr('id', 'grid-row-form-{{$index}}');\n                    }\n                    else\n                        tr.attr('ng-class', \"{\" +\n                            \"'group-header': record.$hasChildren, \" +\n                            \"'form-data-changing': (dataSource.changing && dataSource.recordIndex === $index), \" +\n                            \"'form-data-readonly': !(dataSource.changing && dataSource.recordIndex === $index)\" +\n                            ngTrClass +\n                            \"}\");\n                    let fields = $('<div>').append(content);\n                    let totals = [];\n                    let hasTotal = false;\n                    let td, th;\n                    for (let fld of fields.children('field')) {\n                        let fieldName = fld.getAttribute('name');\n                        let field = scope.view.fields[fieldName];\n                        if (field) {\n                            field.assign(scope.action.view, fld);\n                            let total = fld.getAttribute('total');\n                            if (total) {\n                                hasTotal = true;\n                                totals.push({\n                                    field: field,\n                                    name: fieldName,\n                                    total: total,\n                                });\n                            }\n                            else\n                                totals.push(false);\n                            if (!field.visible)\n                                continue;\n                            let inplaceEditor = false;\n                            if (formView) {\n                                inplaceEditor = formView.find(`field[name=\"${fieldName}\"]`);\n                                inplaceEditor = $(inplaceEditor[0].outerHTML).attr('form-field', 'form-field').attr('inline-editor', attrs.inlineEditor)[0].outerHTML;\n                            }\n                            let fieldEl = $(field.render('list', fld, { view: scope.view }));\n                            th = fieldEl.first();\n                            td = $(th).next();\n                        }\n                        else {\n                            th = '<th></th>';\n                            td = `<td>${fld.html()}</td>`;\n                        }\n                        tr.append(td);\n                        thead.append(th);\n                    }\n                    if (hasTotal)\n                        for (total of totals)\n                            tfoot.append(Katrid.app.getTemplate('view.list.table.total.jinja2', { field: total.field }));\n                    else\n                        tfoot.remove();\n                    if (options.deleteRow) {\n                        let delRow = $(Katrid.app.getTemplate('view.list.table.delete.jinja2'));\n                        for (let child of delRow)\n                            if (child.tagName === 'TD')\n                                tr.append(child);\n                            else if (child.tagName === 'TH')\n                                thead.append(child);\n                        if (hasTotal)\n                            tfoot.append('<td class=\"list-column-delete\" ng-show=\"dataSource.parent.changing && !dataSource.readonly\"></td>');\n                    }\n                    el.html('');\n                    el.append($compile(templ)(scope));\n                };\n            }\n        })]);\n})();\n(function () {\n    class Total {\n        constructor($filter) {\n            this.restrict = 'E';\n            this.scope = false;\n            this.replace = true;\n            this.$filter = $filter;\n        }\n        template(el, attrs) {\n            if (attrs.expr[0] === \"'\")\n                return `<span>${attrs.expr.substring(1, attrs.expr.length - 1)}</span>`;\n            else\n                return `<span ng-bind=\"total$${attrs.field}|number:2\"></span>`;\n        }\n        link(scope, element, attrs, controller) {\n            if (attrs.expr[0] !== \"'\")\n                scope.$watch(`records`, (newValue) => {\n                    let total = 0;\n                    newValue.map((r) => total += parseFloat(r[attrs.field]));\n                    scope['total$' + attrs.field] = total;\n                    scope.parent['total$' + scope.fieldName + '$' + attrs.field] = total;\n                });\n        }\n    }\n    Katrid.UI.uiKatrid.directive('ngTotal', ['$filter', Total]);\n})();\n(function ($) {\n    \"use strict\";\n    function setSelectionRange(rangeStart, rangeEnd) {\n        if (this.createTextRange) {\n            var range = this.createTextRange();\n            range.collapse(true);\n            range.moveStart('character', rangeStart);\n            range.moveEnd('character', rangeEnd - rangeStart);\n            range.select();\n        }\n        else if (this.setSelectionRange) {\n            this.focus();\n            this.setSelectionRange(rangeStart, rangeEnd);\n        }\n    }\n    function getSelection(part) {\n        var pos = this.value.length;\n        part = (part.toLowerCase() == 'start' ? 'Start' : 'End');\n        if (document.selection) {\n            var range = document.selection.createRange(), stored_range, selectionStart, selectionEnd;\n            stored_range = range.duplicate();\n            stored_range.expand('textedit');\n            stored_range.setEndPoint('EndToEnd', range);\n            selectionStart = stored_range.text.length - range.text.length;\n            selectionEnd = selectionStart + range.text.length;\n            return part == 'Start' ? selectionStart : selectionEnd;\n        }\n        else if (typeof (this['selection' + part]) != \"undefined\") {\n            pos = this['selection' + part];\n        }\n        return pos;\n    }\n    var _keydown = {\n        codes: {\n            188: 44,\n            110: 44,\n            108: 44,\n            109: 45,\n            190: 46,\n            191: 47,\n            192: 96,\n            220: 92,\n            222: 39,\n            221: 93,\n            219: 91,\n            173: 45,\n            187: 61,\n            186: 59,\n            189: 45,\n        },\n        shifts: {\n            96: \"~\",\n            49: \"!\",\n            50: \"@\",\n            51: \"#\",\n            52: \"$\",\n            53: \"%\",\n            54: \"^\",\n            55: \"&\",\n            56: \"*\",\n            57: \"(\",\n            48: \")\",\n            45: \"_\",\n            61: \"+\",\n            91: \"{\",\n            93: \"}\",\n            92: \"|\",\n            59: \":\",\n            39: \"\\\"\",\n            44: \"<\",\n            46: \">\",\n            47: \"?\"\n        }\n    };\n    $.fn.number = function (number, decimals, dec_point, thousands_sep) {\n        thousands_sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep;\n        dec_point = (typeof dec_point === 'undefined') ? '.' : dec_point;\n        decimals = (typeof decimals === 'undefined') ? 0 : decimals;\n        var u_dec = ('\\\\u' + ('0000' + (dec_point.charCodeAt(0).toString(16))).slice(-4)), regex_dec_num = new RegExp('[^-' + u_dec + '0-9]', 'g'), regex_dec = new RegExp(u_dec, 'g');\n        if (number === true) {\n            if (this.is('input:text')) {\n                return this.on({\n                    'keydown.format': function (e) {\n                        var $this = $(this), data = $this.data('numFormat'), code = (e.keyCode ? e.keyCode : e.which), chara = '', start = getSelection.apply(this, ['start']), end = getSelection.apply(this, ['end']), val = '', setPos = false;\n                        if (e.key === '-') {\n                            if ($this.val() === 0)\n                                data.negative = true;\n                            else {\n                                data.negative = false;\n                                if (this.value.includes('-'))\n                                    this.value = this.value.substr(1, this.value.length - 1);\n                                else\n                                    this.value = '-' + this.value;\n                            }\n                            $this.val(this.value);\n                            e.preventDefault();\n                            return;\n                        }\n                        if (_keydown.codes.hasOwnProperty(code)) {\n                            code = _keydown.codes[code];\n                        }\n                        if (!e.shiftKey && (code >= 65 && code <= 90)) {\n                            code += 32;\n                        }\n                        else if (!e.shiftKey && (code >= 69 && code <= 105)) {\n                            code -= 48;\n                        }\n                        else if (e.shiftKey && _keydown.shifts.hasOwnProperty(code)) {\n                            chara = _keydown.shifts[code];\n                        }\n                        if (chara == '')\n                            chara = String.fromCharCode(code);\n                        if (code !== 8 && chara != dec_point && !chara.match(/[0-9]/)) {\n                            var key = (e.keyCode ? e.keyCode : e.which);\n                            if (key == 46 || key == 8 || key == 9 || key == 27 || key == 13 ||\n                                ((key == 65 || key == 82) && (e.ctrlKey || e.metaKey) === true) ||\n                                ((key == 86 || key == 67) && (e.ctrlKey || e.metaKey) === true) ||\n                                ((key >= 35 && key <= 39))) {\n                                return;\n                            }\n                            e.preventDefault();\n                            return false;\n                        }\n                        if (start == 0 && end == this.value.length || $this.val() == 0) {\n                            if (code === 8) {\n                                start = end = 1;\n                                this.value = '';\n                                data.init = (decimals > 0 ? -1 : 0);\n                                data.c = (decimals > 0 ? -(decimals + 1) : 0);\n                                setSelectionRange.apply(this, [0, 0]);\n                            }\n                            else if (chara === dec_point) {\n                                start = end = 1;\n                                this.value = '0' + dec_point + (new Array(decimals + 1).join('0'));\n                                data.init = (decimals > 0 ? 1 : 0);\n                                data.c = (decimals > 0 ? -(decimals + 1) : 0);\n                            }\n                            else if (this.value.length === 0) {\n                                data.init = (decimals > 0 ? -1 : 0);\n                                data.c = (decimals > 0 ? -(decimals) : 0);\n                            }\n                        }\n                        else {\n                            data.c = end - this.value.length;\n                        }\n                        if (decimals > 0 && chara == dec_point && start == this.value.length - decimals - 1) {\n                            data.c++;\n                            data.init = Math.max(0, data.init);\n                            e.preventDefault();\n                            setPos = this.value.length + data.c;\n                        }\n                        else if (chara == dec_point) {\n                            data.init = Math.max(0, data.init);\n                            e.preventDefault();\n                        }\n                        else if (decimals > 0 && code == 8 && start == this.value.length - decimals) {\n                            e.preventDefault();\n                            data.c--;\n                            setPos = this.value.length + data.c;\n                        }\n                        else if (decimals > 0 && code == 8 && start > this.value.length - decimals) {\n                            if (this.value === '')\n                                return;\n                            if (this.value.slice(start - 1, start) != '0') {\n                                val = this.value.slice(0, start - 1) + '0' + this.value.slice(start);\n                                $this.val(val.replace(regex_dec_num, '').replace(regex_dec, dec_point));\n                            }\n                            e.preventDefault();\n                            data.c--;\n                            setPos = this.value.length + data.c;\n                        }\n                        else if (code == 8 && this.value.slice(start - 1, start) == thousands_sep) {\n                            e.preventDefault();\n                            data.c--;\n                            setPos = this.value.length + data.c;\n                        }\n                        else if (decimals > 0 &&\n                            start == end &&\n                            this.value.length > decimals + 1 &&\n                            start > this.value.length - decimals - 1 && isFinite(+chara) &&\n                            !e.metaKey && !e.ctrlKey && !e.altKey && chara.length === 1) {\n                            if (end === this.value.length) {\n                                val = this.value.slice(0, start - 1);\n                            }\n                            else {\n                                val = this.value.slice(0, start) + this.value.slice(start + 1);\n                            }\n                            this.value = val;\n                            setPos = start;\n                        }\n                        if (setPos === false && code === 44 && chara === dec_point)\n                            setPos = this.value.indexOf(dec_point) + 1;\n                        if (setPos !== false) {\n                            setSelectionRange.apply(this, [setPos, setPos]);\n                        }\n                        $this.data('numFormat', data);\n                    },\n                    'keyup.format': function (e) {\n                        var $this = $(this), data = $this.data('numFormat'), code = (e.keyCode ? e.keyCode : e.which), start = getSelection.apply(this, ['start']), setPos;\n                        if (this.value === '' || (code < 48 || code > 57) && (code < 96 || code > 105) && code !== 8)\n                            return;\n                        $this.val($this.val());\n                        if (decimals > 0) {\n                            if (data.init < 1) {\n                                start = this.value.length - decimals - (data.init < 0 ? 1 : 0);\n                                data.c = start - this.value.length;\n                                data.init = 1;\n                                $this.data('numFormat', data);\n                            }\n                            else if (start > this.value.length - decimals && code != 8) {\n                                data.c++;\n                                $this.data('numFormat', data);\n                            }\n                        }\n                        setPos = this.value.length + data.c;\n                        if (((this.value.length - setPos) === data.decimals) && (String.fromCharCode(code) !== data.dec_point)) {\n                            setPos -= 1;\n                            console.log('set pos', data.dec_point, code, String.fromCharCode(code));\n                        }\n                        setSelectionRange.apply(this, [setPos, setPos]);\n                    },\n                    'paste.format': function (e) {\n                        var $this = $(this), original = e.originalEvent, val = null;\n                        if (window.clipboardData && window.clipboardData.getData) {\n                            val = window.clipboardData.getData('Text');\n                        }\n                        else if (original.clipboardData && original.clipboardData.getData) {\n                            val = original.clipboardData.getData('text/plain');\n                        }\n                        $this.val(val);\n                        e.preventDefault();\n                        return false;\n                    }\n                })\n                    .each(function () {\n                    var $this = $(this).data('numFormat', {\n                        c: -(decimals + 1),\n                        decimals: decimals,\n                        thousands_sep: thousands_sep,\n                        dec_point: dec_point,\n                        regex_dec_num: regex_dec_num,\n                        regex_dec: regex_dec,\n                        init: false\n                    });\n                    if (this.value === '')\n                        return;\n                    $this.val($this.val());\n                });\n            }\n            else {\n                return this.each(function () {\n                    var $this = $(this), num = +$this.text().replace(regex_dec_num, '').replace(regex_dec, '.');\n                    $this.number(!isFinite(num) ? 0 : +num, decimals, dec_point, thousands_sep);\n                });\n            }\n        }\n        return this.text($.number.apply(window, arguments));\n    };\n    var origHookGet = null, origHookSet = null;\n    if ($.isPlainObject($.valHooks.text)) {\n        if ($.isFunction($.valHooks.text.get))\n            origHookGet = $.valHooks.text.get;\n        if ($.isFunction($.valHooks.text.set))\n            origHookSet = $.valHooks.text.set;\n    }\n    else {\n        $.valHooks.text = {};\n    }\n    $.valHooks.text.get = function (el) {\n        var $this = $(el), num, data = $this.data('numFormat');\n        if (!data) {\n            if ($.isFunction(origHookGet)) {\n                return origHookGet(el);\n            }\n            else {\n                return undefined;\n            }\n        }\n        else {\n            if (el.value === '')\n                return '';\n            num = +(el.value\n                .replace(data.regex_dec_num, '')\n                .replace(data.regex_dec, '.'));\n            return '' + (isFinite(num) ? num : 0);\n        }\n    };\n    $.valHooks.text.set = function (el, val) {\n        var $this = $(el), data = $this.data('numFormat');\n        if (!data) {\n            if ($.isFunction(origHookSet)) {\n                return origHookSet(el, val);\n            }\n            else {\n                return undefined;\n            }\n        }\n        else {\n            return el.value = $.number(val, data.decimals, data.dec_point, data.thousands_sep);\n        }\n    };\n    $.number = function (number, decimals, dec_point, thousands_sep) {\n        thousands_sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep;\n        dec_point = (typeof dec_point === 'undefined') ? '.' : dec_point;\n        decimals = !isFinite(+decimals) ? 0 : Math.abs(decimals);\n        var u_dec = ('\\\\u' + ('0000' + (dec_point.charCodeAt(0).toString(16))).slice(-4));\n        var u_sep = ('\\\\u' + ('0000' + (thousands_sep.charCodeAt(0).toString(16))).slice(-4));\n        number = (number + '')\n            .replace('\\.', dec_point)\n            .replace(new RegExp(u_sep, 'g'), '')\n            .replace(new RegExp(u_dec, 'g'), '.')\n            .replace(new RegExp('[^0-9+\\-Ee.]', 'g'), '');\n        var n = !isFinite(+number) ? 0 : +number, s = '', toFixedFix = function (n, decimals) {\n            var k = Math.pow(10, decimals);\n            return '' + Math.round(n * k) / k;\n        };\n        s = (decimals ? toFixedFix(n, decimals) : '' + Math.round(n)).split('.');\n        if (s[0].length > 3) {\n            s[0] = s[0].replace(/\\B(?=(?:\\d{3})+(?!\\d))/g, thousands_sep);\n        }\n        if ((s[1] || '').length < decimals) {\n            s[1] = s[1] || '';\n            s[1] += new Array(decimals - s[1].length + 1).join('0');\n        }\n        return s.join(dec_point);\n    };\n})(jQuery);\n(function () {\n    class Comments {\n        constructor(scope) {\n            this.scope = scope;\n            this.model = this.scope.$parent.model;\n            this.scope.$parent.$watch('recordId', key => {\n                this.items = null;\n                this.scope.loading = Katrid.i18n.gettext('Loading...');\n                clearTimeout(this._pendingOperation);\n                this._pendingOperation = setTimeout(() => {\n                    this._pendingOperation = null;\n                    this.masterChanged(key);\n                    return this.scope.$apply(() => {\n                        return this.scope.loading = null;\n                    });\n                }, 1000);\n            });\n            this.items = [];\n        }\n        async masterChanged(key) {\n            if (key) {\n                const svc = new Katrid.Services.Model('mail.message');\n                if (this.scope.$parent.record)\n                    return svc.post('get_messages', { args: [this.scope.$parent.record.messages] })\n                        .then(res => {\n                        this.items = res;\n                        this.scope.$apply();\n                    });\n            }\n        }\n        async _sendMesage(msg, attachments) {\n            if (attachments)\n                attachments = attachments.map((obj) => obj.id);\n            let msgs = await this.model.post('post_message', { args: [[this.scope.$parent.recordId]], kwargs: { content: msg, content_subtype: 'html', format: true, attachments: attachments } });\n            this.scope.message = '';\n            this.items = msgs.concat(this.items);\n            this.scope.$apply();\n            this.scope.files = null;\n            this.scope.hideEditor();\n        }\n        postMessage(msg) {\n            if (this.scope.files.length) {\n                let files = [];\n                for (let f of this.scope.files)\n                    files.push(f.file);\n                var me = this;\n                Katrid.Services.Attachments.upload({ files: files }, this.scope.$parent)\n                    .done((res) => {\n                    me._sendMesage(msg, res);\n                });\n            }\n            else\n                this._sendMesage(msg);\n        }\n    }\n    Katrid.UI.uiKatrid.directive('comments', () => ({\n        restrict: 'E',\n        scope: {},\n        replace: true,\n        template: '<div class=\"content\"><div class=\"comments\"><mail-comments/></div></div>',\n        link(scope, element, attrs) {\n            if (element.closest('.modal-dialog').length)\n                element.remove();\n            else\n                $(element).closest('.form-view[ng-form=form]').children('.content:first').append(element);\n        }\n    }));\n    Katrid.UI.uiKatrid.directive('mailComments', () => ({\n        restrict: 'E',\n        controller: ['$scope', ($scope) => {\n                $scope.comments = new Comments($scope);\n                $scope.files = [];\n                $scope.showEditor = () => {\n                    $($scope.el).find('#mail-editor').show();\n                    $($scope.el).find('#mail-msgEditor').focus();\n                };\n                $scope.hideEditor = () => {\n                    $($scope.el).find('#mail-editor').hide();\n                };\n                $scope.attachFile = (file) => {\n                    for (let f of file.files)\n                        $scope.files.push({\n                            name: f.name,\n                            type: f.type,\n                            file: f\n                        });\n                    $scope.$apply();\n                };\n                $scope.deleteFile = (idx) => {\n                    $scope.files.splice(idx, 1);\n                };\n            }],\n        replace: true,\n        link(scope, element, attrs) {\n            scope.el = element;\n        },\n        template() {\n            return `\n  <div class=\"container\">\n          <h3>${Katrid.i18n.gettext('Comments')}</h3>\n          <div class=\"form-group\">\n          <button class=\"btn btn-outline-secondary\" ng-click=\"showEditor();\">${Katrid.i18n.gettext('New message')}</button>\n          <button class=\"btn btn-outline-secondary\">${Katrid.i18n.gettext('Log an internal note')}</button>\n          </div>\n          <div id=\"mail-editor\" style=\"display: none;\">\n            <div class=\"form-group\">\n              <textarea id=\"mail-msgEditor\" class=\"form-control\" ng-model=\"message\"></textarea>\n            </div>\n            <div class=\"form-group\">\n              <button class=\"btn btn-default\" type=\"button\" onclick=\"$(this).next().click()\"><i class=\"fa fa-paperclip\"></i></button>\n              <input class=\"input-file-hidden\" type=\"file\" multiple onchange=\"angular.element(this).scope().attachFile(this)\">\n            </div>\n            <div class=\"form-group\" ng-show=\"files.length\">\n              <ul class=\"list-inline attachments-area\">\n                <li ng-repeat=\"file in files\" ng-click=\"deleteFile($index)\" title=\"${Katrid.i18n.gettext('Delete this attachment')}\">{{ file.name }}</li>\n              </ul>\n            </div>\n            <div class=\"from-group\">\n              <button class=\"btn btn-primary\" ng-click=\"comments.postMessage(message)\">${Katrid.i18n.gettext('Send')}</button>\n            </div>\n          </div>\n  \n          <hr>\n  \n          <div ng-show=\"loading\">{{ loading }}</div>\n          <div class=\"comment media col-sm-12\" ng-repeat=\"comment in comments.items\">\n            <div class=\"media-left\">\n              <img src=\"/static/web/assets/img/avatar.png\" class=\"avatar rounded\">\n            </div>\n            <div class=\"media-body\">\n              <strong>{{ ::comment.author_name }}</strong> - <span class=\"timestamp text-muted\" title=\"$\\{ ::comment.date_time|moment:'LLLL'}\"> {{::comment.date_time|moment}}</span>\n              <div class=\"clearfix\"></div>\n              <div class=\"form-group\">\n                {{::comment.content}}\n              </div>\n              <div class=\"form-group\" ng-if=\"comment.attachments\">\n                <ul class=\"list-inline\">\n                  <li ng-repeat=\"file in comment.attachments\">\n                    {{file.mimetype}}\n                    <div class=\"comment-preview-image\" ng-if=\"file.mimetype.startsWith('image')\" style=\"width: 16%;height:100px;background-image:url('/web/content/$\\{ ::file.id }')\"></div>\n                    <a href=\"/web/content/$\\{ ::file.id }/?download\">{{ ::file.name }}</a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n    </div>`;\n        }\n    }));\n    class MailFollowers {\n    }\n    class MailComments extends Katrid.Forms.Widgets.Widget {\n        static initClass() {\n            this.prototype.tag = 'mail-comments';\n        }\n        spanTemplate(scope, el, attrs, field) {\n            return '';\n        }\n    }\n    MailComments.initClass();\n    Katrid.Forms.Widgets.MailComments = MailComments;\n})();\n(function ($) {\n    $.fn.tabset = function () {\n        this.addClass('col-12');\n        let nav = $('<nav><div class=\"nav nav-tabs\" role=\"tablist\"></div></nav>');\n        let div = nav.find('div');\n        let tabContent = $('<div class=\"tab-content\"></div>');\n        let i = 0;\n        for (let child of this.children('tab')) {\n            let navItem = $(`<a class=\"nav-item nav-link\" role=\"tab\"></a>`);\n            let heading = child.querySelector('tab-heading');\n            navItem.data('index', i);\n            navItem.html(heading.innerHTML);\n            if (child.hasAttribute('ng-show'))\n                navItem.attr('ng-show', child.getAttribute('ng-show'));\n            if (child.hasAttribute('ng-if'))\n                navItem.attr('ng-if', child.getAttribute('ng-if'));\n            div.append(navItem);\n            heading.remove();\n            child.classList.add('tab-pane', 'row');\n            child.setAttribute('role', 'tabpanel');\n            tabContent.append(child);\n            navItem.click(function () {\n                $(this).tab('show');\n                tabContent.find('.tab-pane.active').removeClass('active show');\n                child.classList.add('active', 'show');\n            });\n            if (i === 0)\n                navItem.click();\n            i++;\n        }\n        this.append(nav);\n        this.append(tabContent);\n        return this;\n    };\n})(jQuery);\n(function () {\n    class Telegram {\n        static async export(report, format) {\n            console.log('export telegram');\n            let templ = Katrid.app.$templateCache.get('reportbot.dialog.contacts');\n            let modal = $(templ);\n            $('body').append(modal);\n            let sel = modal.find('#id-reportbot-select-contacts');\n            let partners = new Katrid.Services.Model('res.partner');\n            let res = await partners.post('get_telegram_contacts');\n            if (res) {\n                if (res)\n                    res.map(c => sel.append(`<option value=\"${c[0]}\">${c[1]}</option>`));\n                sel.select2();\n            }\n            modal.find('#id-btn-ok').click(async () => {\n                let svc = new Katrid.Services.Model('telegram.pending');\n                format = 'pdf';\n                const params = report.getUserParams();\n                let res = svc.post('export_report', { args: [report.info.id], kwargs: { contacts: sel.val(), format, params } });\n                if (res.ok)\n                    console.log('ok');\n            });\n            modal.modal();\n            return true;\n        }\n    }\n    Katrid.Reports.Telegram = Telegram;\n})();\nvar Katrid;\n(function (Katrid) {\n    var UI;\n    (function (UI) {\n        const DEFAULT_EXPAND_CLASS = 'fa-caret-right';\n        const DEFAULT_COLLAPSE_CLASS = 'fa-caret-down';\n        class Component {\n            get el() {\n                return this._el;\n            }\n            set el(value) {\n                this.setElement(value);\n            }\n            setElement(el) {\n                this._el = el;\n                el.katrid = { object: this };\n            }\n        }\n        UI.Component = Component;\n        class TreeNode extends Component {\n            constructor(treeView, item) {\n                super();\n                this.treeView = treeView;\n                this._selected = false;\n                this._expanded = false;\n                this._level = 0;\n                this._children = [];\n                let el;\n                if (item instanceof HTMLElement)\n                    this.el = item;\n                else if (item) {\n                    this.data = item;\n                    el = document.createElement('li');\n                    el.classList.add('tree-node');\n                    let a = document.createElement('a');\n                    a.addEventListener('mousedown', (evt) => {\n                        evt.preventDefault();\n                        this.treeView.el.focus();\n                    });\n                    a.addEventListener('click', () => this.select());\n                    a.addEventListener('dblclick', (evt) => {\n                        evt.preventDefault();\n                        this.expanded = !this.expanded;\n                    });\n                    this._ul = document.createElement('ul');\n                    a.classList.add('tree-item');\n                    el.appendChild(a);\n                    el.appendChild(this._ul);\n                    this.el = el;\n                    this._a = a;\n                    this._canExpand = true;\n                    this._exp = document.createElement('span');\n                    this._exp.addEventListener('dblclick', (evt) => evt.stopPropagation());\n                    this._exp.addEventListener('click', (evt) => {\n                        evt.preventDefault();\n                        this.expanded = !this.expanded;\n                    });\n                    this._exp.classList.add('fa', 'fa-fw');\n                    a.appendChild(this._exp);\n                    if (_.isString(item.icon)) {\n                        this._iconElement = document.createElement('span');\n                        this._iconElement.classList.add('icon', 'fa', 'fa-fw');\n                        this._iconElement.classList.add(item.icon);\n                        a.appendChild(this._iconElement);\n                    }\n                    a.appendChild(document.createTextNode(item.text));\n                }\n            }\n            get children() {\n                return this._children;\n            }\n            select() {\n                this.treeView.selection = [this];\n            }\n            collapse() {\n                this.expanded = false;\n            }\n            expand() {\n                this.expanded = true;\n            }\n            get expanded() {\n                return this._expanded;\n            }\n            set expanded(value) {\n                this._expanded = value;\n                if (value) {\n                    this.el.classList.add('expanded');\n                    this._exp.classList.remove(DEFAULT_EXPAND_CLASS);\n                    this._exp.classList.add(DEFAULT_COLLAPSE_CLASS);\n                }\n                else {\n                    this.el.classList.remove('expanded');\n                    this._exp.classList.remove(DEFAULT_COLLAPSE_CLASS);\n                    this._exp.classList.add(DEFAULT_EXPAND_CLASS);\n                }\n            }\n            get index() {\n                if (this._parent)\n                    return this._parent.children.indexOf(this);\n                else\n                    return this.treeView.nodes.indexOf(this);\n            }\n            get previousSibling() {\n                let nodes;\n                if (this._parent)\n                    nodes = this._parent.children;\n                else\n                    nodes = this.treeView.nodes;\n                return nodes[this.index - 1];\n            }\n            get nextSibling() {\n                let nodes;\n                if (this._parent)\n                    nodes = this._parent.children;\n                else\n                    nodes = this.treeView.nodes;\n                return nodes[this.index + 1];\n            }\n            get previous() {\n                let p = this.previousSibling;\n                if (p && p._expanded && p.children && p.children.length)\n                    return p.last;\n                if (this._parent)\n                    return this._parent;\n                return p;\n            }\n            get next() {\n                if (this._expanded && this.children.length)\n                    return this.first;\n                let n = this.nextSibling;\n                if (n && n._expanded && n.children && n.children.length)\n                    return n.first;\n                else if (this._parent)\n                    return this._parent.nextSibling;\n                return n;\n            }\n            get first() {\n                return this.children[0];\n            }\n            get last() {\n                return this.children[this.children.length - 1];\n            }\n            get selected() {\n                return this._selected;\n            }\n            set selected(value) {\n                this._selected = value;\n                if (value)\n                    this._a.classList.add('selected');\n                else\n                    this._a.classList.remove('selected');\n                if (!this.treeView.selection.includes(this))\n                    this.treeView.selection.push(this);\n            }\n            get parent() {\n                return this._parent;\n            }\n            set parent(value) {\n                if (this._parent)\n                    this._parent.remove(this);\n                this._parent = value;\n                if (value)\n                    value.add(this);\n            }\n            add(node) {\n                this.children.push(node);\n                this._ul.appendChild(node.el);\n                this.update();\n                node.calcLevel();\n            }\n            remove(node) {\n                this.children.splice(this.children.indexOf(node), 1);\n                this.update();\n                node.calcLevel();\n            }\n            calcLevel() {\n                this.level = this._parent.level + 1;\n            }\n            update() {\n                if (this._canExpand && this.children.length)\n                    this._exp.classList.add(DEFAULT_EXPAND_CLASS);\n                else\n                    this._exp.classList.remove(DEFAULT_COLLAPSE_CLASS);\n            }\n            get level() {\n                return this._level;\n            }\n            set level(value) {\n                console.log('set level', value, this._level);\n                if (value !== this._level) {\n                    for (let c of this.el.querySelectorAll('.indent'))\n                        c.parentNode.removeChild(c);\n                    let delta = value - this._level;\n                    this._level = value;\n                    for (let n of this.all())\n                        n.level -= delta;\n                    for (let c = 0; c < this._level; c++) {\n                        let indent = document.createElement('span');\n                        indent.classList.add('indent');\n                        this._a.prepend(indent);\n                    }\n                }\n            }\n            *all() {\n                for (let x of this.children) {\n                    for (let y of x.all())\n                        yield y;\n                    yield x;\n                }\n            }\n        }\n        UI.TreeNode = TreeNode;\n        class TreeView {\n            constructor(cfg) {\n                this._selection = [];\n                this.el = cfg.dom;\n                this.nodes = [];\n                if (cfg.items)\n                    this.addNodes(cfg.items);\n                this.el.classList.add('tree-view');\n                this.el.tabIndex = 0;\n                this.el.addEventListener('keydown', (evt) => {\n                    console.log('key down;');\n                    let n;\n                    switch (evt.key) {\n                        case 'ArrowDown':\n                            console.log('arrow down;;');\n                            this.next();\n                            break;\n                        case 'ArrowUp':\n                            this.previous();\n                            break;\n                        case 'ArrowRight':\n                            n = this.currentNode;\n                            if (n && n.children.length) {\n                                if (n.expanded)\n                                    n.next.select();\n                                else\n                                    n.expand();\n                            }\n                            else\n                                this.next();\n                            break;\n                        case 'ArrowLeft':\n                            n = this.currentNode;\n                            if (n && n.children.length) {\n                                if (n.expanded)\n                                    n.collapse();\n                                else\n                                    n.previous.select();\n                            }\n                            else\n                                this.previous();\n                            break;\n                    }\n                });\n            }\n            get selection() {\n                return this._selection;\n            }\n            set selection(value) {\n                for (let node of this._selection)\n                    node.selected = false;\n                this._selection = value;\n                for (let node of value)\n                    node.selected = true;\n                let evt = new CustomEvent('selectionchange', { detail: { selection: value } });\n                this.el.dispatchEvent(evt);\n            }\n            get firstNode() {\n                if (this.nodes.length)\n                    return this.nodes[0];\n            }\n            get lastNode() {\n                if (this.nodes.length)\n                    return this.nodes[this.nodes.length - 1];\n            }\n            previous() {\n                let curNode = this.currentNode;\n                if (curNode) {\n                    let n = curNode.previous;\n                    if (n)\n                        n.select();\n                }\n                else\n                    this.lastNode.select();\n            }\n            next() {\n                let curNode = this.currentNode;\n                if (curNode) {\n                    let n = curNode.next;\n                    if (n)\n                        n.select();\n                }\n                else\n                    this.firstNode.select();\n            }\n            addNodes(nodes, parent = null) {\n                for (let node of nodes) {\n                    let item = this.addNode(node, parent);\n                    if (node.children)\n                        this.addNodes(node.children, item);\n                }\n            }\n            addNode(item, parent) {\n                let r;\n                if (item instanceof HTMLElement) { }\n                else if (typeof item === 'string')\n                    item = { text: item };\n                console.log(item);\n                r = new TreeNode(this, item);\n                if (parent)\n                    r.parent = parent;\n                else {\n                    this.nodes.push(r);\n                    console.log(r.el);\n                    this.el.appendChild(r.el);\n                }\n                return r;\n            }\n            get currentNode() {\n                if (this.selection.length)\n                    return this.selection[this.selection.length - 1];\n            }\n        }\n        UI.TreeView = TreeView;\n    })(UI = Katrid.UI || (Katrid.UI = {}));\n})(Katrid || (Katrid = {}));\n(function () {\n    class BaseTemplate {\n        getSettingsDropdown(viewType) {\n            if (viewType === 'form') {\n                return `<ul class=\"dropdown-menu pull-right\">\n    <li>\n      <a href=\"javascript:void(0);\" ng-click=\"action.showDefaultValueDialog()\">${Katrid.i18n.gettext('Set Default')}</a>\n    </li>\n  </ul>`;\n            }\n        }\n        getSetDefaultValueDialog() {\n            return `\\\n  <div class=\"modal fade\" id=\"set-default-value-dialog\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"modal-dialog\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"${Katrid.i18n.gettext('Close')}\"><span aria-hidden=\"true\">&times;</span></button>\n          <h4 class=\"modal-title\">${Katrid.i18n.gettext('Set Default')}</h4>\n        </div>\n        <div class=\"modal-body\">\n          <select class=\"form-control\" id=\"id-set-default-value\">\n            <option ng-repeat=\"field in view.fields\">{{ field.caption }} = {{ record[field.name] }}</option>\n          </select>\n          <div class=\"radio\">\n            <label><input type=\"radio\" name=\"public\">${Katrid.i18n.gettext('Only me')}</label>\n          </div>\n          <div class=\"radio\">\n            <label><input type=\"radio\" name=\"public\">${Katrid.i18n.gettext('All users')}</label>\n          </div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-primary\">${Katrid.i18n.gettext('Save')}</button>\n          <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">${Katrid.i18n.gettext('Cancel')}</button>\n        </div>\n      </div>\n    </div>\n  </div>\\\n  `;\n        }\n        static get cssListClass() {\n            return 'table table-striped table-bordered table-condensed table-hover display responsive nowrap dataTable no-footer dtr-column';\n        }\n        renderList(scope, element, attrs, rowClick, parentDataSource, showSelector = true) {\n            let ths = '<th ng-show=\"dataSource.groups.length\"></th>';\n            let tfoot = false;\n            let totals = [];\n            let cols = `<td ng-show=\"dataSource.groups.length\" class=\"group-header\">\n  <div ng-show=\"record._group\">\n  <span class=\"fa fa-fw fa-caret-right\"\n    ng-class=\"{'fa-caret-down': record._group.expanded, 'fa-caret-right': record._group.collapsed}\"></span>\n    {{::record._group.__str__}} ({{::record._group.count }})</div></td>`;\n            if (showSelector) {\n                ths += `<th class=\"list-record-selector\"><input type=\"checkbox\" ng-click=\"action.selectToggle($event.currentTarget)\" onclick=\"$(this).closest('table').find('td.list-record-selector input').prop('checked', $(this).prop('checked'))\"></th>`;\n                cols += `<td class=\"list-record-selector\" onclick=\"event.stopPropagation();\"><input title=\"teste\" type=\"checkbox\" ng-click=\"action.selectToggle($event.currentTarget)\" onclick=\"if (!$(this).prop('checked')) $(this).closest('table').find('th.list-record-selector input').prop('checked', false)\"></td>`;\n            }\n            for (let col of Array.from(element.children())) {\n                let colHtml = col.outerHTML;\n                col = $(col);\n                let name = col.attr('name');\n                if (!name) {\n                    cols += `<td>${col.html()}</td>`;\n                    ths += \"<th><span>${col.attr('label')}</span></th>\";\n                    continue;\n                }\n                let total = col.attr('total');\n                if (total) {\n                    totals.push([name, total]);\n                    tfoot = true;\n                }\n                else\n                    totals.push(total);\n                name = col.attr('name');\n                const fieldInfo = scope.view.fields[name];\n                if ((col.attr('visible') === 'False') || (fieldInfo.visible === false))\n                    continue;\n                let _widget = fieldInfo.createWidget(col.attr('widget'), scope, col, col);\n                _widget.inList = true;\n                _widget.inplaceEditor = Boolean(scope.inline);\n                ths += _widget.th(col.attr('label'));\n                cols += _widget.td(scope.inline, colHtml, col);\n            }\n            if (parentDataSource) {\n                ths += '<th class=\"list-column-delete\" ng-show=\"parent.dataSource.changing && !dataSource.readonly\">';\n                cols += '<td class=\"list-column-delete\" ng-show=\"parent.dataSource.changing && !dataSource.readonly\" ng-click=\"removeItem($index);$event.stopPropagation();\"><i class=\"fa fa-trash-o\"></i></td>';\n            }\n            if ((rowClick == null)) {\n                rowClick = 'action.listRowClick($index, row, $event)';\n            }\n            if (tfoot)\n                tfoot = `<tfoot><tr>${totals.map(t => (t ? `<td class=\"text-right\"><strong><ng-total field=\"${t[0]}\" type=\"${t[1]}\"></ng-total></ strong></td>` : '<td class=\"borderless\"></td>')).join('')}</tr></tfoot>`;\n            else\n                tfoot = '';\n            let gridClass = ' grid';\n            if (scope.inline)\n                gridClass += ' inline-editor';\n            return `<table class=\"${this.constructor.cssListClass}${gridClass}\">\n  <thead><tr>${ths}</tr></thead>\n  <tbody>\n  <tr ng-repeat=\"record in records | limitTo:totalDisplayed\" ng-click=\"${rowClick}\" ng-class=\"{'group-header': record._hasGroup, 'form-data-changing': (dataSource.changing && dataSource.recordIndex === $index), 'form-data-readonly': !(dataSource.changing && dataSource.recordIndex === $index)}\" ng-form=\"grid-row-form-{{$index}}\" id=\"grid-row-form-{{$index}}\">${cols}</tr>\n  </tbody>\n  ${tfoot}\n  </table>\n  <a href=\"javascript:void(0)\" ng-show=\"records.length > totalDisplayed\" ng-click=\"totalDisplayed = totalDisplayed + 1000\">${Katrid.i18n.gettext('View more...')}</a>\n  `;\n        }\n        renderGrid(scope, element, attrs, rowClick) {\n            const tbl = this.renderList(scope, element, attrs, rowClick, true, false);\n            let buttons;\n            if (attrs.inline == 'inline')\n                buttons = `\n<button class=\"btn btn-xs btn-info\" ng-click=\"addItem()\" ng-show=\"parent.dataSource.changing && !dataSource.changing\" type=\"button\">${Katrid.i18n.gettext('Add')}</button>\n<button class=\"btn btn-xs btn-info\" ng-click=\"addItem()\" ng-show=\"dataSource.changing\" type=\"button\">${Katrid.i18n.gettext('Save')}</button>\n<button class=\"btn btn-xs btn-info\" ng-click=\"cancelChanges()\" ng-show=\"dataSource.changing\" type=\"button\">${Katrid.i18n.gettext('Cancel')}</button>\n`;\n            else\n                buttons = `\n<button class=\"btn btn-xs btn-info\" ng-click=\"addItem()\" ng-show=\"parent.dataSource.changing\" type=\"button\">${Katrid.i18n.gettext('Add')}</button>\n<button class=\"btn btn-xs btn-outline-secondary float-right\" ng-click=\"pasteData()\" ng-show=\"parent.dataSource.changing\" type=\"button\" title=\"${Katrid.i18n.gettext('Paste')}\">\n<i class=\"fa fa-clipboard\"></i>\n</button>\n`;\n            return `<div style=\"overflow-x: auto;\"><div ng-show=\"!dataSource.readonly\">\n  ${buttons}\n  </div><div class=\"row inline-input-dialog\" ng-show=\"dataSource.changing\"/>${tbl}</div>`;\n        }\n        windowDialog(scope) {\n            console.log('window dialog', scope);\n            return `\\\n  <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\">\n    <div class=\"modal-dialog modal-lg\" role=\"document\">\n      <div class=\"modal-content\">\n        <div class=\"modal-header\">\n          <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n          <h4 class=\"modal-title\" id=\"myModalLabel\">\n          {{dialogTitle}}\n          {{action.info.display_name}}</h4>\n        </div>\n        <div class=\"modal-body\">\n    <div class=\"modal-dialog-body\" ng-class=\"{'form-data-changing': dataSource.changing}\"></div>\n  <div class=\"clearfix\"></div>\n        </div>\n        <div class=\"modal-footer\">\n          <button type=\"button\" class=\"btn btn-primary\" type=\"button\" ng-click=\"dataSource.saveAndClose()\" ng-show=\"dataSource.changing\">${Katrid.i18n.gettext('Save')}</button>\n          <button type=\"button\" class=\"btn btn-default\" type=\"button\" data-dismiss=\"modal\" ng-show=\"dataSource.changing\">${Katrid.i18n.gettext('Cancel')}</button>\n          <button type=\"button\" class=\"btn btn-default\" type=\"button\" data-dismiss=\"modal\" ng-show=\"!dataSource.changing\">${Katrid.i18n.gettext('Close')}</button>\n        </div>\n      </div>\n    </div>\n  </div>\\\n  `;\n        }\n        renderReportDialog(scope) {\n            return `<div ng-controller=\"ReportController\">\n  <form id=\"report-form\" method=\"get\" action=\"/web/reports/report/\">\n    <div class=\"data-heading panel panel-default\">\n      <div class=\"panel-body\">\n      <h2>{{ report.name }}</h3>\n      <div class=\"toolbar\">\n        <button class=\"btn btn-primary\" type=\"button\" ng-click=\"report.preview()\"><span class=\"fa fa-print fa-fw\"></span> ${Katrid.i18n.gettext('Preview')}</button>\n  \n        <div class=\"btn-group\">\n          <button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\n                  aria-expanded=\"false\">${Katrid.i18n.gettext('Export')} <span class=\"caret\"></span></button>\n          <ul class=\"dropdown-menu\">\n            <li><a ng-click=\"Katrid.Reports.Reports.preview()\">PDF</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('docx')\">Word</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('xlsx')\">Excel</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('pptx')\">PowerPoint</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('csv')\">CSV</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('txt')\">${Katrid.i18n.gettext('Text File')}</a></li>\n          </ul>\n        </div>\n  \n        <div class=\"btn-group\">\n          <button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\n                  aria-expanded=\"false\">${Katrid.i18n.gettext('My reports')} <span class=\"caret\"></span></button>\n          <ul class=\"dropdown-menu\">\n            <li><a ng-click=\"Katrid.Reports.Reports.preview()\">PDF</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('docx')\">Word</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('xlsx')\">Excel</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('pptx')\">PowerPoint</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('csv')\">CSV</a></li>\n            <li><a href=\"javascript:void(0)\" ng-click=\"Katrid.Reports.Reports.export('txt')\">${Katrid.i18n.gettext('Text File')}</a></li>\n          </ul>\n        </div>\n  \n      <div class=\"pull-right btn-group\">\n        <button class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\n                aria-expanded=\"false\"><i class=\"fa fa-gear fa-fw\"></i></button>\n        <ul class=\"dropdown-menu\">\n          <li><a href=\"javascript:void(0)\" ng-click=\"report.saveDialog()\">${Katrid.i18n.gettext('Save')}</a></li>\n          <li><a href=\"#\">${Katrid.i18n.gettext('Load')}</a></li>\n        </ul>\n      </div>\n  \n      </div>\n    </div>\n    </div>\n    <div class=\"col-sm-12\">\n      <table class=\"col-sm-12\" style=\"margin-top: 20px; display:none;\">\n        <tr>\n          <td colspan=\"2\" style=\"padding-top: 8px;\">\n            <label>${Katrid.i18n.gettext('My reports')}</label>\n  \n            <select class=\"form-control\" ng-change=\"action.userReportChanged(action.userReport.id)\" ng-model=\"action.userReport.id\">\n                <option value=\"\"></option>\n                <option ng-repeat=\"rep in userReports\" value=\"{{ rep.id }}\">{{ rep.name }}</option>\n            </select>\n          </td>\n        </tr>\n      </table>\n    </div>\n  <div id=\"report-params\">\n  <div id=\"params-fields\" class=\"col-sm-12 form-group\">\n    <div class=\"checkbox\"><label><input type=\"checkbox\" ng-model=\"paramsAdvancedOptions\"> ${Katrid.i18n.gettext('Advanced options')}</label></div>\n    <div ng-show=\"paramsAdvancedOptions\">\n      <div class=\"form-group\">\n        <label>${Katrid.i18n.gettext('Printable Fields')}</label>\n        <input type=\"hidden\" id=\"report-id-fields\"/>\n      </div>\n      <div class=\"form-group\">\n        <label>${Katrid.i18n.gettext('Totalizing Fields')}</label>\n        <input type=\"hidden\" id=\"report-id-totals\"/>\n      </div>\n    </div>\n  </div>\n  \n  <div id=\"params-sorting\" class=\"col-sm-12 form-group\">\n    <label class=\"control-label\">${Katrid.i18n.gettext('Sorting')}</label>\n    <select multiple id=\"report-id-sorting\"></select>\n  </div>\n  \n  <div id=\"params-grouping\" class=\"col-sm-12 form-group\">\n    <label class=\"control-label\">${Katrid.i18n.gettext('Grouping')}</label>\n    <select multiple id=\"report-id-grouping\"></select>\n  </div>\n  \n  <div class=\"clearfix\"></div>\n  \n  </div>\n    <hr>\n      <table class=\"col-sm-12\">\n        <tr>\n          <td class=\"col-sm-4\">\n            <select class=\"form-control\" ng-model=\"newParam\">\n              <option value=\"\">--- ${Katrid.i18n.gettext('FILTERS')} ---</option>\n              <option ng-repeat=\"field in report.fields\" value=\"{{ field.name }}\">{{ field.label }}</option>\n            </select>\n          </td>\n          <td class=\"col-sm-8\">\n            <button\n                class=\"btn btn-default\" type=\"button\"\n                ng-click=\"report.addParam(newParam)\">\n              <i class=\"fa fa-plus fa-fw\"></i> ${Katrid.i18n.gettext('Add Parameter')}\n            </button>\n          </td>\n        </tr>\n      </table>\n  <div class=\"clearfix\"></div>\n  <hr>\n  <div id=\"params-params\">\n    <div ng-repeat=\"param in report.params\" ng-controller=\"ReportParamController\" class=\"row form-group\">\n      <div class=\"col-sm-12\">\n      <div class=\"col-sm-4\">\n        <label class=\"control-label\">{{param.label}}</label>\n        <select ng-model=\"param.operation\" class=\"form-control\" ng-change=\"param.setOperation(param.operation)\">\n          <option ng-repeat=\"op in param.operations\" value=\"{{op.id}}\">{{op.text}}</option>\n        </select>\n      </div>\n      <div class=\"col-sm-8\" id=\"param-widget\"></div>\n      </div>\n    </div>\n  </div>\n  </form>\n  </div>\\\n  `;\n        }\n    }\n    Katrid.UI.utils = {\n        BaseTemplate,\n        Templates: new BaseTemplate()\n    };\n})();\nvar Katrid;\n(function (Katrid) {\n    var UI;\n    (function (UI) {\n        var Web;\n        (function (Web) {\n            class ActionView extends HTMLElement {\n                connectedCallback() {\n                    this.classList.add('action-view');\n                }\n            }\n            Web.ActionView = ActionView;\n            customElements.define('action-view', ActionView);\n            class AttachmentsButton extends HTMLElement {\n                connectedCallback() {\n                    this.actionView = this.closest('action-view');\n                    this._recordLoadedHook = async (evt) => {\n                        clearTimeout(this._timeout);\n                        let rec = evt.detail.record;\n                        if (rec && rec.id)\n                            this._timeout = setTimeout(async () => {\n                                let model = new Katrid.Services.Model('ir.attachment');\n                                let res = await model.search({ where: { model: this.actionView.action.model.name, object_id: evt.detail.record.id }, count: false });\n                                if (res && res.data)\n                                    this.actionView.action.attachments = res.data;\n                            }, 1000);\n                        else\n                            setTimeout(() => {\n                                this.actionView.action.attachments = [];\n                            });\n                    };\n                    this.actionView.addEventListener(\"recordLoaded\", this._recordLoadedHook);\n                }\n                disconnectedCallback() {\n                    this.actionView.removeEventListener(\"recordLoaded\", this._recordLoadedHook);\n                }\n                renderItems(items) {\n                    for (let item of items)\n                        this.renderItem(item);\n                }\n                renderItem(item) {\n                    let a = document.createElement('a');\n                    a.classList.add('dropdown-item position-relative');\n                    a.setAttribute('href', item.download_url);\n                    a.innerText = item.name;\n                    a.innerHTML = `<span class=\"fa fa-times remove-attachment-button\" title=\"${Katrid.i18n.gettext('Delete attachment')}\"></span>`;\n                    a.querySelector('span').onclick = (evt) => {\n                        evt.preventDefault();\n                        this.onDeleteAttachment(item);\n                        evt.stopPropagation();\n                    };\n                }\n                onDeleteAttachment(item) {\n                }\n            }\n            customElements.define('attachments-button', AttachmentsButton);\n        })(Web = UI.Web || (UI.Web = {}));\n    })(UI = Katrid.UI || (Katrid.UI = {}));\n})(Katrid || (Katrid = {}));\n(function () {\n    Katrid.$hashId = 0;\n    _.mixin({\n        hash(obj) {\n            if (!obj.$hashId) {\n                obj.$hashId = ++Katrid.$hashId;\n            }\n            return obj.$hashId;\n        }\n    });\n    _.mixin({\n        sum(iterable, member) {\n            let r = 0;\n            if (iterable)\n                for (let row of iterable) {\n                    let v = row[member];\n                    if (!_.isNumber(v))\n                        v = Number(v);\n                    if (_.isNaN(v))\n                        v = 0;\n                    r += v;\n                }\n            return r;\n        },\n        avg(iterable, member) {\n            if (iterable && iterable.length) {\n                let r = 0;\n                return _.sum(iterable, member) / iterable.length;\n            }\n        }\n    });\n})();\n//# sourceMappingURL=katrid.js.map"]}